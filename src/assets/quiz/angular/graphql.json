[
	{
		"title" : "Which of the following GraphQL’s hooks?",
		"detail" : "",
		"output" : "useQuery",
		"options" : {
			"a" : "useQuery",
			"b" : "useLazyQuery",
			"c" : "useQueryLazy",
			"d" : "None of these"
		},
		"correct": "A"
	},

		{
		"title" : "Which of the following pattern is used GraphQL’s Subscription.",
		"detail" : "",
		"output" : "Pub/sub",
		"options" : {
			"a" : "Pub/sub",
			"b" : "Request/response",
			"c" : "Streaming",
			"d" : "None of the options"
		},
		"correct": "A"
	},

		{
		"title" : "Apollo client store the results of its queries in the following way.",
		"detail" : "",
		"output" : "In memory cache",
		"options" : {
			"a" : "Database",
			"b" : "In memory cache",
			"c" : "Local File",
			"d" : "Apollo cache"
		},
		"correct": "B"
	},

		{
		"title" : "What is the correct syntax of using the “useMutation” hook in react?",
		"detail" : "",
		"output" : "Const[addTodo, data ] = useMutation(ADD_TODO)",
		"options" : {
			"a" : "Const[addTodo,{data}] = useMutation(ADD_TODO);",
			"b" : "Const{addTodo, data} = useMutation(ADD_TODO);",
			"c" : "Const[addTodo, data ] = useMutation(ADD_TODO)",
			"d" : "None of the options"
		},
		"correct": "C"
	},

		{
		"title" : "What is the correct syntax to use the “ useQuery” hook in react?",
		"detail" : "",
		"output" : " Cont{ loading, error,data} =useQuery(GET_LIST)",
		"options" : {
			"a" : " Cont{ loading, error,data} =useQuery(GET_LIST)",
			"b" : " Cont { data, error, loading} =useQuery(GET_LIST)",
			"c" : "Const {error, data, loading} = useQuery(GET LIST)",
			"d" : "None of the options"
		},
		"correct": "A"
	},

		{
		"title" : "We use below sign to make fields mandatory/not null in GraphQL.",
		"detail" : "",
		"output" : "!",
		"options" : {
			"a" : "$",
			"b" : "—",
			"c" : "!",
			"d" : "@"
		},
		"correct": "C"
	},

		{
		"title" : "Working with GraphQL has following major advantages.",
		"detail" : "",
		"output" : "All of the operation",
		"options" : {
			"a" : "No Overfetching",
			"b" : " Single source of truth",
			"c" : "Typed Query Language",
			"d" : "All of the operation"
		},
		"correct": "D"
	},

		{
		"title" : "What are the valid graphQL operation?",
		"detail" : "",
		"output" : "All of these",
		"options" : {
			"a" : "Query",
			"b" : "Mutation",
			"c" : "Subscription",
			"d" : "All of these"
		},
		"correct": "D"
	},

	{
		"title" : "Which of the following GraphQL’s hooks should be used to update data on server",
		"detail" : "",
		"output" : "useMutation",
		"options" : {
			"a" : "useQuery",
			"b" : "useMutation",
			"c" : "useSubscription",
			"d" : "none of the options"
		},
		"correct": "B"
	},

		{
		"title" : "GraphQL is ?",
		"detail" : "",
		"output" : "Both A and B",
        
		"options" : {
			"a" : " open source",
			"b" : "server-side technology",
			"c" : "Both A and B",
			"d" : "None of the above."
		},
		"correct": "C"
	},

		{
		"title" : "GraphQL is an open source server-side technology which was developed by?",
		"detail" : "",
		"output" : "Facebook",
		"options" : {
			"a" : "Google",
			"b" : "Facebook",
			"c" : "Amazon",
			"d" : "Microsoft"
		},
		"correct": "B"
	},

	

		{
		"title" : "GraphQL Server can be deployed by using any of the _______ methods.",
		"detail" : "",
		"output" : " 3",
		"options" : {
			"a" : "1",
			"b" : " 2",
			"c" : " 3",
			"d" : "4"
		},
		"correct": "C"
	},

		{
		"title" : "Which approach is helpful for companies which have legacy infrastructure and different APIs?",
		"detail" : "",
		"output" : "GraphQL server that integrates existing systems",
		"options" : {
			"a" : "GraphQL server with connected database",
			"b" : "GraphQL server that integrates existing systems",
			"c" : "Hybrid approach",
			"d" : "None of the above"
		},
		"correct": "B"
	},
	


	{
		"title" : "A ____________ is the client application request to retrieve data from database or legacy API's.",
		"detail" : "",
		"output" : "GraphQL query",
		"options" : {
			"a" : "GraphQL schema",
			"b" : "GraphQL resolvers",
			"c" : "Both A and B",
			"d" : "GraphQL query"
		},
		"correct": "D"
	},

		{
		"title" : "Resolvers provide the instructions for turning a GraphQL operation into data.",
		"detail" : "",
		"output" : "TRUE",
		"options" : {
			"a" : "TRUE",
			"b" : "FALSE",
			"c" : "Can be true or false",
			"d" : "Can not say"
		},
		"correct": "A"
	},
    {
		"title" : "Mutations are operations sent to the server to ___________ data.",
		"detail" : "",
		"output" : "create, update or delete",
		"options" : {
			"a" : "create",
			"b" : "delete",
			"c" : "update",
			"d" : "create, update or delete"
		},
		"correct": "D"
	}

		

]