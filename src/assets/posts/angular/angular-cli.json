[
  {
    "id": 3908,
    "date": "2020-12-10T11:59:16",
    "date_gmt": "2020-12-10T11:59:16",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3908" },
    "modified": "2020-12-10T11:59:16",
    "modified_gmt": "2020-12-10T11:59:16",
    "slug": "angular-cli-tutorial",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-cli-tutorial/",
    "title": { "rendered": "Angular CLI tutorial" },
    "content": {
      "rendered": "\n<h2>Why Angular CLI</h2>\n\n\n\n<p>Angular is easy to learn Front End Framework. But setting development environment is pretty complicated.&nbsp;There are many decisions, you have when you choose Angular as your JavaScript Framework.</p>\n\n\n\n<p>You have an option of choosing <code>Javascript</code>, <code>Typescript</code> or <code>dart</code>. You have to choose a module loader among <code>SystemJs</code> &amp; <code>Webpack</code> etc. You need to pickup your testing Framework. We discussed all this in our tutorial Installing and Setting Up an Angular Development Environment</p>\n\n\n\n<p>Once you make a choice, then you have set up a lot of libraries and packages. Each of these libraries comes with their own configuration files. For instance, you need to create&nbsp;<code>Package.Json</code>&nbsp;file and add all the required libraries. Create&nbsp;<code>Webpack</code>&nbsp;or&nbsp;<code>SystemJS</code>&nbsp;configuration files. Configuration files are also required for&nbsp;<code>Typescript</code>&nbsp;&amp;&nbsp;<code>Typings</code>&nbsp;etc. You need to configure the Testing Framework also.</p>\n\n\n\n<p>Instead, you can install Angular CLI and get started right away.</p>\n\n\n\n<h2>What is Angular CLI</h2>\n\n\n\n<p>The Angular CLI helps you to quickly create an Angular application with all the configuration files and packages in one single command. It also helps us to add features (components, directives, services, etc) to existing Angular applications.It helps us to test , build &amp; distribute our application</p>\n\n\n\n<p>The Angular CLI creates the Angular Application and uses&nbsp;<code>Typescript</code>,&nbsp;<code>Webpack</code>&nbsp;( for Module bundling),&nbsp;<code>Karma</code>&nbsp;( for unit testing),&nbsp;<code>Protractor</code>&nbsp;( for an&nbsp;end to end testing).</p>\n\n\n\n<h2>Installing Angular CLI</h2>\n\n\n\n<p>The first step is to install the Angular CLI. This can be done by using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g @angular/cli@latest </code></pre>\n\n\n\n<p>The above command installs the latest version of Angular CLI in your machine. Note that we have used the&nbsp;-g&nbsp;flag, (which stands for global) installs the&nbsp;Angular CLI&nbsp;system-wide so that you can use it in your all projects.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/11/Installing-Angular-CLI.png\" alt=\"\" class=\"wp-image-9518\"/></figure>\n\n\n\n<h2>Angular CLI Versions</h2>\n\n\n\n<p>Since, the Angular Version 6, the Angular CLI follows the same Version No as the Angular. Hence for Angular 7, the corresponding version of the Angular CLI is 7.&nbsp;</p>\n\n\n\n<p>The Angular CLI version 1.7 was for Angular 5 and&nbsp;Angular CLI 1.4 was for Angular 4</p>\n\n\n\n<p><strong>You can keep track of the latest Angular CLI release from this link https://github.com/angular/angular-cli/releases</strong></p>\n\n\n\n<h3>Angular CLI Version Check</h3>\n\n\n\n<p>You can find out the Current Installed Angular CLI Version by Using the Command</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ng --version </code></pre>\n\n\n\n<p>The latest version as of writing this article is 7.0.6. The command above also gives the version of node installed in your system.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/11/Finding-Angular-CLI-Version.png\" alt=\"\" class=\"wp-image-9519\"/></figure>\n\n\n\n<h2>Angular CLI Commands</h2>\n\n\n\n<figure id=\"tablepress-53\" class=\"wp-block-table\"><table><thead><tr><th>Commad</th><th>Alias</th><th>Description</th></tr></thead><tbody><tr><td><code>help</code></td><td></td><td>Help message shows the List of available commands and their short descriptions.</td></tr><tr><td><code>version</code></td><td><code>v</code></td><td>Find out the version of the Angular CLI Installed</td></tr><tr><td><code>new</code></td><td><code>n</code></td><td>Creates a new folder (Workspace) and ads the initial Angular app. Note that you can create multiple apps in a single folder (Workspace)</td></tr><tr><td><code>add</code></td><td></td><td>Adds the npm package to the workspace and configure the default app project to use that library.</td></tr><tr><td><code>generate</code></td><td><code>g</code></td><td>Generates and/or modifies files based on a schematic.</td></tr><tr><td><code>update</code></td><td></td><td>Updates your application and its dependencies</td></tr><tr><td><code>serve</code></td><td><code>s</code></td><td>Builds and serves your app, rebuilding on file changes.</td></tr><tr><td><code>run</code></td><td></td><td>Runs a custom target defined in your project.</td></tr><tr><td><code>build</code></td><td><code>b</code></td><td>The Compiles the Angular app into an output directory ( Default is dist)</td></tr><tr><td><code>test</code></td><td><code>t</code></td><td>Runs unit tests in a project.</td></tr><tr><td><code>e2e</code></td><td><code>e</code></td><td>Builds and serves an Angular app, then runs end-to-end tests using Protractor.</td></tr><tr><td><code>config</code></td><td></td><td>Retrieves or sets Angular configuration values.</td></tr><tr><td><code>doc</code></td><td><code>d</code></td><td>Opens the official Angular documentation (angular.io) in a browser, and searches for a given keyword.</td></tr><tr><td><code>lint</code></td><td><code>l</code></td><td>Runs linting tools on Angular app code in a given project folder.</td></tr><tr><td><code>xi18n</code></td><td></td><td>Extracts i18n messages from source code.</td></tr></tbody></table></figure>\n\n\n\n<h2>Getting Help</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>ng help\r\n </code></pre>\n\n\n\n<p>Getting help on individual commands us the syntax <code>ng [command name] --help</code>. For Example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng add --help       //help on add command\r\nng new --help       //help on new command  </code></pre>\n\n\n\n<h2>Creating the Application with ng new</h2>\n\n\n\n<p>The ng new command is used to create new folder and creates an App with the provided name.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ng new  </code></pre>\n\n\n\n<p>The command will ask you</p>\n\n\n\n<ul><li><strong>What name would you like to use for the project?</strong><br>Enter the name of the project here. “GettingStarted”</li><li><strong>Would you like to add Angular Routing?</strong><br>Answer this as Yes unless you do not want to add Angular Routing.</li><li><strong>Which stylesheet format would you like to use?</strong><br>You arrow keys to select the available options from CSS, SCSS, SASS, LESS, and Stylus</li></ul>\n\n\n\n<p>The above command will create a folder&nbsp;<strong>GettingStarted</strong>&nbsp;and copies all the required dependencies and configuration settings. The Angular CLI does the following</p>\n\n\n\n<ol><li>Creates a new directory&nbsp;GettingStarted is created</li><li>Downloads and installs Angular libraries and any other dependencies</li><li>Installs and configures&nbsp;TypeScript.</li><li>Installs and configures&nbsp;Karma&nbsp;&amp;&nbsp;Protractor&nbsp;for testing</li><li>Initialises the&nbsp;Git.</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/11/Creating-the-new-application-with-ng-new.png\" alt=\"\" class=\"wp-image-9520\"/></figure>\n\n\n\n<h3>Running the Application</h3>\n\n\n\n<p>To run the application cd into the folder and run either ng server or use npm start (which runs the ng serve behind the scene)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\ncd gettingStarted\r\nng serve         // or npm start  </code></pre>\n\n\n\n<p>Now open the browser and enter the URL&nbsp;<code>http://localhost:4200/</code>&nbsp;and you should be able to see&nbsp;<code>Welcome to GettingStarted!</code>&nbsp;Message</p>\n\n\n\n<h3>ng new options</h3>\n\n\n\n<figure id=\"tablepress-54\" class=\"wp-block-table\"><table><thead><tr><th>Options</th><th>Alias</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--dry-run</code></td><td><code>-d</code></td><td>Run through without making any changes.</td></tr><tr><td><code>--force</code></td><td><code>-f</code></td><td>Forces overwriting of any existing files in the project folder</td></tr><tr><td><code>--verbose</code></td><td><code>-v</code></td><td>Displays the out of the command</td></tr><tr><td><code>--collection</code></td><td><code>-c</code></td><td>Schematics to use. For more info on Schematics click here.</td></tr><tr><td><code>--inline-style</code></td><td><code>-s</code></td><td>Use inline style rather than the external StyleSheet file. does not create external Stylesheets</td></tr><tr><td><code>--inline-template</code></td><td><code>-t</code></td><td>Does not create an external template file for the component. Specifies if the template will be in the ts file.</td></tr><tr><td><code>--view-encapsulation</code></td><td></td><td>Specifies the view encapsulation strategy. Three Options are available here<br><code>Emulated</code>,&nbsp;<code>Native</code>&nbsp;&amp;.&nbsp;<code>None</code>&nbsp;Default is&nbsp;<code>Emulated</code></td></tr><tr><td><code>--routing</code></td><td></td><td>Generates a routing module. If the option is not specified, it will ask for the confirmation</td></tr><tr><td><code>--prefix</code></td><td><code>-p</code></td><td>The file extension to be used for style files. The values available are&nbsp;<code>CSS</code>,&nbsp;<code>SCSS</code>,&nbsp;<code>SASS</code>,<code>LESS</code>,and&nbsp;<code>Stylus</code>. If the options are not specified, it will ask to select the appropriate style when running the command</td></tr><tr><td><code>--skip-tests</code></td><td><code>-S</code></td><td>Skip creating test spec files. This option does not seem to remove the test related files. Check the bug report here. Use the&nbsp;<code>--minimal</code>&nbsp;option instead</td></tr><tr><td><code>--skip-package-json</code></td><td></td><td>Do not add dependencies to&nbsp;<code>package.json</code></td></tr><tr><td><code>--minimal</code></td><td></td><td>Installs the minimal set of features. Does not create test files. Creates inline style &amp; templates</td></tr></tbody></table></figure>\n\n\n\n<h3>ng new example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n//creates with new project with Style CSS\r\nng new gettingStarted --routing  --style CSS\r\n \r\n//creates the new project with HelloWorld_root as the selector\r\nng new HelloWorld --routing  --style CSS -p HelloWorld</code></pre>\n\n\n\n<h2>ng generate</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nng generate &lt;schematic> &#91;options]\r\nng g &lt;schematic> &#91;options]</code></pre>\n\n\n\n<p><code>ng generate</code> or (<code>ng g</code>) is used to generate components, module, class, pipes &amp; directives, etc. The following tables show the list of artifacts that can be generated.</p>\n\n\n\n<figure id=\"tablepress-55\" class=\"wp-block-table\"><table><thead><tr><th>schematic</th><th>Syntax</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>appShell</code></td><td><code>ng g appShell [options]</code></td><td>Generate an App shell. Read about App Shell from&nbsp;<a href=\"https://blog.angular-university.io/angular-app-shell/\">here</a></td></tr><tr><td><code>application</code></td><td><code>ng g application&nbsp;[options]</code></td><td>Generates an application</td></tr><tr><td><code>class</code></td><td><code>ng g class&nbsp;[options]</code></td><td>Generates Class file</td></tr><tr><td><code>component</code></td><td><code>ng g component&nbsp;[options]</code></td><td>Generates a component</td></tr><tr><td><code>directive</code></td><td><code>ng g directive&nbsp;[options]</code></td><td>Generates a Directive</td></tr><tr><td><code>enum</code></td><td><code>ng g enum&nbsp;[options]</code></td><td>Generates an enum</td></tr><tr><td><code>guard</code></td><td><code>ng g guard&nbsp;[options]</code></td><td>Generates a Guard Component</td></tr><tr><td><code>interface</code></td><td><code>ng g interface&nbsp;[options]</code></td><td>Generates an Interface</td></tr><tr><td><code>library</code></td><td><code>ng g library&nbsp;[options]</code></td><td>Generates a Library</td></tr><tr><td><code>module</code></td><td><code>ng g module&nbsp;[options]</code></td><td>Generates a Module</td></tr><tr><td><code>pipe</code></td><td><code>ng g pipe&nbsp;[options]</code></td><td>Generates a Pipe</td></tr><tr><td><code>service</code></td><td><code>ng g service&nbsp;[options]</code></td><td>Generates a Service class</td></tr><tr><td><code>serviceWorker</code></td><td><code>ng g serviceWorker [options]</code></td><td>Generates a Service worker</td></tr><tr><td><code>universal</code></td><td><code>ng g universal [options]</code></td><td>Generates a Universal</td></tr></tbody></table></figure>\n\n\n\n<h3 id=\"mce_36\">Common options</h3>\n\n\n\n<p>The following are the common options of the&nbsp;<code>ng g</code>&nbsp;command</p>\n\n\n\n<figure id=\"tablepress-57\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--defaults=true|false</code></td><td></td><td>false</td><td>When true, disables interactive input prompts for options with a default</td></tr><tr><td><code>--dryRun=true|false</code></td><td><code>-d</code></td><td>false</td><td>When true, run through and report activity without writing out results.</td></tr><tr><td><code>--force=true|false</code></td><td><code>-f</code></td><td>false</td><td>When true, force overwriting of existing files</td></tr><tr><td><code>--help=<br>true|false|json|JSON</code></td><td></td><td>false</td><td>Shows a help message for this command in the console.</td></tr><tr><td><code>--interactive=true|false</code></td><td></td><td>false</td><td>When false, disables interactive input prompts.</td></tr></tbody></table></figure>\n\n\n\n<h3>Component</h3>\n\n\n\n<p>The following command generates the&nbsp;<a href=\"https://www.tektutorialshub.com/angular/angular-components/\">component</a>.</p>\n\n\n\n<p><code>ng g component &lt;name&gt; [options]</code></p>\n\n\n\n<p>Examples</p>\n\n\n\n<p><code>ng g component Hello</code></p>\n\n\n\n<p>The above command does the following</p>\n\n\n\n<ul><li>Creates the&nbsp;<code>Hello</code>&nbsp;folder under the&nbsp;<code>src/app</code>&nbsp;folder</li><li>Create the&nbsp;<code>HelloComponent</code>&nbsp;along with CSS, Spec &amp; Template file under the Hello folder</li><li>Imports the&nbsp;<code>HelloComponent</code>&nbsp;in the root module and adds it to the declarations array</li><li>The CSS selector use the format&nbsp;<code>app-&lt;name&gt;</code>. i.e&nbsp;<code>app-hello</code></li></ul>\n\n\n\n<p>Run these commands from the root folder of the application.</p>\n\n\n\n<p><code>ng g component --flat Hello</code>&nbsp;does not create the&nbsp;<code>hello</code>&nbsp;folder. The&nbsp;<a href=\"https://www.tektutorialshub.com/angular/angular-components/\">component</a>&nbsp;is created in the&nbsp;<code>src/app</code>&nbsp;folder.</p>\n\n\n\n<p><code>ng g component --flat hello/hello</code>&nbsp;creates the&nbsp;<a href=\"https://www.tektutorialshub.com/angular/angular-components/\">component</a>&nbsp;under&nbsp;<code>src/app/hello</code>&nbsp;folder</p>\n\n\n\n<p><code>ng g component --export hello</code>&nbsp;adds the&nbsp;<a href=\"https://www.tektutorialshub.com/angular/angular-components/\">component</a>&nbsp;to the&nbsp;<code>exports</code>&nbsp;<strong>metadata array</strong>&nbsp;of the module.</p>\n\n\n\n<p><code>ng g component --prefix=myapp hello</code>&nbsp;uses the CSS selector as&nbsp;<code>myapp-hello</code>.</p>\n\n\n\n<p><code>ng g component --selector=hi --force hello</code>&nbsp;uses the selector as&nbsp;<code>hi</code></p>\n\n\n\n<h4>generate&nbsp;component&nbsp;inside&nbsp;module</h4>\n\n\n\n<p><code>ng g module account</code>&nbsp;generates the code for account module</p>\n\n\n\n<p><code>ng g component --module=account account/hello</code>&nbsp;adds the&nbsp;<a href=\"https://www.tektutorialshub.com/angular/angular-components/\">component</a>&nbsp;to the account module</p>\n\n\n\n<p><code>ng g component --module=account hello</code>&nbsp;this works provided the current directory is module directory i.e&nbsp;<code>src/app/account</code></p>\n\n\n\n<p>The following is the list of all available options</p>\n\n\n\n<figure id=\"tablepress-56\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--changeDetection= Default|OnPush</code></td><td><code>-c</code></td><td>Default</td><td>Specifies the change detection strategy.</td></tr><tr><td><code>--entryComponent= true|false</code></td><td></td><td>false</td><td>Specifies if the component is an entry component of declaring module.</td></tr><tr><td><code>--export=true|false</code></td><td></td><td>false</td><td>Specifies if declaring module exports the component.</td></tr><tr><td><code>--flat= true|false</code></td><td></td><td>false</td><td>Flag to indicate if a directory is created.</td></tr><tr><td><code>--inlineStyle= true|false</code></td><td><code>-s</code></td><td>false</td><td>Specifies if the style will be in the ts file.</td></tr><tr><td><code>--inlineTemplate=true|false</code></td><td><code>-t</code></td><td>false</td><td>Specifies if the template will be in the ts file.</td></tr><tr><td><code>--lintFix= true|false</code></td><td></td><td>false</td><td>Specifies whether to apply lint fixes after generating the component.</td></tr><tr><td><code>--module= module</code></td><td><code>-m</code></td><td>root module</td><td>Allows specification of the declaring module.</td></tr><tr><td><code>--prefix= prefix</code></td><td><code>-p</code></td><td></td><td>The prefix to apply to generated selectors.</td></tr><tr><td><code>--project= project</code></td><td></td><td></td><td>The name of the project.</td></tr><tr><td><code>--selector= selector</code></td><td></td><td></td><td>The selector to use for the component.</td></tr><tr><td><code>--skipImport= true|false</code></td><td></td><td>false</td><td>Flag to skip the module import.</td></tr><tr><td><code>--spec= true|false</code></td><td></td><td>true</td><td>Specifies if a spec file is generated.</td></tr><tr><td><code>--styleext= styleext</code></td><td></td><td>css</td><td>The file extension to be used for style files</td></tr><tr><td><code>--viewEncapsulation=<br><br>Emulated| Native| None| ShadowDom</code></td><td><code>-v</code></td><td>Emulated</td><td>Specifies the view encapsulation strategy.</td></tr></tbody></table></figure>\n\n\n\n<h3>Directive</h3>\n\n\n\n<p><code>ng g directive &lt;name> [options]</code> is used to generate the directive. For Example <code>ng g directive Some</code> generates the <code>Some.Directive.ts</code>. The following code is generated. It also generates the <code>some.directive.spec.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive } from '@angular/core';\r\n \r\n@Directive({\r\n  selector: '&#91;appSome]'\r\n})\r\nexport class SomeDirective {\r\n \r\n  constructor() { }\r\n \r\n}</code></pre>\n\n\n\n<p>The above command does not create the folder. You can use the&nbsp;<code>ng g directive directive/Some</code>, which will create the directive under the folder&nbsp;<code>directive</code>.</p>\n\n\n\n<p>You can use the command&nbsp;<code>ng g directive --flat=false Some</code>, which will create the directive under the folder&nbsp;<code>Some</code>&nbsp;(folder name is same as the directive name)</p>\n\n\n\n<p>You can use the&nbsp;<code>--force</code>&nbsp;flag to force overwriting of the files, if the files already exists</p>\n\n\n\n<p>Use the<code>--module</code>&nbsp;flag to add the directive to a module other than the root module.</p>\n\n\n\n<p>Use the&nbsp;<code>--prefix</code>&nbsp;or&nbsp;<code>--selector</code>&nbsp;flag to change the CSS Selctor.</p>\n\n\n\n<p>You can use the&nbsp;<code>--export</code>&nbsp;&amp;&nbsp;<code>--skipImport</code>&nbsp;to add the directive to exports and imports metadata of the module</p>\n\n\n\n<p>The following is the complete list of available options</p>\n\n\n\n<figure id=\"tablepress-58\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--export=true|false</code></td><td></td><td>false</td><td>Specifies if declaring module exports the component.</td></tr><tr><td><code>--flat= true|false</code></td><td></td><td>true</td><td>Flag to indicate if a directory is created.</td></tr><tr><td><code>--lintFix= true|false</code></td><td></td><td>false</td><td>Specifies whether to apply lint fixes after generating the component.</td></tr><tr><td><code>--module= module</code></td><td><code>-m</code></td><td>root module</td><td>Allows specification of the declaring module.</td></tr><tr><td><code>--prefix= prefix</code></td><td><code>-p</code></td><td></td><td>The prefix to apply to generated selectors.</td></tr><tr><td><code>--project= project</code></td><td></td><td></td><td>The name of the project.</td></tr><tr><td><code>--selector= selector</code></td><td></td><td></td><td>The selector to use for the component.</td></tr><tr><td><code>--skipImport= true|false</code></td><td></td><td>false</td><td>Flag to skip the module import.</td></tr><tr><td><code>--spec= true|false</code></td><td></td><td>true</td><td>Specifies if a spec file is generated.</td></tr></tbody></table></figure>\n\n\n\n<h3>Pipe</h3>\n\n\n\n<p><code>ng generate pipe &lt;name> [options]</code> is used to generate the pipe. For Example, <code>ng g pipe Date</code> generates the <code>date.pipe.ts</code>. The following code is generated. It also generates the <code>date.pipe.ts.spec.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n \r\n@Pipe({\r\n  name: 'date'\r\n})\r\nexport class DatePipe implements PipeTransform {\r\n \r\n  transform(value: any, args?: any): any {\r\n    return null;\r\n  }\r\n \r\n}</code></pre>\n\n\n\n<p>The above command does not create the folder. You can use the <code>ng g pipe pipes/Date</code>, which will create the pipe under the folder<code>pipes</code>.</p>\n\n\n\n<p>You can use the command <code>ng g pipe --flat=false Date</code>, which will create the pipe under the folder <code>Date</code> (folder name is the same as the pipe name)</p>\n\n\n\n<p>You can use the&nbsp;<code>--force</code>&nbsp;flag to force overwriting of the files, if the files already exists</p>\n\n\n\n<p>Use the<code>--module</code> flag to add the pipe to a module other than the root module.</p>\n\n\n\n<p>You can use the&nbsp;<code>--export</code>&nbsp;&amp;&nbsp;<code>--skipImport</code>&nbsp;to add the directive to exports and imports metadata of the module</p>\n\n\n\n<p>The following is the complete list of available options</p>\n\n\n\n<figure id=\"tablepress-59\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--export=true|false</code></td><td></td><td>true</td><td>Specifies if declaring module exports the component.</td></tr><tr><td><code>--flat= true|false</code></td><td></td><td>true</td><td>Flag to indicate if a directory is created.</td></tr><tr><td><code>--lintFix= true|false</code></td><td></td><td>false</td><td>Specifies whether to apply lint fixes after generating the component.</td></tr><tr><td><code>--module= module</code></td><td><code>-m</code></td><td>root module</td><td>Allows specification of the declaring module.</td></tr><tr><td><code>--project= project</code></td><td></td><td></td><td>The name of the project.</td></tr><tr><td><code>--skipImport= true|false</code></td><td></td><td>false</td><td>Flag to skip the module import.</td></tr><tr><td><code>--spec= true|false</code></td><td></td><td>true</td><td>Specifies if a spec file is generated.</td></tr></tbody></table></figure>\n\n\n\n<h3>Service</h3>\n\n\n\n<p><code>ng generate service &lt;name> [options]</code> is used to generate the service. For Example <code>ng g service Data</code> generates the <code>data.service.ts</code> &amp;<code>data.service.ts.spec.ts</code>. The following is the sample code generated by the command</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Injectable } from '@angular/core';\r\n \r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataService {\r\n \r\n  constructor() { }\r\n}</code></pre>\n\n\n\n<p>The above command does not create the folder. You can use the&nbsp;<code>ng g service services/Data</code>, which will create the service under the folder<code>services</code>.</p>\n\n\n\n<p>You can use the command&nbsp;<code>ng g service --flat=false Data</code>, which will create the service under the folder&nbsp;<code>Data</code>&nbsp;(folder name is same as the service name)</p>\n\n\n\n<figure id=\"tablepress-60\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--flat= true|false</code></td><td></td><td>true</td><td>Flag to indicate if a directory is created.</td></tr><tr><td><code>--lintFix= true|false</code></td><td></td><td>false</td><td>Specifies whether to apply lint fixes after generating the component.</td></tr><tr><td><code>--project= project</code></td><td></td><td></td><td>The name of the project.</td></tr><tr><td><code>--spec= true|false</code></td><td></td><td>true</td><td>Specifies if a spec file is generated.</td></tr></tbody></table></figure>\n\n\n\n<h3>class</h3>\n\n\n\n<p><code>ng generate class &lt;name> [options]</code> is used to generate the class. For Example <code>ng g class customer</code> generates the <code>customer.ts</code> in the current folder. The following is the sample code generated by the command</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class Customer {\r\n}\r\n </code></pre>\n\n\n\n<p>Use the command&nbsp;<code>ng g class class/customer</code>&nbsp;to create the class under the&nbsp;<code>class</code>&nbsp;folder.</p>\n\n\n\n<figure id=\"tablepress-61\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--project= project</code></td><td></td><td></td><td>The name of the project.</td></tr><tr><td><code>--spec= true|false</code></td><td></td><td>true</td><td>Specifies if a spec file is generated.</td></tr><tr><td><code>--type=type</code></td><td></td><td>default</td><td>Specifies the type of class</td></tr></tbody></table></figure>\n\n\n\n<h3>Module</h3>\n\n\n\n<p>use the <code>ng g module &lt;name> [options]</code> command to generate the module. For Example <code>ng g module account</code> generates the account module under the folder <code>src/app/account</code>. The following code is generated</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n \r\n@NgModule({\r\n  declarations: &#91;],\r\n  imports: &#91;\r\n    CommonModule\r\n  ]\r\n})\r\nexport class AccountModule { }</code></pre>\n\n\n\n<p><code>ng g module account --module=app</code>&nbsp;generates the account module and adds it to the&nbsp;<code>imports</code>&nbsp;metadata array of&nbsp;<code>AppModule</code></p>\n\n\n\n<p><code>ng g module account --routing=true --force</code>. The&nbsp;<code>--force</code>&nbsp;flag overwrites the previously generated files. The&nbsp;<code>--routing=true</code>&nbsp;also creates the&nbsp;<code>account-routing.module</code>. The routes are registered with the&nbsp;<code>forChild(routes)</code></p>\n\n\n\n<p><code>ng g module account --force --routing=true --routingScope=Root</code>&nbsp;registers the routes with the&nbsp;<code>forRoot(routes)</code></p>\n\n\n\n<h4>Adding Components, Pipes, Directives to module</h4>\n\n\n\n<p>You can add component, directive, pipe &amp; services to module by using the flag <code>--module=[ModuleName]</code> and naming the component as <code>[ModuleName]/[ComponentnNme]</code>.</p>\n\n\n\n<p>For Example, The following commands creates the account module and adds the HelloComponent, SomeDirective, DataSerivce &amp; DatePipe to the module</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng g module account\r\nng g component --module=account account/hello\r\nng g directive --module=account --flat=false account/Some\r\nng g service --module=account --flat=false account/Data\r\nng g pipe --module=account --flat=false account/Date\r\n </code></pre>\n\n\n\n<p>The following is the list of all the available options</p>\n\n\n\n<figure id=\"tablepress-62\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--flat= true|false</code></td><td></td><td>false</td><td>Flag to indicate if a directory is created.</td></tr><tr><td><code>--module=module</code></td><td>-m</td><td></td><td>Allows specification of the declaring module.</td></tr><tr><td><code>--project= project</code></td><td></td><td></td><td>The name of the project.</td></tr><tr><td><code>--routing=true|false</code></td><td></td><td>false</td><td>Generates a routing module.</td></tr><tr><td><code>--routingScope=Child|Root</code></td><td></td><td>child</td><td>The scope for the generated routing.</td></tr></tbody></table></figure>\n\n\n\n<h2>ng update</h2>\n\n\n\n<p>The <code>ng update</code> command updates or upgrades the angular application and its dependencies to the latest version. Click on how to upgrade Angular to latest version for more information</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Why Angular CLI Angular is easy to learn Front End Framework. But setting development environment is pretty complicated.&nbsp;There are many decisions, you have when you choose Angular as your JavaScript Framework. You have an option of choosing Javascript, Typescript or dart. You have to choose a module loader among SystemJs &amp; Webpack etc. You need to pickup your testing Framework. We discussed all [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [142],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3908" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3908"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3908/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3909,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3908/revisions/3909"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3908"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3908"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3908"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3914,
    "date": "2020-12-11T06:30:32",
    "date_gmt": "2020-12-11T06:30:32",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3914" },
    "modified": "2020-12-11T06:30:32",
    "modified_gmt": "2020-12-11T06:30:32",
    "slug": "how-to-update-angular-to-latest-version",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/how-to-update-angular-to-latest-version/",
    "title": { "rendered": "How to update Angular to latest version" },
    "content": {
      "rendered": "\n<h2>ng update</h2>\n\n\n\n<p>The Angular CLI Command <code>ng update</code>. makes it easier to update the application and its dependencies</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ng update &#91;options] </code></pre>\n\n\n\n<figure id=\"tablepress-63\" class=\"wp-block-table\"><table><thead><tr><th>OPTION</th><th>Alias</th><th>Default</th><th>DESCRIPTION</th></tr></thead><tbody><tr><td><code>--all=true|false</code></td><td></td><td>false</td><td>selecting true will update all packages in package.json.</td></tr><tr><td><code>--force=true|false</code></td><td></td><td>false</td><td>If true, forces the update even if the installed packages are incompatible with the update. if false, packages are not updated and the error message is shown</td></tr><tr><td><code>--from=from</code></td><td></td><td></td><td>Version from which to migrate from. Only available with a single package being updated, and only on migration only.</td></tr><tr><td><code>--help=true|false| json| JSON</code></td><td></td><td>false</td><td>Shows a help message for this command in the console.</td></tr><tr><td><code>--migrateOnly=true|false</code></td><td></td><td>false</td><td>Only perform a migration, does not update the installed version.</td></tr><tr><td><code>--next=true|false</code></td><td></td><td>false</td><td>Use the largest version, including beta and RCs.</td></tr><tr><td><code>--packageManager=npm|yarn</code></td><td></td><td>npm</td><td>The preferred package manager configuration files to use for registry settings</td></tr><tr><td><code>--packages</code></td><td></td><td></td><td>The names of package(s) to update</td></tr><tr><td><code>--registry=registry</code></td><td></td><td></td><td>The NPM registry to use.</td></tr><tr><td><code>--to=to</code></td><td></td><td></td><td>Version up to which to apply migrations. Only available with a single package being updated, and only on migrations only. Requires from to be specified. Default to the installed version detected.</td></tr></tbody></table></figure>\n\n\n\n<h2>Find out what changed</h2>\n\n\n\n<p>Before upgrading, you need to know the features that are changed, new features that are added and more importantly the breaking changes that were introduced and  API’s deprecated and or planned to be deprecated</p>\n\n\n\n<h3>Find out what’s new in Angular latest version</h3>\n\n\n\n<p>To find out the list of changes/bug fixes in the new version of Angular, you can read it from the changelog. </p>\n\n\n\n<h3>Find out what needs to be changed</h3>\n\n\n\n<p>Once you know the list of changes, the next step is to find out what needs to be changed in your app so that you can safely upgrade to the next version. This you can find out from the Angular Update Guide. </p>\n\n\n\n<p>Once you open the above site, you need to follow these steps and the guide will list you the changes required</p>\n\n\n\n<ul><li>Choose the Current version Angular and the version you wish to upgrade</li><li>Select the&nbsp;App Complexity as&nbsp;<code>Advanced</code></li><li>Choose other dependencies&nbsp;</li><li>Choose your package manager</li><li>Click on&nbsp;<code>Show me how to update</code></li></ul>\n\n\n\n<p>The Application tells you the steps needed to upgrade.&nbsp;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/11/How-to-update-or-upgrade-angular-app.gif\" alt=\"\" class=\"wp-image-10035\"/></figure>\n\n\n\n<p>The above gives the detailed steps needed to update the Angular to the latest version.&nbsp;The list contains three sections.&nbsp;<strong>Before Update</strong>,&nbsp;<strong>During the update</strong>,&nbsp;<strong>After update</strong>.&nbsp;All you needed to is to follow those steps.&nbsp;</p>\n\n\n\n<h2>Upgrading using ng update&nbsp;</h2>\n\n\n\n<p>The steps mentioned in the previous section should be sufficient to upgrade the application. The above section contains the&nbsp;<code>ng update</code>&nbsp;commands needed to upgrade the app.</p>\n\n\n\n<p>This section explains the steps involved in upgrading the Angular app using&nbsp;<code>ng update</code>&nbsp;</p>\n\n\n\n<ol><li>Update Node.js to the latest version.</li><li>Install Angular CLI Globally &amp; Locally</li><li>Run&nbsp;<code>ng update&nbsp;@angular/cli</code>&nbsp;to update configuration files</li><li>Update the Core Packages &amp; Dependencies</li></ol>\n\n\n\n<h3>Update Node.js to the latest version</h3>\n\n\n\n<p>You can run the following command to update the <code>Node.js</code> or visit the Node.js website and download the latest version and install it</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm update -g    //Updates Node </code></pre>\n\n\n\n<h3>Install Angular CLI Globally &amp; Locally</h3>\n\n\n\n<p>The following command installs the latest version of Angular CLI. The current version as of today is 7.1.0.  Click to find out the Angular CLI Versions  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nnpm install -g @angular/cli@latest   //Global installation\r\nnpm install @angular/cli@latest --save-dev   //local installation</code></pre>\n\n\n\n<p>Verify that Angular CLI Installed correctly by inspecting the<code>package.json</code>&nbsp;file. The&nbsp;<code>\"@angular/cli\": \"^7.1.0\"</code>&nbsp;must be listed under the&nbsp;<code>\"devDependencies\"</code>node. If it appears under the&nbsp;<code>\"dependencies\"</code>, or&nbsp;<strong>older version</strong>&nbsp;still exists then remove it. If the version is not the latest version, then you can change it and then run<code>npm install</code>to update it.</p>\n\n\n\n<p>You can also install the older version of Angular CLI by appending the version no as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nnpm install -g @angular/cli@6.2\r\nnpm install @angular/cli@6.2 --save-dev</code></pre>\n\n\n\n<p>If you are upgrading to an older version of Angular, for example, version 6, then it is better to install the corresponding Angular CLI Version<br><br>Since, the Angular Version 6, the Angular CLI follows the same Version No as the Angular. Hence for Angular 7, the corresponding version of the Angular CLI is 7.&nbsp;<br><br>The Angular CLI version 1.7 was for Angular 5 and&nbsp;Angular CLI 1.4 was for Angular 4&nbsp;&nbsp;</p>\n\n\n\n<h3>Run ng update to update configuration files</h3>\n\n\n\n<p>The next step is to update the various configuration files like <code>angular.json</code>, <code>karma.conf.js</code> etc. This is done by running the following command </p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng update @angular/cli</code></pre>\n\n\n\n<h3>Update core packages &amp; dependencies</h3>\n\n\n\n<p>The next step is to update the Angular Core packages &amp; Dependencies. The following command updates the Angular core packages &amp; <code>rxjs</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nng update @angular/core\r\nng update rxjs</code></pre>\n\n\n\n<p>The Following gives you the list of packages (not all) that needs to be updated along with the command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng update </code></pre>\n\n\n\n<p><strong>You can force Angular to update all the dependencies by using </strong><code><strong>--all</strong></code><strong> &amp; </strong><code><strong>--force</strong></code><strong> flag</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nng update --all --force</code></pre>\n\n\n\n<p>And if you encounter an error after running the above steps, then you can remove the&nbsp;&nbsp;<code>node_modules</code>&nbsp;folder &amp;&nbsp;<code>package-lock.json</code>&nbsp;file and run&nbsp;<code>npm install</code></p>\n\n\n\n<h2>Tips to upgrade</h2>\n\n\n\n<h3>Update to the latest version as and when available</h3>\n\n\n\n<p>The Angular releases a Major version every six months. The minor updates &amp; bug fixes are released much more frequently.&nbsp;Updating to the latest version once in a month or two makes it easier to upgrade. This keeps the changes to minimum &amp; manageable.</p>\n\n\n\n<h3>Keep a watch on Deprecated features</h3>\n\n\n\n<p>The Major version of Angular may introduce a breaking change. It also may deprecate some of the API. All of these are available at Changelog. The deprecated changes are usually supported at least for two major versions as per the policy. This gives you at least one year to make the necessary changes. Plan and work on those changes</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ng update The Angular CLI Command ng update. makes it easier to update the application and its dependencies OPTION Alias Default DESCRIPTION &#8211;all=true|false false selecting true will update all packages in package.json. &#8211;force=true|false false If true, forces the update even if the installed packages are incompatible with the update. if false, packages are not updated and the error message [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [142],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3914" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3914"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3914/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3915,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3914/revisions/3915"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3914"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3914"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3914"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3916,
    "date": "2020-12-11T06:33:13",
    "date_gmt": "2020-12-11T06:33:13",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3916" },
    "modified": "2020-12-11T06:33:13",
    "modified_gmt": "2020-12-11T06:33:13",
    "slug": "create-multiple-angular-apps-in-one-project",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/create-multiple-angular-apps-in-one-project/",
    "title": { "rendered": "Create Multiple Angular Apps in One Project" },
    "content": {
      "rendered": "\n<h2>Advantages</h2>\n\n\n\n<p>There are several advantages of having Multiple Angular Apps in One Project.</p>\n\n\n\n<ol><li>One is you do not have to run the time consuming&nbsp;<code>npm install</code>&nbsp;for every app.</li><li>The&nbsp;<code>node_modules</code>&nbsp;folder is shared with all the other apps saving disk space.</li><li>All the apps can be updated to the next version easily.</li><li>A single source-control repository (such as&nbsp;<a href=\"https://git-scm.com/\">git</a>).</li></ol>\n\n\n\n<h2>Create the Empty Workspace</h2>\n\n\n\n<p>We create a new app using the <code>ng new &lt;new></code> <a href=\"https://www.tektutorialshub.com/angular/angular-cli-tutorial/\">Angular CLI</a> command. It creates and workspace with an initial Angular app with the name <code>&lt;new></code> in the src folder. The <code>createApplication=\"false\"</code> option introduced in <a href=\"https://www.tektutorialshub.com/angular-tutorial/\">Angular 7</a> now stops the creation of the initial app. It only creates the workspace</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nng new MultipleApps --createApplication=\"false\"\r\ncd MultipleApps  </code></pre>\n\n\n\n<p>The above command creates folder with the name&nbsp;<code>MultipleApps</code>&nbsp;and configures the workspace. It does not create any&nbsp;<code>apps</code>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/11/Multiple-Apps-in-a-Single-Project-1024x511.png\" alt=\"Creating Multiple App under a Single Project Workspace\" class=\"wp-image-15105\"/><figcaption>Creating Multiple App under a Single Project Workspace</figcaption></figure>\n\n\n\n<h2>Add a new Project to Workspace</h2>\n\n\n\n<p>Now, to create a new app under the workspace, we need to use the <code>ng generate application</code> command The first app created is marked as the default app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \rng generate application gettingStarted</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/11/Multiple-Apps-in-a-Single-Project-1-1024x511.png\" alt=\"Creating the App under a workspace\" class=\"wp-image-15106\"/><figcaption>Creating the App under a workspace</figcaption></figure>\n\n\n\n<p>If you use the&nbsp;<code>ng new</code>&nbsp;inside the workspace, it will throw the following error.</p>\n\n\n\n<p>The new command requires to be run outside of a project, but a project definition was found at “D:\\MultipleApps\\angular.json”</p>\n\n\n\n<h2>Run the App</h2>\n\n\n\n<p>There are three ways in which you can run the app.</p>\n\n\n\n<ul><li>Use the&nbsp;<code>ng serve gettingStarted</code></li><li>Use the&nbsp;<code>--project</code>&nbsp;flag&nbsp;<code>ng serve --project=\"gettingStarted\"</code></li><li>Open the&nbsp;<code>angular.json</code>&nbsp;and locate the&nbsp;<code>defaultProject</code>&nbsp;and change the name of the project to&nbsp;<code>gettingStarted</code>&nbsp;and run&nbsp;<code>ng serve</code></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/11/ng-Serve-1024x300.png\" alt=\"ng serve\" class=\"wp-image-15107\"/><figcaption>ng serve</figcaption></figure>\n\n\n\n<h2>Add Another Project to the workspace</h2>\n\n\n\n<p>To create another app, run the <code>ng generate application</code> again.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng generate application exampleApp</code></pre>\n\n\n\n<h2>Run the App</h2>\n\n\n\n<p>And use the <code>ng serve</code> to run it</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng serve exampleApp\r\nOR\r\nng serve --project=\"exampleApp\"</code></pre>\n\n\n\n<h2>Building the App for Production</h2>\n\n\n\n<p>Use <code>ng build</code> to build the app with <code>--project</code> option.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\rng build --prod --project=\"gettingStarted\"\r\nng build --prod --project=\"exampleApp\"</code></pre>\n\n\n\n<h2>Folder Structure</h2>\n\n\n\n<p>The folder structure is similar to the Single App workspace, except for the following</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/11/Folder-structure-of-a-muliple-App-under-a-Workspace.png\" alt=\"The folder structure of Multiple Apps under a Single workspace\" class=\"wp-image-15108\"/><figcaption>The folder structure of Multiple Apps under a Single workspace</figcaption></figure>\n\n\n\n<h3>projects folder</h3>\n\n\n\n<p>The&nbsp;<code>src</code>&nbsp;folder is gone. Instead, we have a&nbsp;<code>projects</code>&nbsp;folder. Each app we create gets its own folder under the&nbsp;<code>projects</code>&nbsp;folder.</p>\n\n\n\n<h3>dist folder</h3>\n\n\n\n<p>The&nbsp;<code>dist</code>&nbsp;folder now has a folder for each of the new app.</p>\n\n\n\n<h3>Angular.json</h3>\n\n\n\n<p>The <code>angular.json</code>, contains the configuration settings for the workspace. Here is the shortened version of <code>Angular.json</code> for the above code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\n{\r\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\r\n  \"version\": 1,\r\n  \"newProjectRoot\": \"projects\",     &lt;== location of the apps\r\n  \"projects\": {\r\n    \"gettingStarted\": {\r\n         //This section contains the setting for the gettingStarted project      \r\n    },\r\n    \"exampleApp\": {\r\n        //This section contains the setting for the exampleApp project\r\n    }},\r\n  \"defaultProject\": \"gettingStarted\"    &lt;== name of the default project\r\n}\r\n </code></pre>\n\n\n\n<p><code>newProjectRoot:</code>&nbsp;node points to the location of the&nbsp;<code>projects</code>&nbsp;folder.</p>\n\n\n\n<p><code>projects:</code>&nbsp;contain a section for each app in the workspace. Each section contains configuration for the compiler.</p>\n\n\n\n<p><code>defaultProject:</code>&nbsp;The default project use, when you run the&nbsp;<code>ng serve</code>,&nbsp;<code>ng build</code>&nbsp;etc.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Advantages There are several advantages of having Multiple Angular Apps in One Project. One is you do not have to run the time consuming&nbsp;npm install&nbsp;for every app. The&nbsp;node_modules&nbsp;folder is shared with all the other apps saving disk space. All the apps can be updated to the next version easily. A single source-control repository (such as&nbsp;git). [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [142],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3916" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3916"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3916/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3917,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3916/revisions/3917"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3916"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3916"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3916"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
