[
  {
    "id": 3646,
    "date": "2020-12-07T06:34:57",
    "date_gmt": "2020-12-07T06:34:57",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3646" },
    "modified": "2020-12-09T06:26:23",
    "modified_gmt": "2020-12-09T06:26:23",
    "slug": "angular-httpclient-tutorial-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-httpclient-tutorial-example/",
    "title": { "rendered": "Angular HttpClient Tutorial &#038; Example" },
    "content": {
      "rendered": "\n<h2>Using Angular HttpClient</h2>\n\n\n\n<p>The&nbsp;<code>HttpClient</code>&nbsp;is a separate model in Angular and is available under the&nbsp;<code>@angular/common/http</code>&nbsp;package. The following steps show you how to use the&nbsp;<code>HttpClient</code>&nbsp;in an Angular app.</p>\n\n\n\n<h3>Import HttpClient Module in Root Module</h3>\n\n\n\n<p>We need to import it into our root module&nbsp;<code>app.module</code>. Also, we need to add it to the&nbsp;<code>imports</code>&nbsp;metadata array..</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n \r\n@NgModule({\r\n    declarations: &#91;\r\n        AppComponent\r\n    ],\r\n    imports: &#91;\r\n        HttpClientModule\r\n    ],\r\n    providers: &#91;],\r\n    bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }\r\n </code></pre>\n\n\n\n<h3>Import Required Module in Component/Service</h3>\n\n\n\n<p>Then you should import&nbsp;<code>HttpClient</code>&nbsp;the&nbsp;<code>@angular/common/http</code>&nbsp;in the component or service.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { HttpClient } from '@angular/common/http'; </code></pre>\n\n\n\n<h3>Inject HttpClient service</h3>\n\n\n\n<p>Inject the HttpClient service in the constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>constructor(public http: HttpClient) {} </code></pre>\n\n\n\n<h3>Call the HttpClient.Get method</h3>\n\n\n\n<p>Use&nbsp;<code>HttpClient.Get</code>&nbsp;method to send an&nbsp;HTTP Request. The request is sent when we&nbsp;<code>Subscribe</code>&nbsp;to the&nbsp;<code>get()</code>&nbsp;method. When the response arrives map it the desired object and display the result.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public getData() {\r\n  this.HttpClient.get&lt;any&#91;]>(this.baseUrl+'users/'+this.userName+'/repos')\r\n           .subscribe(data => {\r\n               this.repos= data;\r\n           },\r\n           error => {\r\n           }\r\n  );\r\n}</code></pre>\n\n\n\n<h2>What is Observable?</h2>\n\n\n\n<p>The Angular&nbsp;<code>HTTPClient</code>&nbsp;makes use of&nbsp;observable. Hence it is important to understand the basics of it</p>\n\n\n\n<p>Observable help us to manage async data. You can think of Observables as an array of items, which arrive asynchronously over time.</p>\n\n\n\n<p>The&nbsp;<code>observables</code>&nbsp;implement the&nbsp;observer design pattern, where&nbsp;<code>observables</code>&nbsp;maintain a list of&nbsp;dependents. We call these dependents as&nbsp;<code>observers</code>. The&nbsp;<code>observable</code>&nbsp;notifies them automatically of any state changes, usually by calling one of their methods.</p>\n\n\n\n<p><code>Observer</code>&nbsp;subscribes to an&nbsp;<code>Observable</code>. The&nbsp;<code>observer</code>&nbsp;reacts when the value of the&nbsp;<code>Observable</code>&nbsp;changes. An&nbsp;<code>Observable</code>&nbsp;can have multiple subscribers and all the subscribers are notified when the state of the&nbsp;<code>Observable</code>&nbsp;changes.</p>\n\n\n\n<p>When an Observer subscribes to an observable, it needs to pass (optional) the three callbacks.&nbsp;<code>next()</code>, &nbsp;<code>error()</code>&nbsp;&nbsp;&amp; &nbsp;<code>complete()</code>. The observable invokes the&nbsp;<code>next()</code>&nbsp;callback, when it receives an value. When the observable completes it invokes the&nbsp;<code>complete()</code>&nbsp;callback. And when the error occurs it invokes the&nbsp;<code>error()</code>&nbsp;callback with details of error and subscriber finishes.</p>\n\n\n\n<p>The&nbsp;<code>Observables</code>&nbsp;are used extensively in Angular. The new&nbsp;<code>HTTPClient Module</code>&nbsp;and Event system are all Observable based.</p>\n\n\n\n<p>The Observables are proposed feature for the next version of Javascript. The Angular uses a Third-party library called&nbsp;Reactive Extensions&nbsp;or RxJs to implement the Observables. You can learn about RxJs from these&nbsp;RxJx tutorials</p>\n\n\n\n<h3>Observables Operators</h3>\n\n\n\n<p>Operators are methods that operate on an Observable and return a new observable. Each Operator modifies the value it receives. These operators are applied one after the other in a chain.</p>\n\n\n\n<p>The&nbsp;<code>RxJs</code>&nbsp;provides several Operators, which allows you to filter, select, transform, combine and compose Observables. Examples of Operators are&nbsp;<code>map</code>,&nbsp;<code>filter</code>,&nbsp;<code>take</code>,&nbsp;<code>merge,</code>&nbsp;etc</p>\n\n\n\n<h3>How to use RxJs</h3>\n\n\n\n<p>The&nbsp;<code>RxJs</code>&nbsp;is a very large library. Hence Angular exposes a stripped-down version of Observables. You can import it using the following import statement</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Observable } from 'rxjs'; </code></pre>\n\n\n\n<p>The above import imports only the necessary features. It does not include any of the Operators.</p>\n\n\n\n<p>To use observables operators, you need to import them. The following code imports the&nbsp;<code>map</code>&nbsp;&amp;&nbsp;<code>catchError</code>&nbsp;operators.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { map, catchError } from 'rxjs/operators'; </code></pre>\n\n\n\n<h2>HTTP GET</h2>\n\n\n\n<p>The&nbsp;<code>HttpClient.get</code>&nbsp;sends the HTTP Get Request to the API endpoint and parses the returned result to the desired type. By default, the body of the response is parsed as JSON. If you want any other type, then you need to specify explicitly using the&nbsp;<code>observe</code>&nbsp;&amp;&nbsp;<code>responseType</code>&nbsp;options.</p>\n\n\n\n<p>You can read more about&nbsp;Angular HTTP Get</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>get(url: string, \r\n      options: {\r\n          headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; };\r\n          params?: HttpParams | { &#91;param: string]: string | string&#91;]; };\r\n          observe?: \"body|events|response|\";\r\n          responseType: \"arraybuffer|json|blob|text\";\r\n          reportProgress?: boolean; \r\n          withCredentials?: boolean;}\r\n     ): Observable&lt;></code></pre>\n\n\n\n<h4>Options</h4>\n\n\n\n<p>under the options, we have several configuration options, which we can use to configure the request.</p>\n\n\n\n<p><code>headers</code>&nbsp;It allows you to add HTTP headers to the outgoing requests.&nbsp;</p>\n\n\n\n<p><code>observe</code>&nbsp;The&nbsp;HttpClient.get&nbsp;method returns the body of the response parsed as JSON (or type specified by the&nbsp;responseType). Sometimes you may need to read the entire response along with the headers and status codes. To do this you can set the&nbsp;<code>observe</code>&nbsp;property to the&nbsp;<strong>response</strong>.</p>\n\n\n\n<p>The allowed options are</p>\n\n\n\n<ul><li>a&nbsp;response&nbsp;which returns the entire response</li><li>body&nbsp;which returns only the body</li><li>events&nbsp;which return the response with events.</li></ul>\n\n\n\n<p><code>params</code>&nbsp;Allows us to Add the&nbsp;URL parameters or Get Parameters&nbsp;to the Get Request</p>\n\n\n\n<p><code>reportProgress</code>&nbsp;This is a boolean property. Set this to&nbsp;true, if you want to get notified of the progress of the Get Request. This is a pretty useful feature when you have a large amount of data to download (or upload) and you want the user to notify of the progress.</p>\n\n\n\n<p><code>responseType</code>&nbsp;<code>Json</code>&nbsp;is the default response type. In case you want a different type of response, then you need to use this parameter. The Allowed Options are&nbsp;<code>arraybuffer</code>,&nbsp;<code>blob</code>,&nbsp;<code>JSON</code>, and&nbsp;<code>text</code>.&nbsp;</p>\n\n\n\n<p><code>withCredentials</code>&nbsp;It is of boolean type. If the value is true then&nbsp;HttpClient.get&nbsp;will request data with credentials (cookies)</p>\n\n\n\n<h2>HTTP Post</h2>\n\n\n\n<p>The&nbsp;<code>HttpClient.post()</code>&nbsp;sends the HTTP POST request to the endpoint. Similar to the get(), we need to subscribe to the post() method to send the request. The post method parsed the&nbsp;<code>body of the response</code>&nbsp;as&nbsp;<code>JSON</code>&nbsp;and returns it. This is the default behavior. If you want any other type, then you need to specify explicitly using the&nbsp;<code>observe</code>&nbsp;&amp;&nbsp;<code>responseType</code>&nbsp;options.</p>\n\n\n\n<p>You can read&nbsp;Angular HTTP Post</p>\n\n\n\n<p>The syntax of the HTTP Post is similar to the HTTP Get.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> post(url: string, \r\n     body: any, \r\n     options: { \r\n        headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; }; \r\n        observe?: \"body|events|response|\"; \r\n        params?: HttpParams | { &#91;param: string]: string | string&#91;]; }; \r\n        reportProgress?: boolean; \r\n        responseType: \"arraybuffer|json|blob|text\"; \r\n        withCredentials?: boolean; \r\n     }\r\n): Observable</code></pre>\n\n\n\n<p>The following is an example of HTTP Post</p>\n\n\n\n<pre class=\"wp-block-code\"><code> addPerson(person:Person): Observable&lt;any> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n    this.http.post(this.baseURL + 'people', body,{'headers':headers , observe: 'response'})\r\n      .subscribe(\r\n       response=> {\r\n            console.log(\"POST completed sucessfully. The response received \"+response);\r\n        },\r\n        error => {\r\n            console.log(\"Post failed with the errors\");\r\n        },\r\n        () => {\r\n            console.log(\"Post Completed\");\r\n        }\r\n}</code></pre>\n\n\n\n<h2>HTTP PUT</h2>\n\n\n\n<p>The&nbsp;<code>HttpClient.put()</code>&nbsp;sends the&nbsp;<code>HTTP PUT</code>&nbsp;request to the endpoint. The syntax and usage are very similar to the&nbsp;<code>HTTP POST</code>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> put(url: string, \r\n     body: any, \r\n     options: { \r\n        headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; }; \r\n        observe?: \"body|events|response|\"; \r\n        params?: HttpParams | { &#91;param: string]: string | string&#91;]; }; \r\n        reportProgress?: boolean; \r\n        responseType: \"arraybuffer|json|blob|text\"; \r\n        withCredentials?: boolean; \r\n     }\r\n): Observable</code></pre>\n\n\n\n<h2>HTTP PATCH</h2>\n\n\n\n<p>The&nbsp;<code>HttpClient.patch()</code>&nbsp;sends the&nbsp;<code>HTTP PATCH</code>&nbsp;request to the endpoint. The syntax and usage are very similar to the&nbsp;<code>HTTP POST</code>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> patch(url: string, \r\n     body: any, \r\n     options: { \r\n        headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; }; \r\n        observe?: \"body|events|response|\"; \r\n        params?: HttpParams | { &#91;param: string]: string | string&#91;]; }; \r\n        reportProgress?: boolean; \r\n        responseType: \"arraybuffer|json|blob|text\"; \r\n        withCredentials?: boolean; \r\n     }\r\n): Observable</code></pre>\n\n\n\n<h2>HTTP DELETE</h2>\n\n\n\n<p>The&nbsp;<code>HttpClient.delete()</code>&nbsp;sends the&nbsp;<code>HTTP DELETE</code>&nbsp;request to the endpoint. The syntax and usage are very similar to the&nbsp;<code>HTTP GET</code>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>delete(url: string, \r\n      options: {\r\n          headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; };\r\n          params?: HttpParams | { &#91;param: string]: string | string&#91;]; };\r\n          observe?: \"body|events|response|\";\r\n          responseType: \"arraybuffer|json|blob|text\";\r\n          reportProgress?: boolean; \r\n          withCredentials?: boolean;}\r\n     ): Observable&lt;></code></pre>\n\n\n\n<h2>HttpClient Example</h2>\n\n\n\n<p>Now, We have a basic understanding of&nbsp;<code>HttpClient</code>&nbsp;model &amp; observables, let us build an&nbsp;<code>HttpClient</code>&nbsp;example app.</p>\n\n\n\n<h3>Create a new Angular app</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>ng new httpClient </code></pre>\n\n\n\n<h3>import&nbsp;<code>HttpClientModule</code></h3>\n\n\n\n<p>In the&nbsp;<code>app,module.ts</code>&nbsp;import the&nbsp;<code>HttpClientModule</code>&nbsp;module as shown below. We also add it to the&nbsp;<code>imports</code>&nbsp;array</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }\r\n </code></pre>\n\n\n\n<h3>Component</h3>\n\n\n\n<p>Now, open the&nbsp;<code>app.component.ts</code>&nbsp;and copy the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n \r\nexport class Repos {\r\n  id: string;\r\n  name: string;\r\n  html_url: string;\r\n  description: string;\r\n}\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent implements OnInit {\r\n \r\n  userName: string = \"tektutorialshub\"\r\n  baseURL: string = \"https://api.github.com/\";\r\n  repos: Repos&#91;];\r\n \r\n  \r\n  constructor(private http: HttpClient) {\r\n  }\r\n \r\n  ngOnInit() {\r\n    this.getRepos()\r\n  }\r\n \r\n \r\n  public getRepos() {\r\n \r\n    return this.http.get&lt;Repos&#91;]>(this.baseURL + 'users/' + this.userName + '/repos')\r\n      .subscribe(\r\n        (response) => {                           //Next callback\r\n          console.log('response received')\r\n          console.log(response);\r\n          this.repos = response; \r\n        },\r\n        (error) => {                              //Error callback\r\n          console.error('Request failed with error')\r\n          alert(error);\r\n        },\r\n        () => {                                   //Complete callback\r\n          console.log('Request completed')\r\n        })\r\n  }\r\n}</code></pre>\n\n\n\n<h4>Import HTTPClient</h4>\n\n\n\n<p>HTTPClient is a service, which is a major component of the HTTP Module. It contains methods like&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>PUT</code>&nbsp;etc. We need to import it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { HttpClient } from '@angular/common/http'; </code></pre>\n\n\n\n<h4>Repository Model</h4>\n\n\n\n<p>The model to handle our data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> export class Repos {\r\n  id: string;\r\n  name: string;\r\n  html_url: string;\r\n  description: string;\r\n}</code></pre>\n\n\n\n<h4>Inject HttpClient</h4>\n\n\n\n<p>Inject the&nbsp;<code>HttpClient</code>&nbsp;service into the component. You can learn more about&nbsp;Dependency injection in Angular</p>\n\n\n\n<pre class=\"wp-block-code\"><code> constructor(private http: HttpClient) {  } </code></pre>\n\n\n\n<h4>Subscribe to HTTP Get</h4>\n\n\n\n<p>The&nbsp;<code>GetRepos</code>&nbsp;method, we invoke the&nbsp;<code>get()</code>&nbsp;method of the&nbsp;<code>HttpClient</code>&nbsp;Service.</p>\n\n\n\n<p>The&nbsp;<code>HttpClient.get</code>&nbsp;method allows us to cast the returned response object to a type we require. We make use of that feature and supply the type for the returned value&nbsp;<code>http.get&lt;repos[]&gt;</code></p>\n\n\n\n<p>The&nbsp;<code>get()</code>&nbsp;method returns an observable. Hence we&nbsp;<code>subscribe</code>&nbsp;to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public getRepos() {\r\n   return this.http.get&lt;Repos&#91;]>(this.baseURL + 'users/' + this.userName + '/repos')\r\n      .subscribe(\r\n </code></pre>\n\n\n\n<p>When we subscribe to any observable, we optionally pass the three callbacks.&nbsp;<code>next()</code>, &nbsp;<code>error()</code>&nbsp;&nbsp;&amp; &nbsp;<code>complete()</code>. In this example we pass only two callbacks&nbsp;<code>next()</code>&nbsp;&amp;&nbsp;<code>error()</code>.</p>\n\n\n\n<h4>Receive the Response</h4>\n\n\n\n<p>We receive the data in the&nbsp;<code>next()</code>&nbsp;callback. By default, the Angular reads the&nbsp;<code>body of the response</code>&nbsp;as JSON and casts it to an object and returns it back. Hence we can use directly in our app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    (response) => {                           //Next callback\r\n          console.log('response received')\r\n          console.log(response);\r\n          this.repos = response; \r\n        },</code></pre>\n\n\n\n<h4>Handle the errors</h4>\n\n\n\n<p>We handle the errors in&nbsp;<code>error</code>&nbsp;callback.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>        \r\n       (error) => {                              //Error callback\r\n          console.error('Request failed with error')\r\n          alert(error);\r\n        },\r\n </code></pre>\n\n\n\n<h3>Template</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h1 class=\"heading\">&lt;strong>HTTPClient &lt;/strong> Example&lt;/h1>  &lt;table class='table'>  &lt;thead>    &lt;tr>      &lt;th>ID&lt;/th>      &lt;th>Name&lt;/th>      &lt;th>HTML Url&lt;/th>      &lt;th>description&lt;/th>    &lt;/tr>  &lt;/thead>  &lt;tbody>    &lt;tr *ngFor=\"let repo of repos;\">      &lt;td>{{repo.id}}&lt;/td>      &lt;td>{{repo.name}}&lt;/td>      &lt;td>{{repo.html_url}}&lt;/td>      &lt;td>{{repo.description}}&lt;/td>    &lt;/tr>  &lt;/tbody>&lt;/table>  &lt;pre>{{repos | json}}&lt;/pre> &lt;h1 class=\"heading\">&lt;strong>HTTPClient &lt;/strong> Example&lt;/h1>\r\n \r\n \r\n&lt;table class='table'>\r\n  &lt;thead>\r\n    &lt;tr>\r\n      &lt;th>ID&lt;/th>\r\n      &lt;th>Name&lt;/th>\r\n      &lt;th>HTML Url&lt;/th>\r\n      &lt;th>description&lt;/th>\r\n    &lt;/tr>\r\n  &lt;/thead>\r\n  &lt;tbody>\r\n    &lt;tr *ngFor=\"let repo of repos;\">\r\n      &lt;td>{{repo.id}}&lt;/td>\r\n      &lt;td>{{repo.name}}&lt;/td>\r\n      &lt;td>{{repo.html_url}}&lt;/td>\r\n      &lt;td>{{repo.description}}&lt;/td>\r\n    &lt;/tr>\r\n  &lt;/tbody>\r\n&lt;/table> \r\n \r\n&lt;pre>{{repos | json}}&lt;/pre> &lt;h1 class=\"heading\">&lt;strong>HTTPClient &lt;/strong> Example&lt;/h1>  &lt;table class='table'>  &lt;thead>    &lt;tr>      &lt;th>ID&lt;/th>      &lt;th>Name&lt;/th>      &lt;th>HTML Url&lt;/th>      &lt;th>description&lt;/th>    &lt;/tr>  &lt;/thead>  &lt;tbody>    &lt;tr *ngFor=\"let repo of repos;\">      &lt;td>{{repo.id}}&lt;/td>      &lt;td>{{repo.name}}&lt;/td>      &lt;td>{{repo.html_url}}&lt;/td>      &lt;td>{{repo.description}}&lt;/td>    &lt;/tr>  &lt;/tbody>&lt;/table>  &lt;pre>{{repos | json}}&lt;/pre> </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Using Angular HttpClient The&nbsp;HttpClient&nbsp;is a separate model in Angular and is available under the&nbsp;@angular/common/http&nbsp;package. The following steps show you how to use the&nbsp;HttpClient&nbsp;in an Angular app. Import HttpClient Module in Root Module We need to import it into our root module&nbsp;app.module. Also, we need to add it to the&nbsp;imports&nbsp;metadata array.. Import Required Module in Component/Service [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3646" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3646"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3646/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3843,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3646/revisions/3843"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3646"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3646"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3646"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3648,
    "date": "2020-12-07T06:42:25",
    "date_gmt": "2020-12-07T06:42:25",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3648" },
    "modified": "2020-12-09T06:33:00",
    "modified_gmt": "2020-12-09T06:33:00",
    "slug": "angular-http-get-example-using-httpclient",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-http-get-example-using-httpclient/",
    "title": { "rendered": "Angular HTTP GET Example using httpclient" },
    "content": {
      "rendered": "\n<h2>HTTP Get Example</h2>\n\n\n\n<p>Create a new Angular App.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng new httpGet </code></pre>\n\n\n\n<h3>Import HttpClientModule</h3>\n\n\n\n<p>To make HTTP Get request, we need to make use of the&nbsp;HttpClientModule, which is part of the package&nbsp;<code>@angular/common/http</code>. Open the&nbsp;<code>app.module.ts</code>&nbsp;and import it. Also, import the&nbsp;<code>FormsModule</code></p>\n\n\n\n<p>You must also include it in the the&nbsp;<code>imports</code>&nbsp;array as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms'\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { GitHubService } from './github.service';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: &#91;GitHubService],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<h3>Model</h3>\n\n\n\n<p>Create&nbsp;<code>repos.ts</code>&nbsp;file and add the following code. This is a simplified model for the GitHub repository.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> export class repos {    id: string;    \nname: string;    html_url: string;    description: string;} </code></pre>\n\n\n\n<h3>HTTP GET Service</h3>\n\n\n\n<p>Let us create a service to handle the HTTP Request. Create a new file&nbsp;<code>github.service.ts</code>&nbsp;and copy the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Injectable } from '@angular/core';\r\n \r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { map, catchError} from 'rxjs/operators';\r\n \r\nimport { repos } from './repos';\r\n \r\n@Injectable()\r\nexport class GitHubService {\r\n \r\n  baseURL: string = \"https://api.github.com/\";\r\n \r\n  constructor(private http: HttpClient) {\r\n  }\r\n \r\n  getRepos(userName: string): Observable&lt;any> {\r\n    return this.http.get(this.baseURL + 'users/' + userName + '/repos')\r\n  }\r\n \r\n}</code></pre>\n\n\n\n<p>First, we import the required libraries. The&nbsp;<code>HttpClient</code>&nbsp;is the main service, which Performs the HTTP requests like&nbsp;<code>GET</code>,&nbsp;<code>PUT</code>,&nbsp;<code>POST</code>, etc. We need to inject this into our&nbsp;<code>GitHubService</code>. Also, import&nbsp;<code>HttpParams</code>&nbsp;which helps us to&nbsp;add Query Parameters in an HTTP Request. Import HTTP Headers using the&nbsp;<code>HttpHeaders</code>&nbsp;which allows us to add HTTP Headers to the request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http'; </code></pre>\n\n\n\n<p>The&nbsp;<code>HttpClient</code>&nbsp;service makes use of&nbsp;RxJs observable, Hene we import&nbsp;<code>Observable</code>,&nbsp;<code>throwError</code>&nbsp;&amp; RxJs Operators like&nbsp;<code>map</code>&nbsp;&amp;&nbsp;<code>catchError</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Observable, throwError } from 'rxjs';\nimport { map, catchError} from 'rxjs/operators'; </code></pre>\n\n\n\n<p>The URL endpoint is hardcoded in our example, But you can make use of a config file to store the value and read it using the APP_INITIALIZER token</p>\n\n\n\n<pre class=\"wp-block-code\"><code>baseURL: string = \"https://api.github.com/\";</code></pre>\n\n\n\n<p>We inject the&nbsp;<code>HttpClient</code>&nbsp;using the&nbsp;Dependency Injection</p>\n\n\n\n<pre class=\"wp-block-code\"><code>constructor(private http: HttpClient) {  } </code></pre>\n\n\n\n<p>Finally, we use the&nbsp;<code>get</code>&nbsp;method of the&nbsp;<code>httpclient</code>&nbsp;to make an HTTP Get request to GitHub.</p>\n\n\n\n<p>The&nbsp;<code>https://api.github.com/users/&lt;username&gt;?repos</code>&nbsp;endpoint returns the list of Repositories belonging to the user&nbsp;<code>&lt;userName&gt;</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> //Any Data Type\r\n  getRepos(userName: string): Observable&lt;any> {\r\n    return this.http.get(this.baseURL + 'users/' + userName + '/repos')\r\n  }</code></pre>\n\n\n\n<p>Note that&nbsp;<code>httpclient.get</code>method returns the&nbsp;<code>observable</code>. Hence we need to&nbsp;<code>subscribe</code>&nbsp;to it to get the data.</p>\n\n\n\n<h3>Component</h3>\n\n\n\n<p>The following is the code from&nbsp;<code>app.component.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\n \r\nimport { GitHubService } from './github.service';\r\nimport { repos } from './repos';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  userName: string = \"tektutorialshub\"\r\n  repos: repos&#91;];\r\n \r\n  loading: boolean = false;\r\n  errorMessage;\r\n \r\n  constructor(private githubService: GitHubService) {\r\n  }\r\n \r\n  public getRepos() {\r\n    this.loading = true;\r\n    this.errorMessage = \"\";\r\n    this.githubService.getRepos(this.userName)\r\n      .subscribe(\r\n        (response) => {                           //next() callback\r\n          console.log('response received')\r\n          this.repos = response; \r\n        },\r\n        (error) => {                              //error() callback\r\n          console.error('Request failed with error')\r\n          this.errorMessage = error;\r\n          this.loading = false;\r\n        },\r\n        () => {                                   //complete() callback\r\n          console.error('Request completed')      //This is actually not needed \r\n          this.loading = false; \r\n        })\r\n  }\r\n}  </code></pre>\n\n\n\n<p>We subscribe to the&nbsp;<code>getRepos()</code>&nbsp;method in our component class. Only when we subscribe to the observable, the&nbsp;<code>HTTP GET</code>&nbsp;request is sent to the back end server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  this.githubService.getRepos(this.userName)\r\n      .subscribe();</code></pre>\n\n\n\n<p>When we subscribe to any observable, we optionally pass the three callbacks.&nbsp;<code>next()</code>, &nbsp;<code>error()</code>&nbsp;&nbsp;&amp; &nbsp;<code>complete()</code>.</p>\n\n\n\n<p><code>Next()</code>&nbsp;callback is where we get the result of the&nbsp;<code>observable</code>. In this example the list of repositories for the given user.</p>\n\n\n\n<p>The&nbsp;<code>observable</code>&nbsp;can also result in an error. It will invoke the&nbsp;<code>error()</code>&nbsp;callback and pass the error object. The&nbsp;<code>observables</code>&nbsp;stop after emitting the error signal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      (response) => {                           //next() callback\r\n          console.log('response received')\r\n          this.repos = response; \r\n        }\r\n \n </code></pre>\n\n\n\n<p>When the observable completes, it will call the&nbsp;<code>complete()</code>&nbsp;callback.&nbsp;<strong>There is no need for this call back as the subscription completes when the data is received.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>    (error) => {                              //error() callback\r\n          console.error('Request failed with error')\r\n          this.errorMessage = error;\r\n          this.loading = false;\r\n        },\r\n </code></pre>\n\n\n\n<p>When the observable completes, it will call the <code>complete()</code> callback. <strong>There is no need for this call back as the subscription completes when the data is received.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>() => {                                   //complete() callback\r\n          console.log('Request completed')\r\n          this.loading = false; \r\n        })</code></pre>\n\n\n\n<h4>Loading Indicator</h4>\n\n\n\n<p>We create a variable&nbsp;<code>loading=true</code>&nbsp;just before subscribing to the&nbsp;<code>GET</code>request. When the&nbsp;<code>observable</code>&nbsp;completes or an error occurs, we make it&nbsp;<code>false</code>. This helps us to show some kind of loading indicator to users, while we wait for the response.</p>\n\n\n\n<h3>Template</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h1 class=\"heading\">&lt;strong>HTTP &lt;/strong>Demo&lt;/h1>\r\n \r\n&lt;div class=\"form-group\">\r\n  &lt;label for=\"userName\">GitHub User Name&lt;/label>\r\n  &lt;input type=\"text\" class=\"form-control\" name=\"userName\" &#91;(ngModel)]=\"userName\">\r\n&lt;/div>\r\n \r\n&lt;div class=\"form-group\">\r\n  &lt;button type=\"button\" (click)=\"getRepos()\">Get Repos&lt;/button>\r\n&lt;/div>\r\n \r\n&lt;div *ngIf=\"loading\">loading...&lt;/div>\r\n \r\n&lt;div *ngIf=\"errorMessage\" class=\"alert alert-warning\">\r\n  &lt;strong>Warning!&lt;/strong> {{errorMessage | json}}\r\n&lt;/div>\r\n \r\n \r\n&lt;table class='table'>\r\n  &lt;thead>\r\n    &lt;tr>\r\n      &lt;th>ID&lt;/th>\r\n      &lt;th>Name&lt;/th>\r\n      &lt;th>HTML Url&lt;/th>\r\n      &lt;th>description&lt;/th>\r\n    &lt;/tr>\r\n  &lt;/thead>\r\n  &lt;tbody>\r\n    &lt;tr *ngFor=\"let repo of repos;\">\r\n      &lt;td>{{repo.id}}&lt;/td>\r\n      &lt;td>{{repo.name}}&lt;/td>\r\n      &lt;td>{{repo.html_url}}&lt;/td>\r\n      &lt;td>{{repo.description}}&lt;/td>\r\n    &lt;/tr>\r\n  &lt;/tbody>\r\n&lt;/table>\r\n \r\n&lt;pre>{{repos | json}}&lt;/pre></code></pre>\n\n\n\n<p>The template is very simple</p>\n\n\n\n<p>We first ask for the&nbsp;<code>userName</code>. We use the two-way data binding to sync userName&nbsp;<code>[(ngModel)]=\"userName\"</code>&nbsp;with the&nbsp;<code>userName</code>&nbsp;property in the component class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div class=\"form-group\">  &lt;label for=\"userName\">GitHub User Name&lt;/label>  &lt;input type=\"text\" class=\"form-control\" name=\"userName\" &#91;(ngModel)]=\"userName\">\n&lt;/div> </code></pre>\n\n\n\n<p><code>getRepos()</code>&nbsp;method subscribes to the HTTP get method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"form-group\">  &lt;button type=\"button\" (click)=\"getRepos()\">Get Repos&lt;/button>\n&lt;/div> </code></pre>\n\n\n\n<p>We show a loading message until the observable returns response or an error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngIf=\"loading\">loading...\n&lt;/div> </code></pre>\n\n\n\n<p>Show the error message.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div *ngIf=\"errorMessage\" class=\"alert alert-warning\">  &lt;strong>Warning!&lt;/strong> {{errorMessage | json}}\n&lt;/div> </code></pre>\n\n\n\n<p>The last line shows the response as it is received.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;pre>{{repos | json}}\n&lt;/pre> </code></pre>\n\n\n\n<h2>HTTP Get in Action</h2>\n\n\n\n<p>Now, run the app, you should able to make a successful GET Request.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/02/Angular-HTTP-Get-Example.gif\" alt=\"\" class=\"wp-image-16703\"/></figure>\n\n\n\n<h2>Get Syntax</h2>\n\n\n\n<p>The above code is a very simple example of the HTTP&nbsp;<code>get()</code>&nbsp;method. The complete syntax of the&nbsp;<code>get()</code>&nbsp;method is as shown below. It has second argument&nbsp;<code>options</code>, where we can pass the HTTP headers, parameters, and other options to control how the&nbsp;<code>get()</code>&nbsp;method behaves.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  get(url: string, \r\n      options: {\r\n          headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; };\r\n          params?: HttpParams | { &#91;param: string]: string | string&#91;]; };\r\n          observe?: \"body|events|response|\";\r\n          responseType: \"arraybuffer|json|blob|text\";\r\n          reportProgress?: boolean; \r\n          withCredentials?: boolean;}\r\n     ): Observable&lt;></code></pre>\n\n\n\n<ul><li><code>headers :</code>&nbsp;use this to send the HTTP Headers along with the request</li><li><code>params:</code>&nbsp;set query strings / URL parameters</li><li><code>observe:</code>&nbsp;This option determines the return type.</li><li><code>responseType:</code>&nbsp;The value of responseType determines how the response is parsed.</li><li><code>reportProgress:</code>&nbsp;Whether this request should be made in a way that exposes&nbsp;progress events.</li><li><code>withCredentials:</code>&nbsp;Whether this request should be sent with outgoing credentials (cookies).</li></ul>\n\n\n\n<h2>observe</h2>\n\n\n\n<p>The GET method returns one of the following</p>\n\n\n\n<ol><li>Complete&nbsp;<code>response</code></li><li><code>body</code>&nbsp;of the response</li><li><code>events</code>.</li></ol>\n\n\n\n<p>By default, it returns the&nbsp;<code>body</code>&nbsp;as shown in our example app.</p>\n\n\n\n<h3>Complete Response</h3>\n\n\n\n<p>The following code will return the complete&nbsp;<code>response</code>&nbsp;and not just the&nbsp;<code>body</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> getReposRawResponse(userName: string): Observable&lt;any> {\r\n  return this.http.get(this.baseURL + 'users/' + userName + '/repos', { observe: 'response' })\r\n}</code></pre>\n\n\n\n<p>The complete response is as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n{\r\n  \"headers\": {\r\n    \"normalizedNames\": {},\r\n    \"lazyUpdate\": null\r\n  },\r\n  \"status\": 200,\r\n  \"statusText\": \"OK\",\r\n  \"url\": \"https://api.github.com/users/tektutorialshub/repos\",\r\n  \"ok\": true,\r\n  \"type\": 4,\r\n  \"body\": &#91;\r\n    {\r\n      \"id\": 102269857,\r\n \r\n      ******************  Removed for clarity *****\r\n    }\r\n  ]\r\n}</code></pre>\n\n\n\n<h3>events</h3>\n\n\n\n<p>You can also listen to progress events by using the&nbsp;<code>{ observe: 'events', reportProgress: true }</code>. You can read about&nbsp;observe the response</p>\n\n\n\n<pre class=\"wp-block-code\"><code> getReposRawResponse(userName: string): Observable&lt;any> {\r\n  return this.http.get(this.baseURL + 'users/' + userName + '/repos', { observe: 'events', reportProgress: true })\r\n}</code></pre>\n\n\n\n<h2>Response Type</h2>\n\n\n\n<p>The&nbsp;<code>responseType</code>&nbsp;determines how the response is parsed. it can be one of the&nbsp;<code>arraybuffer</code>,&nbsp;<code>json</code>&nbsp;<code>blob</code>&nbsp;or&nbsp;<code>text</code>. The default behavior is to parse the response as JSON.</p>\n\n\n\n<h3>Strongly typed response</h3>\n\n\n\n<p>Instead of&nbsp;<code>any</code>, we can also use a&nbsp;<code>type</code>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   \r\n  getReposTypedResponse(userName: string): Observable&lt;repos&#91;]> {\r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos')\r\n  }\r\n </code></pre>\n\n\n\n<h3>String as Response Type</h3>\n\n\n\n<p>The API may return a simple text rather than a JSON. Use&nbsp;<code>responsetype: 'text'</code>&nbsp;to ensure that the response is parsed as a string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>getReposTypedResponse(userName: string): Observable&lt;repos&#91;]> {\r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos', { responsetype: 'text'})\r\n  }\r\n  </code></pre>\n\n\n\n<h2>Catching Errors</h2>\n\n\n\n<p>The API might fail with an error. You can catch those errors using&nbsp;<code>catchError</code>. You either handle the error or throw it back to the component using the&nbsp;<code>throw err</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\n  getReposCatchError(userName: string): Observable&lt;repos&#91;]> {\r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'usersY/' + userName + '/repos')\r\n      .pipe(\r\n        catchError((err) => {\r\n          console.error(err);\r\n          throw err;\r\n        }\r\n        )\r\n      )\r\n  }</code></pre>\n\n\n\n<p>Read more about error handling from&nbsp;Angular HTTP interceptor error handling</p>\n\n\n\n<h2>Transform the Response</h2>\n\n\n\n<p>You can make use of the&nbsp;<code>map</code>,&nbsp;<code>filter</code>&nbsp;RxJs Operators to manipulate or transform the response before sending it to the component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  getReposMap(userName: string): Observable&lt;repos&#91;]> {\r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos')\r\n      .pipe(\r\n        map((data) => {\r\n           //You can perform some transformation here\r\n           return data;\r\n        }),\r\n        catchError((err, caught) => {\r\n          console.error(err);\r\n          throw err;\r\n        }\r\n        )\r\n      )\r\n  }</code></pre>\n\n\n\n<h2>URL Parameters</h2>\n\n\n\n<p>The&nbsp;URL Parameters or Query strings&nbsp;can be added to the request easily using the&nbsp;HttpParams&nbsp;option. All you need to do is to create a new&nbsp;<code>HttpParams</code>&nbsp;class and add the parameters as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   \r\n  //URL Parameter\r\n  getReposUrlParameter(userName: string): Observable&lt;repos&#91;]> {\r\n \r\n    const params = new HttpParams()\r\n      .set('sort', \"description\")\r\n      .set('page',\"2\");\r\n \r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos', { 'params': params })\r\n      .pipe(\r\n        map((response) => {\r\n          return response;\r\n        }),\r\n        catchError((err, caught) => {\r\n          console.error(err);\r\n          throw err;\r\n        }\r\n        )\r\n      )\r\n  }</code></pre>\n\n\n\n<p>The above code sends the GET request to the URL&nbsp;<code>https://api.github.com/users/tektutorialshub/repos?sort=description&amp;page=2</code></p>\n\n\n\n<p>The following code also works.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  getReposUrlParameter(userName: string): Observable&lt;repos&#91;]> {\r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos?sort=description&amp;page=2')\r\n      .pipe(\r\n        map((response) => {\r\n          return response;\r\n        }),\r\n        catchError((err, caught) => {\r\n          console.error(err);\r\n          throw err;\r\n        }\r\n        )\r\n      )\r\n  }</code></pre>\n\n\n\n<h2>HTTP Headers</h2>\n\n\n\n<p>You can also add HTTP Headers using the&nbsp;<code>HttpHeaders</code>&nbsp;option as shown below. You can make use of the&nbsp;Http Interceptor to set the common headers.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> //HTTP Headers\r\n  getReposHeaders(userName: string): Observable&lt;repos&#91;]> {\r\n \r\n    const params = new HttpParams()\r\n      .set('sort', \"description\")\r\n      .set('page',\"2\");\r\n \r\n    const headers = new HttpHeaders()\r\n      .set('Content-Type', 'application/json')\r\n      \r\n \r\n    return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos', { 'params': params, 'headers': headers })\r\n      .pipe(\r\n        map((response) => {\r\n          return response;\r\n        }),\r\n        catchError((err, caught) => {\r\n          console.error(err);\r\n          throw err;\r\n        }\r\n        )\r\n      )\r\n  }</code></pre>\n\n\n\n<h2>Send Cookies</h2>\n\n\n\n<p>You can send cookies with every request using the&nbsp;<code>withCredentials=true</code>&nbsp;as shown below. You can make use of the&nbsp;Http Interceptor&nbsp;to set the&nbsp;<code>withCredentials=true</code>&nbsp;for all requests.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    //With Credentials\r\n    getReposWithCookies(userName: string): Observable&lt;repos&#91;]> {\r\n \r\n      const params = new HttpParams()\r\n        .set('sort', \"description\")\r\n        .set('page',\"2\");\r\n  \r\n      const headers = new HttpHeaders()\r\n        .set('Content-Type', 'application/json')\r\n        \r\n  \r\n      return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos', { 'params': params, 'headers': headers, withCredentials: true })\r\n        .pipe(\r\n          map((response) => {\r\n            return response;\r\n          }),\r\n          catchError((err, caught) => {\r\n            console.error(err);\r\n            throw err;\r\n          }\r\n          )\r\n        )\r\n    }</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HTTP Get Example Create a new Angular App. Import HttpClientModule To make HTTP Get request, we need to make use of the&nbsp;HttpClientModule, which is part of the package&nbsp;@angular/common/http. Open the&nbsp;app.module.ts&nbsp;and import it. Also, import the&nbsp;FormsModule You must also include it in the the&nbsp;imports&nbsp;array as shown below. Model Create&nbsp;repos.ts&nbsp;file and add the following code. This is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3648" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3648"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3648/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3844,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3648/revisions/3844"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3648"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3648"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3648"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3650,
    "date": "2020-12-07T06:49:33",
    "date_gmt": "2020-12-07T06:49:33",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3650" },
    "modified": "2020-12-09T06:35:55",
    "modified_gmt": "2020-12-09T06:35:55",
    "slug": "angular-http-post-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-http-post-example/",
    "title": { "rendered": "Angular HTTP POST Example" },
    "content": {
      "rendered": "\n<h2>HTTP Post Example</h2>\n\n\n\n<p>Create a new Angular App.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng new httpPost </code></pre>\n\n\n\n<h3>Import HttpClientModule</h3>\n\n\n\n<p>Import the&nbsp;<code>HttpClientModule</code>&nbsp;&amp;&nbsp;<code>FormsModule</code>&nbsp;in&nbsp;<code>app.module.ts</code>. Also, add it to the&nbsp;<code>imports</code>&nbsp;array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms'\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<h3>Faking Backend</h3>\n\n\n\n<p>In the&nbsp;HTTP Get example, we made use of the publicly available GitHub API. For this example, we need a backend server, which will accept the post request.</p>\n\n\n\n<p>There are few ways to create a fake backend. You can make use of an&nbsp;in-memory web API&nbsp;or the&nbsp;JSON server. For this tutorial, we will make use of the JSON Server.</p>\n\n\n\n<p>Install the JSON-server globally using the following&nbsp;<code>npm</code>&nbsp;command</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install -g json-server </code></pre>\n\n\n\n<p>create a&nbsp;<code>db.json</code>&nbsp;file with some data. The following example contains data of&nbsp;<code>people</code>&nbsp;with&nbsp;<code>id</code>&nbsp;&amp;&nbsp;<code>name</code>&nbsp;fields..</p>\n\n\n\n<pre class=\"wp-block-code\"><code> {\r\n  \"people\": &#91;\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"Don Bradman\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"Sachin Tendulkar\"\r\n    }\r\n  ]\r\n}</code></pre>\n\n\n\n<p>Start the server</p>\n\n\n\n<pre class=\"wp-block-code\"><code> json-server --watch db.json</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/02/json-server.png\" alt=\"fake back-end for HTTP post using json-server\" class=\"wp-image-16741\"/></figure>\n\n\n\n<p>Browse the URL&nbsp;<code>http://localhost:3000/</code>&nbsp;and you should be able to see the home page</p>\n\n\n\n<p>The URL<code>http://localhost:3000/people</code>&nbsp;lists the people from the&nbsp;<code>db.json</code>. You can now make&nbsp;<code>GET</code>&nbsp;<code>POST</code>&nbsp;<code>PUT</code>&nbsp;<code>PATCH</code>&nbsp;<code>DELETE</code>&nbsp;<code>OPTIONS</code>&nbsp;against this URL</p>\n\n\n\n<h3>Model</h3>\n\n\n\n<p>Now, back to our app and create a&nbsp;<code>Person</code>&nbsp;model class under&nbsp;<code>person.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> export class Person {  id:number  name:string} </code></pre>\n\n\n\n<h3>HTTP Post Service</h3>\n\n\n\n<p>Now, let us create a Service, which is responsible to send HTTP Requests. Create a new file&nbsp;<code>api.service.ts</code>&nbsp;and copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Person } from './person';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n \r\n@Injectable({providedIn:'root'})\r\nexport class ApiService {\r\n \r\n  baseURL: string = \"http://localhost:3000/\";\r\n \r\n  constructor(private http: HttpClient) {\r\n  }\r\n \r\n  getPeople(): Observable&lt;Person&#91;]> {\r\n    console.log('getPeople '+this.baseURL + 'people')\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people')\r\n  }\r\n \r\n  addPerson(person:Person): Observable&lt;any> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n    console.log(body)\r\n    return this.http.post(this.baseURL + 'people', body,{'headers':headers})\r\n  }\r\n \r\n}</code></pre>\n\n\n\n<p>The URL endpoint of our&nbsp;<code>json-server</code>&nbsp;is hardcoded in our example, But you can make use of a&nbsp;config file&nbsp;to store the value and read it using the&nbsp;APP_INITIALIZER&nbsp;token</p>\n\n\n\n<pre class=\"wp-block-code\"><code> baseURL: string = \"http://localhost:3000/\"; </code></pre>\n\n\n\n<p>We inject the&nbsp;<code>HttpClient</code>&nbsp;using the&nbsp;Dependency Injection</p>\n\n\n\n<pre class=\"wp-block-code\"><code>constructor(private http: HttpClient) {} </code></pre>\n\n\n\n<p>The&nbsp;<code>getPeople()</code>&nbsp;method sends an&nbsp;HTTP&nbsp;<code>GET</code>&nbsp;request to get the list of persons. Refer to the tutorial&nbsp;Angular HTTP GET Example&nbsp;to learn more.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> getPeople(): Observable&lt;Person&#91;]> {\r\n    console.log('getPeople '+this.baseURL + 'people')\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people')\r\n  }\r\n </code></pre>\n\n\n\n<p>In the&nbsp;<code>addPerson</code>&nbsp;method, we send an HTTP POST request to insert a new person in the backend.</p>\n\n\n\n<p>Since we are sending data as JSON, we need to set the&nbsp;<code>'content-type': 'application/json'</code>&nbsp;in the HTTP header. The&nbsp;<code>JSON.stringify(person)</code>&nbsp;converts the&nbsp;<code>person</code>&nbsp;object into a&nbsp;<code>JSON</code>&nbsp;string.</p>\n\n\n\n<p>Finally, we use the&nbsp;<code>http.post()</code>&nbsp;method using&nbsp;<code>URL</code>,&nbsp;<code>body</code>&nbsp;&amp;&nbsp;<code>headers</code>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   addPerson(person:Person): Observable&lt;any> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n    console.log(body)\r\n    return this.http.post(this.baseURL + 'people', body,{'headers':headers})\r\n  }</code></pre>\n\n\n\n<p>The&nbsp;<code>post()</code>&nbsp;method returns an&nbsp;<code>observable</code>. Hence we need to&nbsp;<code>subscribe</code>&nbsp;to it.</p>\n\n\n\n<h3>Component</h3>\n\n\n\n<h4>Template</h4>\n\n\n\n<p>The template is very simple.</p>\n\n\n\n<p>We ask for the name of the&nbsp;<code>person</code>, which we want to add to our backend server. The two-way data binding (<code>[(ngModel)]=\"person.name\"</code>) keeps the&nbsp;<code>person</code>&nbsp;object in sync with the view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n&lt;h1>{{title}}&lt;/h1>\r\n \r\n&lt;div>\r\n  &lt;div>\r\n    &lt;label>Name: &lt;/label>\r\n    &lt;input &#91;(ngModel)]=\"person.name\" />\r\n  &lt;/div>\r\n  &lt;div>\r\n    &lt;button (click)=\"addPerson()\">Add&lt;/button>\r\n  &lt;/div>\r\n&lt;/div>\r\n \r\n&lt;table class='table'>\r\n  &lt;thead>\r\n    &lt;tr>\r\n      &lt;th>ID&lt;/th>\r\n      &lt;th>Name&lt;/th>\r\n    &lt;/tr>\r\n  &lt;/thead>\r\n  &lt;tbody>\r\n    &lt;tr *ngFor=\"let person of people;\">\r\n      &lt;td>{{person.id}}&lt;/td>\r\n      &lt;td>{{person.name}}&lt;/td>\r\n    &lt;/tr>\r\n  &lt;/tbody>\r\n&lt;/table></code></pre>\n\n\n\n<h4>Code</h4>\n\n\n\n<p>In the&nbsp;<code>refreshPeople()</code>&nbsp;method, we subscribe to the&nbsp;<code>getPeople()</code>&nbsp;method of our&nbsp;<code>ApiService</code>&nbsp;to make an&nbsp;HTTP get() request&nbsp;to get the list of people.</p>\n\n\n\n<p>Under the&nbsp;<code>addPerson()</code>&nbsp;method, we subscribe to the&nbsp;<code>apiService.addPerson()</code>. Once the post request finishes, we call&nbsp;<code>refreshPeople()</code>&nbsp;method to get the updated list of people.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, OnInit } from '@angular/core';\r\nimport { ApiService } from './api.service';\r\nimport { Person } from './person';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n \r\n  title = 'httpGet Example';\r\n  people:Person&#91;];\r\n  person = new Person();\r\n  \r\n  constructor(private apiService:ApiService) {}\r\n \r\n  ngOnInit() {\r\n    this.refreshPeople()\r\n  }\r\n \r\n  refreshPeople() {\r\n    this.apiService.getPeople()\r\n      .subscribe(data => {\r\n        console.log(data)\r\n        this.people=data;\r\n      })      \r\n \r\n  }\r\n \r\n  addPerson() {\r\n    this.apiService.addPerson(this.person)\r\n      .subscribe(data => {\r\n        console.log(data)\r\n        this.refreshPeople();\r\n      })      \r\n  }\r\n \r\n}</code></pre>\n\n\n\n<h2>HTTP Post in Action</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/02/Angular-HTTP-Post-Example.gif\" alt=\"Angular HTTP Post Example using httpclient Module\" class=\"wp-image-16739\"/></figure>\n\n\n\n<h2>HTTP Post syntax</h2>\n\n\n\n<p>The above code is a very simple example of the HTTP&nbsp;<code>post()</code>&nbsp;method. The complete syntax of the&nbsp;<code>post()</code>&nbsp;method is as shown below. The first two arguments are&nbsp;<code>URL</code>&nbsp;and&nbsp;<code>body</code>. It has the third argument&nbsp;<code>options</code>, where we can pass the HTTP headers, parameters, and other options to control how the&nbsp;<code>post()</code>&nbsp;method behaves.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> post(url: string, \r\n     body: any, \r\n     options: { \r\n        headers?: HttpHeaders | { &#91;header: string]: string | string&#91;]; }; \r\n        observe?: \"body|events|response|\"; \r\n        params?: HttpParams | { &#91;param: string]: string | string&#91;]; }; \r\n        reportProgress?: boolean; \r\n        responseType: \"arraybuffer|json|blob|text\"; \r\n        withCredentials?: boolean; \r\n     }\r\n): Observable</code></pre>\n\n\n\n<ul><li><code>headers :</code>&nbsp;use this to send the HTTP Headers along with the request</li><li><code>params:</code>&nbsp;set query strings / URL parameters</li><li><code>observe:</code>&nbsp;This option determines the return type.</li><li><code>responseType:</code>&nbsp;The value of responseType determines how the response is parsed.</li><li><code>reportProgress:</code>&nbsp;Whether this request should be made in a way that exposes&nbsp;progress events.</li><li><code>withCredentials:</code>&nbsp;Whether this request should be sent with outgoing credentials (cookies).</li></ul>\n\n\n\n<h2>observe</h2>\n\n\n\n<p>The POST method returns one of the following</p>\n\n\n\n<ol><li>Complete&nbsp;<code>response</code></li><li><code>body</code>&nbsp;of the response</li><li><code>events</code>.</li></ol>\n\n\n\n<p>By default, it returns the&nbsp;<code>body</code>.</p>\n\n\n\n<h3>Complete Response</h3>\n\n\n\n<p>The following code will return the complete&nbsp;<code>response</code>&nbsp;and not just the&nbsp;<code>body</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> addPerson(person:Person): Observable&lt;any> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n \r\n    return this.http.post(this.baseURL + 'people', body,{'headers':headers , observe: 'response'})\r\n}</code></pre>\n\n\n\n<h3>events</h3>\n\n\n\n<p>You can also listen to progress events by using the&nbsp;<code>{ observe: 'events', reportProgress: true }</code>. You can read about&nbsp;observe the response</p>\n\n\n\n<pre class=\"wp-block-code\"><code> return this.http.post(this.baseURL + 'people', body,{'headers':headers, observe: 'response',reportProgress: true})</code></pre>\n\n\n\n<h2>Response Type</h2>\n\n\n\n<p>The&nbsp;<code>responseType</code>&nbsp;determines how the response is parsed. it can be one of the&nbsp;<code>arraybuffer</code>,&nbsp;<code>json</code>&nbsp;<code>blob</code>&nbsp;or&nbsp;<code>text</code>. The default behavior is to parse the response as JSON.</p>\n\n\n\n<h3>Strongly typed response</h3>\n\n\n\n<p>Instead of&nbsp;<code>any</code>, we can also use a&nbsp;<code>type</code>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n    console.log(body)\r\n    return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers})\r\n  }</code></pre>\n\n\n\n<h3>String as Response Type</h3>\n\n\n\n<p>The API may return a simple text rather than a JSON. Use&nbsp;<code>responsetype: 'text'</code>&nbsp;to ensure that the response is parsed as a string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n \r\n    return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers, responsetype: 'text'})\r\n  }</code></pre>\n\n\n\n<h2>Catching Errors</h2>\n\n\n\n<p>The API might fail with an error. You can catch those errors using&nbsp;<code>catchError</code>. You either handle the error or throw it back to the component using the&nbsp;<code>throw err</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> addPerson(person:Person): Observable&lt;Person> {    const headers = { 'content-type': 'application/json'}      const body=JSON.stringify(person);     return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers})       .pipe(         catchError((err) => {           console.error(err);           throw err;         }       )  } </code></pre>\n\n\n\n<p>Read more about error handling from&nbsp;Angular HTTP interceptor error handling</p>\n\n\n\n<h2>Transform the Response</h2>\n\n\n\n<p>You can make use of the&nbsp;<code>map</code>,&nbsp;<code>filter</code>&nbsp;RxJs Operators to manipulate or transform the response before sending it to the component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n \r\n    return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers})\r\n       .pipe(\r\n         catchError((err) => {\r\n           console.error(err);\r\n           throw err;\r\n         }\r\n       )\r\n  }</code></pre>\n\n\n\n<h2>URL Parameters</h2>\n\n\n\n<p>The&nbsp;URL Parameters or Query strings&nbsp;can be added to the request easily using the&nbsp;HttpParams&nbsp;option. All you need to do is to create a new&nbsp;<code>HttpParams</code>&nbsp;class and add the parameters as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n \r\n    return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers})\r\n       .pipe(\r\n          map((data) => {\r\n            //You can perform some transformation here\r\n           return data;\r\n         }),\r\n         catchError((err) => {\r\n           console.error(err);\r\n           throw err;\r\n         }\r\n       )\r\n  }</code></pre>\n\n\n\n<p>The above code sends the GET request to the URL&nbsp;<code>http://localhost:3000/people?para1=value1&amp;para2=value2</code></p>\n\n\n\n<p>The following code also works.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n  addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n \r\n   const params = new HttpParams()\r\n      .set('para1', \"value1\")\r\n      .set('para2',\"value2\");\r\n    const body=JSON.stringify(person);\r\n \r\n    return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers, 'params': params})\r\n       \r\n  }\r\n </code></pre>\n\n\n\n<h2>HTTP Headers</h2>\n\n\n\n<p>You can also add HTTP Headers using the&nbsp;<code>HttpHeaders</code>&nbsp;option as shown below. You can make use of the&nbsp;Http Interceptor to set the common headers. Our example code already includes an HTTP header</p>\n\n\n\n<h2>Send Cookies</h2>\n\n\n\n<p>You can send cookies with every request using the&nbsp;<code>withCredentials=true</code>&nbsp;as shown below. You can make use of the&nbsp;Http Interceptor&nbsp;to set the&nbsp;<code>withCredentials=true</code>&nbsp;for all requests.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\n  addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n \r\n  \r\n    const body=JSON.stringify(person);\r\n \r\n    return this.http.post&lt;Person>(this.baseURL + 'people?para1=value1&amp;para2=value2', body,{'headers':headers))\r\n       \r\n  }</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HTTP Post Example Create a new Angular App. Import HttpClientModule Import the&nbsp;HttpClientModule&nbsp;&amp;&nbsp;FormsModule&nbsp;in&nbsp;app.module.ts. Also, add it to the&nbsp;imports&nbsp;array. Faking Backend In the&nbsp;HTTP Get example, we made use of the publicly available GitHub API. For this example, we need a backend server, which will accept the post request. There are few ways to create a fake backend. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3650" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3650"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3650/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3845,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3650/revisions/3845"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3650"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3650"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3650"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3654,
    "date": "2020-12-07T06:59:29",
    "date_gmt": "2020-12-07T06:59:29",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3654" },
    "modified": "2020-12-09T06:40:25",
    "modified_gmt": "2020-12-09T06:40:25",
    "slug": "url-parameters-query-parameters-httpparams-in-angular-httpclient",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/url-parameters-query-parameters-httpparams-in-angular-httpclient/",
    "title": {
      "rendered": "URL Parameters, Query Parameters, httpparams in Angular HttpClient"
    },
    "content": {
      "rendered": "\n<h2>The URL Parameters</h2>\n\n\n\n<p>In the&nbsp;Angular HttpClient GET Example&nbsp;article, we created a GitHubService. The Service issued GET Request to GitHub API Endpoint to retrieve the List of Repositories belonging to a particular User.&nbsp;</p>\n\n\n\n<p>The GitHub API also has a set of parameters, which allows us to specify how we want to sort, which page to retrieve, No of Entries per page and type of the Repository to retrieve, etc.</p>\n\n\n\n<p>For Example</p>\n\n\n\n<pre class=\"wp-block-code\"><code> https:&#47;&#47;api.github.com/users/tekTutorialsHub/repos?sort=description&amp;page=2 </code></pre>\n\n\n\n<p>The Above query will return the result sorted on the description and retrieves only the second page.&nbsp;The string&nbsp;<code>sort=description&amp;page=2</code>&nbsp;after the question mark is called&nbsp;<strong>URL Parameter</strong>&nbsp;or&nbsp;<strong>Query strings /Query Parameters</strong>. The Question mark is used as a separator. The URL Parameters are also known as the&nbsp;<strong>GET params</strong>.</p>\n\n\n\n<h2>HttpParams()</h2>\n\n\n\n<p>We add the URL parameters using the helper class&nbsp;<code>HttpParams.</code>&nbsp; The&nbsp;<code>HttpParams</code>&nbsp;is passed as one of the arguments to&nbsp;<code>HttpClient.get</code>&nbsp;method.</p>\n\n\n\n<p>To use&nbsp;<code>HttpParams</code>, you need to import it first as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { HttpClient,HttpParams } from '@angular/common/http'; </code></pre>\n\n\n\n<p>Then create an instance of the&nbsp;<code>HttpParams</code>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const params = new HttpParams()\r\n  .set('page', PageNo)\r\n  .set('sort', SortOn);</code></pre>\n\n\n\n<p>And then call the&nbsp;<code>httpClient.get</code>&nbsp;method passing the params as the argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> return this.httpClient.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos',{params}) </code></pre>\n\n\n\n<p>The following are the list of method available in&nbsp;<code>HttpParams</code>&nbsp;class</p>\n\n\n\n<h3>HttpParams.set&nbsp;</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> set(param: string, value: string): HttpParams </code></pre>\n\n\n\n<p>Construct a new body with a new value for the given parameter name. If the parameter already exists then it is replaced else it is added.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>params = new HttpParams()\r\n    .set('page', '2')\r\n    .set('page', '3')\r\n    .set('sort', 'name');\r\n \r\nconsole.log(params.toString()); //Returns page=3&amp;sort=name</code></pre>\n\n\n\n<h4>HTTPParams is immutable</h4>\n\n\n\n<p>The&nbsp;<code>HttpParams</code>&nbsp;object is immutable. Every time you call a&nbsp;<code>set</code>&nbsp;method on&nbsp;<code>Params</code>&nbsp;object, it will create and return a new instance of the&nbsp;<code>Params</code>.</p>\n\n\n\n<p>For Example</p>\n\n\n\n<p>The following code does not work</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let params = new HttpParams(); params.set\n('page', PageNo);params.set('sort', SortOn); </code></pre>\n\n\n\n<p>Each call to&nbsp;<code>set</code>&nbsp;method does not add the options to the existing&nbsp;<code>HttpParams</code>&nbsp;instance, but creates a new instance from the existing instance and returns it.</p>\n\n\n\n<p>To work around, you can use the code as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Let params = new HttpParams()\n    .set('page', PageNo)\n    .set('sort', SortOn); </code></pre>\n\n\n\n<p>Or you can try this</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let params = new HttpParams(); params=params.set\n('page', PageNo);params=params.set('sort', SortOn); </code></pre>\n\n\n\n<h3>HttpParams.append</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> append(param: string, value: string): HttpParams </code></pre>\n\n\n\n<p>Construct a new body with an appended value for the given parameter name. Always appends the value irrespective of whether the parameter exists. The page parameter is appended twice in the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> params = new HttpParams()\r\n    .set('page', '2')\r\n    .append('page', '3')\r\n    .set('sort', 'name');\r\n \r\nconsole.log(params.toString()); //Returns page=2&amp;page=3&amp;sort=name</code></pre>\n\n\n\n<p>The URL Is constructed as&nbsp;<code>page=2&amp;page=3&amp;sort=name</code></p>\n\n\n\n<p>You can also use the append method similar to the&nbsp;<code>Set</code>&nbsp;method</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let params = new HttpParams(); params=params.append('page', PageNo);params=params.append('sort', SortOn); </code></pre>\n\n\n\n<h3>HttpParams.has</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>has(param: string): boolean  </code></pre>\n\n\n\n<p>Returns true if the given parameter name already exists in the HttpParams</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let params = new HttpParams();\r\n \r\nparams=params.append('page', PageNo);\r\nparams=params.append('sort', SortOn);</code></pre>\n\n\n\n<h3>HttpParams.get</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>get(param: string): string | null </code></pre>\n\n\n\n<p>Get the first value for the given parameter name, or null if it’s not present.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nparams = new HttpParams()\r\n    .set('page', '2')\r\n    .append('page', '3')\r\n    .set('sort', 'name');\r\n \r\nconsole.log(params.get('page')); // Returns 2 The First occurance of Page</code></pre>\n\n\n\n<h3>HttpParams.getAll</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>getAll(param: string): string&#91;] | null </code></pre>\n\n\n\n<p>Get all values as for the given parameter name, or null if it’s not present.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> params = new HttpParams()\r\n    .set('page', '2')\r\n    .append('page', '3')\r\n    .set('sort', 'name');\r\n \r\nconsole.log(params.getAll('page')); // Returns &#91;\"2\", \"3\"] All occurance of Page</code></pre>\n\n\n\n<h3>HttpParams.keys</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> keys(): string&#91;] </code></pre>\n\n\n\n<p>Get all the parameter names for this body.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let params = new HttpParams()\r\n    .set('page', '2')\r\n    .set('sort', 'name');\r\n \r\nconsole.log(params.keys()); //Returns &#91;\"page\", \"sort\"]</code></pre>\n\n\n\n<h3>HttpParams.delete</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>delete(param: string, value?: string): HttpParams </code></pre>\n\n\n\n<p>Deletes the parameter and returns the new parameter collection.&nbsp; You can delete using the parameter name or by&nbsp;using the name &amp; value. If no argument is specified, then all parameters are deleted.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> params = new HttpParams()\r\n    .set('page', '2')\r\n    .Append('page', '3')\r\n    .set('sort', 'name');\r\n \r\nparams = params.delete('page', '3'); //Deletes the parameter page with value 3\r\n \r\nparams = params.delete('page'); //Delete the all the parameter of page\r\n \r\nparams = params.delete(''); //Delete all parameters</code></pre>\n\n\n\n<h3>HttpParams.toString</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>toString(): string </code></pre>\n\n\n\n<p>Serialize the body to an encoded string, where key-value pairs (separated by =) are separated by &amp;s.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>arams = new HttpParams()\r\n    .set('page', '2')\r\n    .Append('page', '3')\r\n    .set('sort', 'name');\r\n \r\nconsole.log(params.toString()); //Returns page=2&amp;page=3&amp;sort=name</code></pre>\n\n\n\n<h2>Http Parameters from a string</h2>\n\n\n\n<p>Another way to pass the value is to use the&nbsp;<code>fromString</code>&nbsp;shortcut</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let params = new HttpParams({fromString: 'page=' + PageNo + '&amp;sort=' + SortOn}); </code></pre>\n\n\n\n<h2>Http Parameters from an object</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> let params = new HttpParams({ fromObject: { page: PageNo, sort: SortOn } }); </code></pre>\n\n\n\n<h2>Without params</h2>\n\n\n\n<p>You can also add the parameters directly to the URL, without going through the&nbsp;<code>HttpParams</code>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//You an also do it this way.return this.httpClient.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos?'+'page='+PageNo+'&amp;sort='+SortOn); </code></pre>\n\n\n\n<h2>Angular Httpparams Example</h2>\n\n\n\n<p>We are updating the project, which was created in the tutorial&nbsp;Angular Http GET Example.</p>\n\n\n\n<p><strong>app.module</strong></p>\n\n\n\n<p>Import the&nbsp;<code>httpClientModule</code>&nbsp;from the&nbsp;<code>@angular/common/http</code>&nbsp;package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import {HttpClientModule} from '@angular/common/http'; </code></pre>\n\n\n\n<p>Declare it in Imports metadata array in&nbsp;<code>app.module.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: &#91;GitHubService],\r\n  bootstrap: &#91;AppComponent]\r\n})</code></pre>\n\n\n\n<h3>Passing the URL Parameters</h3>\n\n\n\n<p>Open the&nbsp;<code>github.service.ts</code>.</p>\n\n\n\n<p>Import the&nbsp;<code>HttpClient</code>&nbsp;&amp;&nbsp;<code>HttpParams</code>&nbsp;from the&nbsp;<code>@angular/common/http</code>. We also require the Observable module from RxJs</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { repos} from './repos';\r\nimport { Observable } from 'rxjs';</code></pre>\n\n\n\n<p>Inject&nbsp;<code>HttpClient</code>&nbsp;in the Constructor</p>\n\n\n\n<pre class=\"wp-block-code\"><code>constructor(private httpClient:HttpClient){} </code></pre>\n\n\n\n<p>In the GetRepos method create the params object</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const params = new HttpParams()    .set('page', PageNo)    .set('sort', SortOn); </code></pre>\n\n\n\n<p>And use the params when calling the&nbsp;<code>httpClient.get</code>&nbsp;method as shown below</p>\n\n\n\n<p>The complete&nbsp;<code>github.service.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable} from 'rxjs/Rx';\r\n \r\nimport { repos} from './repos';\r\n \r\n \r\n@Injectable()\r\nexport class GitHubService {\r\n \r\n   baseURL= \"https://api.github.com/\";\r\n \r\n   constructor(private httpClient: HttpClient){\r\n   }\r\n \r\n   getRepos(userName: string, PageNo: string, SortOn: string): Observable&lt;repos&#91;]> {\r\n \r\n \r\n        let params = new HttpParams()\r\n                .set('page', PageNo)\r\n                .set('sort', SortOn);\r\n   \r\n        console.log(params.toString());\r\n \r\n        return this.httpClient.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos', {params});\r\n   }\r\n  \r\n}</code></pre>\n\n\n\n<p><strong>App.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\nimport { Observable} from 'rxjs/Rx';\r\n \r\nimport { GitHubService } from './github.service';\r\n \r\nimport { repos} from './repos';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\n \r\n \r\nexport class AppComponent\r\n{\r\n \r\n    userName = 'tektutorialshub';\r\n    pageNo  = '1';\r\n    sortOn = 'description';\r\n \r\n    repos: repos&#91;];\r\n \r\n    loading = false;\r\n    errorMessage = '';\r\n \r\n    constructor(private githubService: GitHubService) {\r\n    }\r\n \r\n    public getRepos() {\r\n        this.loading = true;\r\n        this.errorMessage = '';\r\n        this.githubService.getRepos(this.userName,this.pageNo,this.sortOn)\r\n            .subscribe((response) => {this.repos = response;},\r\n                       (error) => {\r\n                           this.errorMessage = error.message; this.loading = false; \r\n                        },\r\n                        () => {this.loading = false;})\r\n \r\n    }\r\n \r\n}\r\n </code></pre>\n\n\n\n<p>App.component.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n&lt;div class=\"container\">\r\n \r\n    &lt;h1 class=\"heading\">&lt;strong>HTTP &lt;/strong>Demo&lt;/h1>\r\n    \r\n \r\n    &lt;div class=\"form-group\">\r\n       &lt;label for=\"userName\">User Name&lt;/label>\r\n       &lt;input type=\"text\" class=\"form-control\" name=\"userName\" &#91;(ngModel)]=\"userName\">\r\n \r\n       &lt;label for=\"pageNo\">Page No&lt;/label>\r\n       &lt;input type=\"text\" class=\"form-control\" name=\"pageNo\" &#91;(ngModel)]=\"pageNo\">\r\n \r\n       &lt;label for=\"sortOn\">Sorted On&lt;/label>\r\n       &lt;input type=\"text\" class=\"form-control\" name=\"sortOn\" &#91;(ngModel)]=\"sortOn\">\r\n    &lt;/div>\r\n \r\n    &lt;div class=\"form-group\">\r\n        &lt;button type=\"button\" (click)=\"getRepos()\">Get Repos&lt;/button>\r\n    &lt;/div>\r\n \r\n    &lt;div *ngIf=\"loading\">loading...&lt;/div>\r\n    \r\n    &lt;div *ngIf=\"errorMessage\" class=\"alert alert-warning\">\r\n       &lt;strong>Warning!&lt;/strong> {{errorMessage}}\r\n    &lt;/div>\r\n \r\n    &lt;div class='table-responsive'>\r\n            &lt;table class='table'>\r\n                &lt;thead>\r\n                    &lt;tr>\r\n                        &lt;th>ID&lt;/th>\r\n                        &lt;th>Name&lt;/th>\r\n                        &lt;th>HTML Url&lt;/th>\r\n                        &lt;th>description&lt;/th>\r\n                    &lt;/tr>\r\n                &lt;/thead>\r\n                &lt;tbody>\r\n                    &lt;tr *ngFor=\"let repo of repos;\">\r\n                        &lt;td>{{repo.id}}&lt;/td>\r\n                        &lt;td>{{repo.name}}&lt;/td>\r\n                        &lt;td>{{repo.html_url}}&lt;/td>\r\n                        &lt;td>{{repo.description}}&lt;/td>\r\n                    &lt;/tr>\r\n                &lt;/tbody>\r\n            &lt;/table>\r\n        &lt;/div>\r\n    \r\n \r\n    \r\n    &lt;pre>{{repos | json}}&lt;/pre>\r\n \r\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The URL Parameters In the&nbsp;Angular HttpClient GET Example&nbsp;article, we created a GitHubService. The Service issued GET Request to GitHub API Endpoint to retrieve the List of Repositories belonging to a particular User.&nbsp; The GitHub API also has a set of parameters, which allows us to specify how we want to sort, which page to retrieve, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3654" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3654"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3654/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3846,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3654/revisions/3846"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3654"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3654"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3654"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3657,
    "date": "2020-12-07T07:04:55",
    "date_gmt": "2020-12-07T07:04:55",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3657" },
    "modified": "2020-12-09T06:45:18",
    "modified_gmt": "2020-12-09T06:45:18",
    "slug": "angular-httpheaders-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-httpheaders-example/",
    "title": { "rendered": "Angular HTTPHeaders Example" },
    "content": {
      "rendered": "\n<h2>HttpHeaders</h2>\n\n\n\n<p>We add HTTP Headers using the&nbsp;HttpHeaders&nbsp;helper class. It is passed as one of the arguments to the&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>PUT</code>,&nbsp;<code>DELETE</code>,&nbsp;<code>PATCH</code>&nbsp;&amp;&nbsp;<code>OPTIONS</code>&nbsp;request.</p>\n\n\n\n<p>To use&nbsp;<code>HttpHeaders</code>&nbsp;in your app, you must import it into your component or service</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { HttpHeaders } from '@angular/common/http'; </code></pre>\n\n\n\n<p>Then create an instance of the class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const headers= new HttpHeaders()\r\n  .set('content-type', 'application/json')\r\n  .set('Access-Control-Allow-Origin', '*');</code></pre>\n\n\n\n<p>And then call the&nbsp;<code>httpClient.get</code>&nbsp;method passing the headers as the argument</p>\n\n\n\n<pre class=\"wp-block-code\"><code> return this.httpClient.get(this.baseURL + 'users/' + userName + '/repos', { 'headers': headers }) </code></pre>\n\n\n\n<p>Note that&nbsp;<code>httpHeaders</code>&nbsp;are immutable. i.e every method on&nbsp;<code>HttpHeaders</code>&nbsp;object does not modify it but returns a new&nbsp;<code>HttpHeaders</code>&nbsp;object.</p>\n\n\n\n<p>The&nbsp;<code>httpHeaders</code>&nbsp;class has several methods using which you can manipulate the headers.</p>\n\n\n\n<h3>set</h3>\n\n\n\n<p><code>set(name: string, value: string | string[]): HttpHeaders</code></p>\n\n\n\n<p>The Sets method returns a new instance after modifying the given header. If the header already exists, its value is replaced with the given value in the returned object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const headers = new HttpHeaders()\r\n   .set('content-type', 'application/json')\r\n   .set('Access-Control-Allow-Origin', '*');</code></pre>\n\n\n\n<h4>httpHeaders are immutable</h4>\n\n\n\n<p>The HTTP headers are immutable. The following example does not work as each&nbsp;<code>set</code>&nbsp;method returns a new header and does not update the original header.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let headers = new HttpHeaders()\r\nheaders .set('content-type', 'application/json')\r\nheaders .set('Access-Control-Allow-Origin', '*')\r\nconsole.log(headers); \r\n  </code></pre>\n\n\n\n<p>To work around, you can use the code as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const headers= new HttpHeaders()\n  .set('content-type', 'application/json')  \n  .set('Access-Control-Allow-Origin', '*'); </code></pre>\n\n\n\n<p>You can also use the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nlet headers = new HttpHeaders()\r\nheaders=headers.set('content-type','application/json')\r\nheaders=headers.set('Access-Control-Allow-Origin', '*');\r\nconsole.log(headers)</code></pre>\n\n\n\n<h3>append</h3>\n\n\n\n<p><code>append(name: string, value: string | string[]): HttpHeaders</code></p>\n\n\n\n<p>The append method appends a new value to the existing set of values for a header and returns a new instance. The append method does not check if the value exists.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let headers = new HttpHeaders()\r\n \r\nheaders=headers.append('content-type','application/json')\r\nheaders=headers.append('Access-Control-Allow-Origin', '*')\r\nheaders=headers.append('content-type','application/x-www-form-urlencoded')\r\n \r\nconsole.log(headers)</code></pre>\n\n\n\n<p>The above results in&nbsp;<code>content-type</code>&nbsp;header in the request header as&nbsp;<code>content-type: application/json,application/x-www-form-urlencoded</code></p>\n\n\n\n<h3>has</h3>\n\n\n\n<p><code>has(name: string): boolean</code></p>\n\n\n\n<p>Returns true if the given header with the name already exists in the&nbsp;<code>HttpHeaders</code>. The following code checks if the&nbsp;<code>content-type</code>&nbsp;header present in the request header. If not it adds it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  let headers = new HttpHeaders()\r\n    headers=headers.append('Access-Control-Allow-Origin', '*')\r\n    if (!headers.has('content-type')) {\r\n      headers=headers.append('content-type','application/json')\r\n    }</code></pre>\n\n\n\n<h3>get</h3>\n\n\n\n<p><code>get(name: string): string | null</code></p>\n\n\n\n<p>Get the first value for the given header name, or null if it’s not present..</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let headers = new HttpHeaders()\r\n   .set('content-type','application/json')\r\n   .set('Access-Control-Allow-Origin', '*')\r\n      \r\nconst h =headers.get('content-type')\r\n \r\nif (h==null) {\r\n  console.log('content type header not present')\r\n} else {\r\n  console.log(h)      //returns 'application/json'\r\n} \r\n </code></pre>\n\n\n\n<h3>getAll</h3>\n\n\n\n<p><code>getAll(name: string): string[] | null</code></p>\n\n\n\n<p>Get all the headers for the given header name, or null if it’s not present.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nlet headers = new HttpHeaders()\r\n   .set('content-type','application/json')\r\n   .set('Access-Control-Allow-Origin', '*')\r\n   .append('content-type','application/x-www-form-urlencoded')\r\n \r\n const h =headers.getAll('content-type')\r\n console.log(h)\r\n \r\n*** output\r\n0: \"application/json\"\r\n1: \"application/x-www-form-urlencoded\"</code></pre>\n\n\n\n<h3>Keys</h3>\n\n\n\n<p><code>keys(): string[]</code></p>\n\n\n\n<p>Get all the headers for this request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let headers = new HttpHeaders()\r\n    .set('content-type','application/json')\r\n    .set('Access-Control-Allow-Origin', '*')\r\n    .append('content-type','application/x-www-form-urlencoded')\r\n \r\nconst h =headers.keys()\r\nconsole.log(h)\r\n    \r\n***output\r\n0: \"content-type\"\r\n1: \"Access-Control-Allow-Origin\"</code></pre>\n\n\n\n<h3>delete</h3>\n\n\n\n<p><code>delete(name: string, value?: string | string[]): HttpHeaders</code></p>\n\n\n\n<p>Deletes the header and returns the new headers.&nbsp; You can delete using the header name or by&nbsp;using the name &amp; value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nlet headers = new HttpHeaders()\r\n    .set('content-type','application/json')\r\n    .set('Access-Control-Allow-Origin', '*')\r\n    .append('content-type','application/x-www-form-urlencoded')\r\n \r\nheaders=headers.delete(\"content-type\",\"application/json\")  //delete content-type='application/json'\r\n \r\nheaders=headers.delete(\"content-type\")   //delete all content-type headers</code></pre>\n\n\n\n<h2>HttpHeaders from object</h2>\n\n\n\n<p>The following code shows how you can create a&nbsp;<code>HttpHeaders</code>&nbsp;from an object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*','content-type': 'application/json'}  )console.log(headers) </code></pre>\n\n\n\n<h2>Using HTTP Interceptor</h2>\n\n\n\n<p>Most headers we add to the HTTP Request in the entre application likely to remain the same. Adding them to every&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>PUT</code>, etc requests are cumbersome. Instead, you can make use of the&nbsp;HTTP Interceptors&nbsp;to intercept every request and add the commonly used headers. Refer to our tutorial on&nbsp;how to set HttpHeaders using HTTP Interceptors</p>\n\n\n\n<h2>HttpHeaders Example</h2>\n\n\n\n<p>Refer to our tutorial on&nbsp;HTTP Post example.</p>\n\n\n\n<p>The code requires you to set up a fake backend server using&nbsp;<code>json-server</code>. Install json server using the following command..</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install -g json-server </code></pre>\n\n\n\n<p>Create a <code>db.json</code> file with some data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n{\r\n  \"people\": &#91;\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"Don Bradman\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"Sachin Tendulkar\"\r\n    }\r\n  ]\r\n}\r\n  \r\n{\r\n  \"people\": &#91;\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"Don Bradman\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"Sachin Tendulkar\"\r\n    }\r\n  ]\r\n}\r\n </code></pre>\n\n\n\n<p>Start the server with the following command. The server will run on the port&nbsp;<code>http://localhost:3000/</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> json-server --watch db.json </code></pre>\n\n\n\n<h3>Code</h3>\n\n\n\n<p><code>person.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> export class Person {  id:number  name:string} </code></pre>\n\n\n\n<p><code>app.module.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms'\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\n \r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p><code>app.component.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, OnInit } from '@angular/core';\r\nimport { ApiService } from './api.service';\r\nimport { Person } from './person';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n \r\n  title = 'http Headers Example';\r\n  people:Person&#91;];\r\n  person = new Person();\r\n  \r\n  constructor(private apiService:ApiService) {}\r\n \r\n  ngOnInit() {\r\n    this.refreshPeople()\r\n  }\r\n \r\n  refreshPeople() {\r\n    this.apiService.getPeopleFromObject()\r\n      .subscribe(data => {\r\n        this.people=data;\r\n      })      \r\n \r\n  }\r\n \r\n  addPerson() {\r\n    this.apiService.addPerson(this.person)\r\n      .subscribe(data => {\r\n          this.person = new Person();\r\n        this.refreshPeople();\r\n      })      \r\n \r\n  }\r\n \r\n}\r\n \n </code></pre>\n\n\n\n<p><code>app.component.html</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\n&lt;h1>{{title}}&lt;/h1>\r\n \r\n&lt;div>\r\n  &lt;div>\r\n    &lt;label>Name: &lt;/label>\r\n    &lt;input &#91;(ngModel)]=\"person.name\" />\r\n  &lt;/div>\r\n  &lt;div>\r\n    &lt;button (click)=\"addPerson()\">Add&lt;/button>\r\n  &lt;/div>\r\n&lt;/div>\r\n \r\n&lt;button (click)=\"refreshPeople()\">Refresh&lt;/button>\r\n \r\n&lt;table class='table'>\r\n  &lt;thead>\r\n    &lt;tr>\r\n      &lt;th>ID&lt;/th>\r\n      &lt;th>Name&lt;/th>\r\n    &lt;/tr>\r\n  &lt;/thead>\r\n  &lt;tbody>\r\n    &lt;tr *ngFor=\"let person of people;\">\r\n      &lt;td>{{person.id}}&lt;/td>\r\n      &lt;td>{{person.name}}&lt;/td>\r\n    &lt;/tr>\r\n  &lt;/tbody>\r\n&lt;/table></code></pre>\n\n\n\n<p><code>app.routing.module.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\n \r\nconst routes: Routes = &#91;];\r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forRoot(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { }</code></pre>\n\n\n\n<p><code>app.service.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Person } from './person';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n \r\n@Injectable({ providedIn: 'root' })\r\nexport class ApiService {\r\n \r\n  baseURL: string = \"http://localhost:3000/\";\r\n \r\n  constructor(private http: HttpClient) {\r\n  }\r\n \r\n \r\n  getPeople(): Observable&lt;Person&#91;]> {\r\n    console.log('getPeople ' + this.baseURL + 'people')\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people')\r\n  }\r\n \r\n  //Adding headers\r\n  getPeopleWithHeaders(): Observable&lt;Person&#91;]> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    console.log(headers)\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  //Set method\r\n  getPeopleWithSet(): Observable&lt;Person&#91;]> {\r\n    const headers = new HttpHeaders()\r\n      .set('content-type','application/json')\r\n      .set('Access-Control-Allow-Origin', '*');  \r\n    console.log(headers)\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  //This wont work\r\n  getPeopleWithImmutable(): Observable&lt;Person&#91;]> {\r\n    const headers = new HttpHeaders()\r\n    headers.set('content-type','application/json')\r\n    headers.set('Access-Control-Allow-Origin', '*');\r\n \r\n    console.log(headers)\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  getPeopleWithImmutable1(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n    headers=headers.set('content-type','application/json')\r\n    headers=headers.set('Access-Control-Allow-Origin', '*');\r\n \r\n    console.log(headers)\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n \r\n  getPeopleAppend(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n    headers=headers.append('content-type','application/json')\r\n    headers=headers.append('Access-Control-Allow-Origin', '*')\r\n    headers=headers.append('content-type','application/x-www-form-urlencoded')\r\n    headers=headers.append('customer-header', 'custom')\r\n    console.log(headers)\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  getPeopleHas(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n    //headers=headers.append('content-type','application/json')\r\n    headers=headers.append('Access-Control-Allow-Origin', '*')\r\n    if (!headers.has('content-type')) {\r\n      headers=headers.append('content-type','application/json')\r\n    }\r\n \r\n    console.log(headers)\r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n \r\n  getPeopleGet(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n      .set('content-type','application/json')\r\n      .set('Access-Control-Allow-Origin', '*')\r\n \r\n    const h =headers.get('content-type')\r\n    if (h==null) {\r\n      console.log('content type header not present')\r\n    } else {\r\n      console.log(h)\r\n    }\r\n \r\n    \r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  getPeopleGetAll(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n      .set('content-type','application/json')\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .append('content-type','application/x-www-form-urlencoded')\r\n \r\n    const h =headers.getAll('content-type')\r\n    console.log(h)\r\n    \r\n    \r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  getPeopleKeys(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n      .set('content-type','application/json')\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .append('content-type','application/x-www-form-urlencoded')\r\n \r\n    const h =headers.keys()\r\n    console.log(h)\r\n    \r\n    \r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n  getPeopleDelete(): Observable&lt;Person&#91;]> {\r\n    let headers = new HttpHeaders()\r\n      .set('content-type','application/json')\r\n      .set('Access-Control-Allow-Origin', '*')\r\n      .append('content-type','application/x-www-form-urlencoded')\r\n \r\n \r\n    headers=headers.delete('content-type','application/json')\r\n \r\n    //headers=headers.delete(\"content-type\")\r\n \r\n \r\n    console.log(headers)\r\n    \r\n    \r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n \r\n  getPeopleFromObject(): Observable&lt;Person&#91;]> {\r\n \r\n    let headers = new HttpHeaders({ 'Access-Control-Allow-Origin': '*','content-type': 'application/json'}  )\r\n \r\n    console.log(headers)\r\n    \r\n    \r\n    return this.http.get&lt;Person&#91;]>(this.baseURL + 'people',{'headers':headers})\r\n  }\r\n \r\n \r\n  addPerson(person:Person): Observable&lt;Person> {\r\n    const headers = { 'content-type': 'application/json'}  \r\n    const body=JSON.stringify(person);\r\n    console.log(body)\r\n    return this.http.post&lt;Person>(this.baseURL + 'people', body,{'headers':headers})\r\n  }\r\n}\r\n </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HttpHeaders We add HTTP Headers using the&nbsp;HttpHeaders&nbsp;helper class. It is passed as one of the arguments to the&nbsp;GET,&nbsp;POST,&nbsp;PUT,&nbsp;DELETE,&nbsp;PATCH&nbsp;&amp;&nbsp;OPTIONS&nbsp;request. To use&nbsp;HttpHeaders&nbsp;in your app, you must import it into your component or service Then create an instance of the class And then call the&nbsp;httpClient.get&nbsp;method passing the headers as the argument Note that&nbsp;httpHeaders&nbsp;are immutable. i.e every method on&nbsp;HttpHeaders&nbsp;object [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3657" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3657"
        }
      ],
      "version-history": [
        {
          "count": 3,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3657/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3848,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3657/revisions/3848"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3657"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3657"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3657"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3659,
    "date": "2020-12-07T07:10:18",
    "date_gmt": "2020-12-07T07:10:18",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3659" },
    "modified": "2020-12-09T06:48:08",
    "modified_gmt": "2020-12-09T06:48:08",
    "slug": "understanding-http-interceptors-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/understanding-http-interceptors-in-angular/",
    "title": { "rendered": "Understanding HTTP Interceptors in Angular" },
    "content": {
      "rendered": "\n<h2>What is angular Http interceptor</h2>\n\n\n\n<p>The Angular HTTP interceptors sit between our application and the backend. When the application makes a request, the interceptor catches the request before it is sent to the backend. By Intercepting requests, we will get access to request headers and the body. This enables us to transform the request before sending it to the Server.&nbsp;</p>\n\n\n\n<p>When the response arrives from the back end the Interceptors can transform it before passing it to our application.</p>\n\n\n\n<p>One of the main benefits of the Http Interceptors is to add the Authorization Header to every request. We could do this manually, but that is a lot of work and error-prone. Another benefit is to catch the errors generated by the request and log them.</p>\n\n\n\n<h2>How to Create Http Interceptor</h2>\n\n\n\n<p>To Implement the Interceptor, you need to create an&nbsp;injectable service, which implements the&nbsp;<code>HttpInterceptor</code>interface.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> @Injectable() export class AppHttpInterceptor implements HttpInterceptor { </code></pre>\n\n\n\n<p>This class must implement the method Intercept.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> intercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n    //do whatever you want with the HttpRequest\r\n    return next.handle(req);\r\n}</code></pre>\n\n\n\n<p>This class is then provided in the Root Module using the&nbsp;<code>HTTP_INTERCEPTORS</code>&nbsp;token:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>providers: &#91;\r\n    {\r\n        provide: HTTP_INTERCEPTORS,\r\n        useClass: AppHttpInterceptor,\r\n        multi: true\r\n    }\r\n],</code></pre>\n\n\n\n<h2>HttpInterceptor Interface</h2>\n\n\n\n<p>At the heart of the Interceptor, logic is the&nbsp;HttpInterceptor Interface. we must Implement it in our Interceptor Service.</p>\n\n\n\n<p>The interface contains a single method&nbsp;Intercept&nbsp;with the following signature</p>\n\n\n\n<pre class=\"wp-block-code\"><code>intercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> </code></pre>\n\n\n\n<p>You can define more than one Interceptor. The Interceptors are called in the order they are defined in&nbsp;provider metadata.</p>\n\n\n\n<h3>HttpRequest</h3>\n\n\n\n<p>The first argument is&nbsp;HttpRequest.</p>\n\n\n\n<p>The&nbsp;HttpRequest&nbsp;is an outgoing HTTP request which is being intercepted. It contains URL, method, headers, body, and other request configuration.&nbsp;</p>\n\n\n\n<p>The HttpRequest is a immutable class. Which means that we can’t modify the original request. To make changes we need to clone the Original request using the&nbsp;HttpRequest.clone&nbsp;method</p>\n\n\n\n<h3>HttpHandler</h3>\n\n\n\n<p>The second argument is&nbsp;httpHandler</p>\n\n\n\n<p>The&nbsp;HttpHandler&nbsp;dispatches the&nbsp;HttpRequest&nbsp;to the next Handler using the method&nbsp;HttpHandler.handle. The next handler could be another Interceptor in the chain or the Http Backend.</p>\n\n\n\n<h2>Http Interceptor Example</h2>\n\n\n\n<p>Open the GitHubService app, which we created in the previous tutorial. You can download it from&nbsp;GitHub. The Final code is in the folder&nbsp;<strong>HttpInterceptors</strong>. The initial code in&nbsp;<strong>HttpGetParameters</strong>&nbsp;folder.</p>\n\n\n\n<h2>Create the Interceptor</h2>\n\n\n\n<p>Create AppHttpInterceptor.ts under the src/app folder and copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport {Injectable} from \"@angular/core\";\r\nimport {HttpEvent, HttpHandler, HttpInterceptor,HttpRequest} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\n \r\n@Injectable()\r\nexport class AppHttpInterceptor implements HttpInterceptor {\r\n    constructor() {\r\n    }\r\n \r\n    intercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n        console.log(req);\r\n        return next.handle(req);\r\n    }\r\n}</code></pre>\n\n\n\n<p>Now let us look at each code in detail</p>\n\n\n\n<p>First, we have Imported the following module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport {Injectable} from \"@angular/core\";\r\nimport {HttpEvent, HttpHandler, HttpInterceptor,HttpRequest} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\n </code></pre>\n\n\n\n<p>Create a class&nbsp;AppHttpInterceptor which implements&nbsp;HttpInterceptor&nbsp;Interface.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> export class AppHttpInterceptor implements HttpInterceptor { </code></pre>\n\n\n\n<p>Then create an Intercept method that takes&nbsp;HttpRequest&nbsp;and&nbsp;HttpHandler&nbsp;as the argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nintercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n    //Do whatever you want to do with the Request\r\n    console.log(req);\r\n    return next.handle(req);\r\n}</code></pre>\n\n\n\n<p>In the method body, you can modify the&nbsp;HttpRequest&nbsp;object. Once done, you can call the&nbsp;HttpHandler.handle&nbsp;method of the&nbsp;HttpHandler&nbsp;with the&nbsp;HttpRequest&nbsp;object. The&nbsp;HttpHandler.handle&nbsp;method invokes the next interceptor or sends the request to the backend server.</p>\n\n\n\n<p><strong>App.Module</strong></p>\n\n\n\n<p>The Complete code from App Module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule,HTTP_INTERCEPTORS} from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n \r\nimport { AppComponent } from './app.component';\r\n \r\nimport { GitHubService } from './github.service';\r\nimport {AppHttpInterceptor} from './AppHttpInterceptor';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule\r\n  ],\r\n  providers: &#91;GitHubService,\r\n    {\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: AppHttpInterceptor,\r\n    multi: true\r\n  }\r\n],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>First, we need to import the&nbsp;HttpClientModule&nbsp;&amp;&nbsp;HTTP_INTERCEPTORS&nbsp;from&nbsp;@angular/common/http.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { HttpClientModule,HTTP_INTERCEPTORS} from '@angular/common/http'; </code></pre>\n\n\n\n<p>Next, register&nbsp;AppHttpInterceptor as the&nbsp;Provider&nbsp;for the&nbsp;HTTP_INTERCEPTORS.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> providers: &#91;GitHubService,    {    provide: HTTP_INTERCEPTORS,    useClass: AppHttpInterceptor,    multi: true  } </code></pre>\n\n\n\n<p>Run the Application. Open the developer console and see the output of&nbsp;console.log(req).</p>\n\n\n\n<h2>Setting the new headers</h2>\n\n\n\n<p>We are able to Intercept the request and log it to the console in the above example. Now we will modify the HTTP Headers and Custom Headers.</p>\n\n\n\n<h3>Adding the Content-Type</h3>\n\n\n\n<p>To Modify the request we need to clone it. The&nbsp;HttpRequest.clone&nbsp;method allows us to modify the specific properties of the request while copying others. In the following example we are adding the new header content-type to the request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> req = req.clone({ headers: req.headers.set('Content-Type', 'application/json') }); </code></pre>\n\n\n\n<p>The headers object is also immutable. Hence we need to clone it using the&nbsp;headers.set&nbsp;method. The&nbsp;header.set&nbsp;method clones the current header and adds/modifies the new header value and returns the cloned header.</p>\n\n\n\n<p>You can also use the&nbsp;headers.append&nbsp;method as shown below. Note that the append method always appends the header even if the value is already present.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> req = req.clone({ headers: req.headers.append('Content-Type', 'application/json') }); </code></pre>\n\n\n\n<p>You can also make use of the setHeaders shortcut as shown below</p>\n\n\n\n<p>req = req.clone( {setHeaders: {‘Content-Type’: ‘application/json’}} );</p>\n\n\n\n<p>You may want to check if the header already exists using&nbsp;headers.has()&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> if (!req.headers.has('Content-Type')) {    req = req.clone({ headers: req.headers.set('Content-Type', 'application/json') });} </code></pre>\n\n\n\n<p>Check the current value of the header.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> req.headers.get('Accept') </code></pre>\n\n\n\n<p>And remove a header.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>req = req.clone({ headers: req.headers.delete('Content-Type','application/json') }); </code></pre>\n\n\n\n<h3>Adding the Authorisation token</h3>\n\n\n\n<p>Add authorization token.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const token: string =authService.Token; //Get token from some service\r\nif (token) {\r\n    req = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + token) });\r\n}</code></pre>\n\n\n\n<h2>Intercepting the Response</h2>\n\n\n\n<p>The response of the back-end server can be intercepted using the various Rxjs Operators. The&nbsp;map&nbsp;can be used to modify the response before sending it to the application. The&nbsp;do&nbsp;operator is useful for logging the events or time requests. The&nbsp;catch&nbsp;operator can be used to&nbsp;catch the error. The&nbsp;retry&nbsp;operator can be used to retry the failed operation.</p>\n\n\n\n<h3>Logging&nbsp;</h3>\n\n\n\n<p>The following example code shows the use of&nbsp;do&nbsp;operator. The&nbsp;do&nbsp;operator is invoked whenever certain events take place on an Observable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  intercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n \r\n        req = req.clone({ headers: req.headers.append('Content-Type', 'application/json')});\r\n        const started = Date.now();\r\n \r\n        return next.handle(req)\r\n        .do(event => {\r\n            console.log(event);\r\n            const elapsed = Date.now() - started;\r\n            console.log(`Request for ${req.urlWithParams} took ${elapsed} ms.`);\r\n            if (event instanceof HttpResponse) {\r\n                console.log(`Response Received`);\r\n            };\r\n        });\r\n    } </code></pre>\n\n\n\n<p>In the above example, do is invoked twice. First time when the request is sent to the server&nbsp;(event={type: 0}). The second time when the response is received&nbsp;(event instanceof HttpResponse).&nbsp;</p>\n\n\n\n<h3>Modify Response</h3>\n\n\n\n<p>The following code shows the use of the&nbsp;map&nbsp;operator, which allows us to transform the response. The response can be modified using the method&nbsp;clone&nbsp;(the response object is immutable). Then return the cloned response. The example below replaces the entire response body with the new body and returns the response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   \r\n   intercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n \r\n        return next.handle(req)\r\n            .map(resp => {\r\n \r\n                const myBody = &#91;{ 'id': '1',\r\n                                  'name': 'TekTutorialsHub',\r\n                                  'html_url': 'www.tektutorialshub.com',\r\n                                  'description': 'description' \r\n                                }];\r\n \r\n                // on Response\r\n                if (resp instanceof HttpResponse) {\r\n                    console.log(resp);\r\n                    console.log(resp.body);\r\n                    resp = resp.clone&lt;any>({ body: myBody});\r\n                    return resp;\r\n                }\r\n            });\r\n    }\r\n </code></pre>\n\n\n\n<h3>Catching the Error</h3>\n\n\n\n<p>The errors can be caught with the&nbsp;catch&nbsp;operator. The&nbsp;catch&nbsp;callback gets the&nbsp;HttpErrorResponse&nbsp;as its argument, which represents an error object. It contains information about headers, status, statusText&nbsp; &amp; URL, etc.&nbsp;&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> intercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n \r\n        const token: string = 'invald token';\r\n        req = req.clone({ headers: req.headers.set('Authorization', 'Bearer ' + token) });\r\n \r\n        return next.handle(req)\r\n            .map(resp => {\r\n                // on Response\r\n                if (resp instanceof HttpResponse) {\r\n                    // Do whatever you want with the response.\r\n                    return resp;\r\n                }\r\n            }).catch(err => {\r\n                // onError\r\n                console.log(err);\r\n                if (err instanceof HttpErrorResponse) {\r\n                    console.log(err.status);\r\n                    console.log(err.statusText);\r\n                    if (err.status === 401) {\r\n                        // redirect the user to login page\r\n                        // 401 unauthorised user\r\n                    }\r\n                }\r\n                return Observable.of(err);\r\n            });\r\n    }</code></pre>\n\n\n\n<h2>Cancel the current Request</h2>\n\n\n\n<p>We can also cancel the current request by returning the&nbsp;<code>EMPTY</code>&nbsp;observable.</p>\n\n\n\n<p>The following code snippet checks if the user is logged in. If not then it will not send the request to server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nimport { EMPTY } from 'rxjs';\r\n \r\nintercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n  if (NotLoggedIn) {\r\n    return EMPTY;\r\n  }\r\n \r\n  return next.handle(request);\r\n}</code></pre>\n\n\n\n<h2>Change the Requested URL</h2>\n\n\n\n<p>You can change the requested URL before it sent to the server. The&nbsp;<code>HttpRequest</code>&nbsp;contains the&nbsp;<code>url</code>&nbsp;property, which you can change before sending the request.</p>\n\n\n\n<p>This is useful when you want to add the base URL of all the requests, change HTTP to HTTPS etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nconst baseURL=\"https://www.tektutorialsHub.com/\";\r\n \r\nintercept(req: HttpRequest&lt;any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any>> {\r\n \r\n   const newReq = req.clone({\r\n      url: baseURL + req.url;\r\n    });\r\n \r\n   return next.handle(httpsReq);\r\n}\r\n </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is angular Http interceptor The Angular HTTP interceptors sit between our application and the backend. When the application makes a request, the interceptor catches the request before it is sent to the backend. By Intercepting requests, we will get access to request headers and the body. This enables us to transform the request before [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3659" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3659"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3659/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3849,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3659/revisions/3849"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3659"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3659"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3659"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
