[
  {
    "id": 5055,
    "date": "2022-12-03T11:56:16",
    "date_gmt": "2022-12-03T11:56:16",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5055" },
    "modified": "2022-12-03T11:56:16",
    "modified_gmt": "2022-12-03T11:56:16",
    "slug": "introduction-26",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/introduction-26/",
    "title": { "rendered": "Introduction" },
    "content": {
      "rendered": "\n<p>Angular provides two ways to work with forms:&nbsp;<em>template-driven forms</em>&nbsp;and&nbsp;<em>reactive forms</em>&nbsp;(also known as&nbsp;<em>model-driven forms</em>). Template-driven forms are the default way to work with forms in Angular. With template-driven forms, template directives are used to build an internal representation of the form. With reactive forms, you build your own representation of a form in the component class.</p>\n\n\n\n<p><strong>Note:</strong>&nbsp;Reactive forms were introduced with Angular 2.</p>\n\n\n\n<p>Here are some of the advantages of reactive forms:</p>\n\n\n\n<ul>\n<li>Using custom validators</li>\n\n\n\n<li>Changing validation dynamically</li>\n\n\n\n<li>Dynamically adding form fields</li>\n</ul>\n\n\n\n<p>In this section, you will explore how reactive forms can be applied to an example Angular application.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Angular provides two ways to work with forms:&nbsp;template-driven forms&nbsp;and&nbsp;reactive forms&nbsp;(also known as&nbsp;model-driven forms). Template-driven forms are the default way to work with forms in Angular. With template-driven forms, template directives are used to build an internal representation of the form. With reactive forms, you build your own representation of a form in the component class. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5055" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5055"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5055/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5056,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5055/revisions/5056"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5055"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5055"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5055"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5057,
    "date": "2022-12-03T11:56:51",
    "date_gmt": "2022-12-03T11:56:51",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5057" },
    "modified": "2022-12-03T11:56:51",
    "modified_gmt": "2022-12-03T11:56:51",
    "slug": "prerequisites",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/prerequisites/",
    "title": { "rendered": "Prerequisites" },
    "content": {
      "rendered": "\n<p>If you would like to follow along with this article, you will need:</p>\n\n\n\n<ul>\n<li>Node.js installed locally</li>\n</ul>\n\n\n\n<p>This post assumes you have some basic knowledge of Angular.</p>\n\n\n\n<p>This post also assumes you are building from a fresh Angular project generated by <code>@angular/cli</code>.</p>\n\n\n\n<p>This tutorial was verified with Node v15.1.0,&nbsp;<code>npm</code>&nbsp;v6.14.8,&nbsp;<code>@angular/core</code>&nbsp;v11.0.0, and&nbsp;<code>@angular/forms</code>&nbsp;v11.0.0.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If you would like to follow along with this article, you will need: This post assumes you have some basic knowledge of Angular. This post also assumes you are building from a fresh Angular project generated by @angular/cli. This tutorial was verified with Node v15.1.0,&nbsp;npm&nbsp;v6.14.8,&nbsp;@angular/core&nbsp;v11.0.0, and&nbsp;@angular/forms&nbsp;v11.0.0.</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5057" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5057"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5057/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5058,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5057/revisions/5058"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5057"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5057"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5057"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5059,
    "date": "2022-12-03T11:57:11",
    "date_gmt": "2022-12-03T11:57:11",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5059" },
    "modified": "2022-12-03T11:57:11",
    "modified_gmt": "2022-12-03T11:57:11",
    "slug": "setting-up-the-project",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/setting-up-the-project/",
    "title": { "rendered": "Setting Up the Project" },
    "content": {
      "rendered": "\n<p>For the purpose of this tutorial, you will build from a default Angular project generated with&nbsp;<code>@angular/cli</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npx @angular/cli new <mark>angular-reactive-forms-example</mark> --style=css --routing=false --skip-tests\n</code></pre>\n\n\n\n<p>Copy</p>\n\n\n\n<p>This will configure a new Angular project with styles set to “CSS” (as opposed to “Sass”, Less&#8221;, or “Stylus”), no routing, and skipping tests.</p>\n\n\n\n<p>Navigate to the newly created project directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd <mark>angular-reactive-forms-example</mark>\n</code></pre>\n\n\n\n<p>Copy</p>\n\n\n\n<p>To work with reactive forms, you will be using the&nbsp;<code>ReactiveFormsModule</code>&nbsp;instead of the&nbsp;<code>FormsModule</code>.</p>\n\n\n\n<p>Open&nbsp;<code>app.module.ts</code>&nbsp;in your code editor amd add&nbsp;<code>ReactiveFormsModule</code>:</p>\n\n\n\n<p>src/app/app.module.ts</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n<mark>import { ReactiveFormsModule } from '@angular/forms';</mark>\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: &#91;\n    AppComponent\n  ],\n  imports: &#91;\n    BrowserModule,\n    <mark>ReactiveFormsModule,</mark>\n  ],\n  providers: &#91;],\n  bootstrap: &#91;AppComponent]\n})\nexport class AppModule { }\n</code></pre>\n\n\n\n<p>Copy</p>\n\n\n\n<p>At this point, you should have a new Angular project with&nbsp;<code>ReactiveFormsModule</code>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>For the purpose of this tutorial, you will build from a default Angular project generated with&nbsp;@angular/cli. Copy This will configure a new Angular project with styles set to “CSS” (as opposed to “Sass”, Less&#8221;, or “Stylus”), no routing, and skipping tests. Navigate to the newly created project directory: Copy To work with reactive forms, you [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5059" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5059"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5059/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5060,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5059/revisions/5060"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5059"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5059"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5059"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5061,
    "date": "2022-12-03T11:57:42",
    "date_gmt": "2022-12-03T11:57:42",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5061" },
    "modified": "2022-12-03T11:57:42",
    "modified_gmt": "2022-12-03T11:57:42",
    "slug": "adding-a-form-to-the-component-template",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/adding-a-form-to-the-component-template/",
    "title": { "rendered": "Adding a Form to the Component Template" },
    "content": {
      "rendered": "\n<p>With reactive forms, the logic is declared entirely in the component class.</p>\n\n\n\n<p>Open&nbsp;<code>app.component.html</code>&nbsp;in your code editor and add the following lines of code:</p>\n\n\n\n<p>src/app/app.component.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;formGroup]=\"myForm\" (ngSubmit)=\"onSubmit(myForm)\"&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Name:\n      &lt;input formControlName=\"name\" placeholder=\"Your name\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Email:\n      &lt;input formControlName=\"email\" placeholder=\"Your email\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Message:\n      &lt;input formControlName=\"message\" placeholder=\"Your message\"&gt;\n    &lt;/label&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n\n\n<p>This code will create a form with three fields:&nbsp;<code>name</code>,&nbsp;<code>email</code>, and&nbsp;<code>message</code>. There will also be a&nbsp;<code>\"submit\"</code>&nbsp;button with the label&nbsp;<code>\"Send\"</code>. When submitting the form, the method&nbsp;<code>onSubmit(myForm)</code>&nbsp;will be called.</p>\n\n\n\n<p><strong>Note:</strong>&nbsp;If you are using Angular 2.x, you should also add the&nbsp;<code>novalidate</code>&nbsp;directive with the opening&nbsp;<code>form</code>&nbsp;tag, as Angular overrides HTML5’s validation. With Angular 4+,&nbsp;<code>novalidate</code>&nbsp;is automatically added behind the scenes.</p>\n\n\n\n<p>Let’s break it down:</p>\n\n\n\n<ul>\n<li><code>formGroup</code>: The form will be treated as a&nbsp;<code>FormGroup</code>&nbsp;in the component class, so the&nbsp;<code>formGroup</code>&nbsp;directive allows to give a name to the form group.</li>\n\n\n\n<li><code>ngSubmit</code>: This is the event that will be triggered upon submission of the form.</li>\n\n\n\n<li><code>formControlName</code>: Each form field should have a&nbsp;<code>formControlName</code>&nbsp;directive with a value that will be the name used in the component class.</li>\n</ul>\n\n\n\n<p>At this point, you should have a new Angular project with a component template that uses a form.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>With reactive forms, the logic is declared entirely in the component class. Open&nbsp;app.component.html&nbsp;in your code editor and add the following lines of code: src/app/app.component.html This code will create a form with three fields:&nbsp;name,&nbsp;email, and&nbsp;message. There will also be a&nbsp;&#8220;submit&#8221;&nbsp;button with the label&nbsp;&#8220;Send&#8221;. When submitting the form, the method&nbsp;onSubmit(myForm)&nbsp;will be called. Note:&nbsp;If you are using Angular [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5061" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5061"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5061/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5062,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5061/revisions/5062"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5061"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5061"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5061"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5063,
    "date": "2022-12-03T11:58:08",
    "date_gmt": "2022-12-03T11:58:08",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5063" },
    "modified": "2022-12-03T11:58:08",
    "modified_gmt": "2022-12-03T11:58:08",
    "slug": "building-the-component-class",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/building-the-component-class/",
    "title": { "rendered": "Building the Component Class" },
    "content": {
      "rendered": "\n<p>Next, in the component class, you will define the&nbsp;<code>FormGroup</code>&nbsp;and individual&nbsp;<code>FormControl</code>s within the&nbsp;<code>FormGroup</code>.</p>\n\n\n\n<p>If a value is provided when&nbsp;<em>newing</em>&nbsp;a&nbsp;<code>FormControl</code>, it will be used as the initial value for the field.</p>\n\n\n\n<p>Notice how the <code>FormGroup</code> and <code>FormControl</code> names are the same that were used in the template. Also notice how you initialize the <code>FormGroup</code> in the <code>ngOnInit</code> lifecycle hook:</p>\n\n\n\n<p>src/app/app.component.ts</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, <mark>OnInit</mark> } from '@angular/core';\n<mark>import { FormControl, FormGroup } from '@angular/forms';</mark>\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: &#91;'./app.component.css']\n})\nexport class AppComponent <mark>implements OnInit</mark> {\n  <mark>myForm: FormGroup;</mark>\n\n  <mark>ngOnInit() {</mark>\n    <mark>this.myForm = new FormGroup({</mark>\n      <mark>name: new FormControl('Sammy'),</mark>\n      <mark>email: new FormControl(''),</mark>\n      <mark>message: new FormControl('')</mark>\n    <mark>});</mark>\n  <mark>}</mark>\n\n  <mark>onSubmit(form: FormGroup) {</mark>\n    <mark>console.log('Valid?', form.valid);</mark> // true or false\n    <mark>console.log('Name', form.value.name);</mark>\n    <mark>console.log('Email', form.value.email);</mark>\n    <mark>console.log('Message', form.value.message);</mark>\n  <mark>}</mark>\n}\n</code></pre>\n\n\n\n<p>For the purposes of this tutorial, the&nbsp;<code>onSubmit</code>&nbsp;method does not actually communicate the submitted form values to any external service or server. It serves to show how you can access the form’s validity and&nbsp;<code>FormControl</code>&nbsp;values.</p>\n\n\n\n<p>At this point, you can compile your application and open it in a web browser. After entering values for&nbsp;<code>name</code>,&nbsp;<code>email</code>, and&nbsp;<code>message</code>&nbsp;and pressing&nbsp;<strong>Submit</strong>, the console log will display the values.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Next, in the component class, you will define the&nbsp;FormGroup&nbsp;and individual&nbsp;FormControls within the&nbsp;FormGroup. If a value is provided when&nbsp;newing&nbsp;a&nbsp;FormControl, it will be used as the initial value for the field. Notice how the FormGroup and FormControl names are the same that were used in the template. Also notice how you initialize the FormGroup in the ngOnInit lifecycle hook: src/app/app.component.ts For the purposes of this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5063" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5063"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5063/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5064,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5063/revisions/5064"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5063"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5063"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5063"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5065,
    "date": "2022-12-03T11:58:27",
    "date_gmt": "2022-12-03T11:58:27",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5065" },
    "modified": "2022-12-03T11:58:27",
    "modified_gmt": "2022-12-03T11:58:27",
    "slug": "updating-the-component-class-to-use-formbuilder",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/updating-the-component-class-to-use-formbuilder/",
    "title": {
      "rendered": "Updating the Component Class to Use&nbsp;<code>FormBuilder</code>"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<code>ngOnInit</code>&nbsp;form construction can be rewritten with the&nbsp;<code>FormBuilder</code>&nbsp;helper. This allows you to forgo of all the&nbsp;<em>newing</em>&nbsp;of form group and form controls.</p>\n\n\n\n<p>Revisit&nbsp;<code>app.component.ts</code>&nbsp;in your code editor and remove&nbsp;<code>FormControl</code>&nbsp;and replace&nbsp;<code>FormGroup</code>&nbsp;with&nbsp;<code>FormBuilder</code>:</p>\n\n\n\n<p>src/app/app.component.ts</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';\nimport { <mark>FormBuilder</mark>, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: &#91;'./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  myForm: FormGroup;\n\n  <mark>constructor(private fb: FormBuilder) {}</mark>\n\n  ngOnInit() {\n    <mark>this.myForm = this.fb.group({</mark>\n      <mark>name: 'Sammy',</mark>\n      <mark>email: '',</mark>\n      <mark>message: ''</mark>\n    <mark>});</mark>\n  }\n\n  onSubmit(form: FormGroup) {\n    console.log('Valid?', form.valid); // true or false\n    console.log('Name', form.value.name);\n    console.log('Email', form.value.email);\n    console.log('Message', form.value.message);\n  }\n}\n</code></pre>\n\n\n\n<p>This code with&nbsp;<code>FormBuilder</code>&nbsp;reduces the amount of boilerplate code for creating a&nbsp;<code>FormGroup</code>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;ngOnInit&nbsp;form construction can be rewritten with the&nbsp;FormBuilder&nbsp;helper. This allows you to forgo of all the&nbsp;newing&nbsp;of form group and form controls. Revisit&nbsp;app.component.ts&nbsp;in your code editor and remove&nbsp;FormControl&nbsp;and replace&nbsp;FormGroup&nbsp;with&nbsp;FormBuilder: src/app/app.component.ts This code with&nbsp;FormBuilder&nbsp;reduces the amount of boilerplate code for creating a&nbsp;FormGroup.</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5065" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5065"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5065/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5066,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5065/revisions/5066"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5065"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5065"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5065"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5067,
    "date": "2022-12-03T11:58:49",
    "date_gmt": "2022-12-03T11:58:49",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5067" },
    "modified": "2022-12-03T11:58:49",
    "modified_gmt": "2022-12-03T11:58:49",
    "slug": "updating-the-component-class-to-use-validators",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/updating-the-component-class-to-use-validators/",
    "title": {
      "rendered": "Updating the Component Class to Use&nbsp;<code>Validators</code>"
    },
    "content": {
      "rendered": "\n<p>Add the&nbsp;<code>Validators</code>&nbsp;class to your imports and declare your form controls with arrays instead of simple string values.</p>\n\n\n\n<p>The first value in the array is the initial form value and the second value is for the validator(s) to use. Notice how multiple validators can be used on the same form control by wrapping them into an array.</p>\n\n\n\n<p>RevisitRevisit&nbsp;<code>app.component.ts</code>&nbsp;in your code editor and add&nbsp;<code>Validators</code>:</p>\n\n\n\n<p>src/app/app.component.ts</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, <mark>Validators</mark> } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: &#91;'./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  myForm: FormGroup;\n\n  constructor(private fb: FormBuilder) {}\n\n  ngOnInit() {\n    this.myForm = this.fb.group({\n      name: <mark>&#91;'Sammy', Validators.required]</mark>,\n      email: <mark>&#91;'', &#91;Validators.required, Validators.email]]</mark>,\n      message: <mark>&#91;'', &#91;Validators.required, Validators.minLength(15)]],</mark>\n    });\n  }\n\n  onSubmit(form: FormGroup) {\n    console.log('Valid?', form.valid); // true or false\n    console.log('Name', form.value.name);\n    console.log('Email', form.value.email);\n    console.log('Message', form.value.message);\n  }\n}\n</code></pre>\n\n\n\n<p>This code adds&nbsp;<code>required</code>&nbsp;to the&nbsp;<code>name</code>,&nbsp;<code>email</code>, and&nbsp;<code>message</code>&nbsp;fields. It also ensures the&nbsp;<code>email</code>&nbsp;value uses the format of a valid email address. It also ensures that the&nbsp;<code>message</code>&nbsp;value is at least 15 characters long.</p>\n\n\n\n<p>If any of these form requirements are not passing, the&nbsp;<code>valid</code>&nbsp;value will be&nbsp;<code>false</code>. If all of these form requirements are passing, the&nbsp;<code>valid</code>&nbsp;value will be&nbsp;<code>true</code>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Add the&nbsp;Validators&nbsp;class to your imports and declare your form controls with arrays instead of simple string values. The first value in the array is the initial form value and the second value is for the validator(s) to use. Notice how multiple validators can be used on the same form control by wrapping them into an [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5067" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5067"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5067/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5068,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5067/revisions/5068"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5067"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5067"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5067"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5069,
    "date": "2022-12-03T11:59:10",
    "date_gmt": "2022-12-03T11:59:10",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5069" },
    "modified": "2022-12-03T11:59:10",
    "modified_gmt": "2022-12-03T11:59:10",
    "slug": "accessing-form-value-and-validity-in-the-template",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/accessing-form-value-and-validity-in-the-template/",
    "title": {
      "rendered": "Accessing Form Value and Validity in the Template"
    },
    "content": {
      "rendered": "\n<p>In the template, you can access each&nbsp;<code>FormControl</code>’s value and validity and the value and validity of the whole form group as a whole.</p>\n\n\n\n<p>Revisit&nbsp;<code>app.component.html</code>&nbsp;and use&nbsp;<code>*ngIf</code>&nbsp;to display feedback messages to the user if the form values are not valid:</p>\n\n\n\n<p>src/app/app.component.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;formGroup]=\"myForm\" (ngSubmit)=\"onSubmit(myForm)\"&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Name:\n      &lt;input formControlName=\"name\" placeholder=\"Your name\"&gt;\n    &lt;/label&gt;\n    <mark>&lt;div *ngIf=\"myForm.get('name').invalid &amp;&amp; (myForm.get('name').dirty || myForm.get('name').touched)\"&gt;</mark>\n      <mark>Please provide a name.</mark>\n    <mark>&lt;/div&gt;</mark>\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Email:\n      &lt;input formControlName=\"email\" placeholder=\"Your email\"&gt;\n    &lt;/label&gt;\n    <mark>&lt;div *ngIf=\"myForm.get('email').invalid &amp;&amp; (myForm.get('email').dirty || myForm.get('email').touched)\"&gt;</mark>\n      <mark>Please provide a valid email address.</mark>\n    <mark>&lt;/div&gt;</mark>\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;\n      Message:\n      &lt;input formControlName=\"message\" placeholder=\"Your message\"&gt;\n    &lt;/label&gt;\n    <mark>&lt;div *ngIf=\"myForm.get('message').invalid &amp;&amp; (myForm.get('message').dirty || myForm.get('message').touched)\"&gt;</mark>\n      <mark>Messages must be at least 15 characters long.</mark>\n    <mark>&lt;/div&gt;</mark>\n  &lt;/div&gt;\n  &lt;button type=\"submit\" <mark>&#91;disabled]=\"myForm.invalid</mark>\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n\n\n<p>This code checks to see if the user has interacted with the field (<code>dirty</code>&nbsp;or&nbsp;<code>touched</code>). Then, if the value is not passing the validation requirements, it will display the error message. The&nbsp;<strong>Send</strong>&nbsp;button will also be disabled until all the issues with the form values are addressed.</p>\n\n\n\n<p>There are multiple ways to retrieve form control values. This example uses&nbsp;<code>myForm.get('name')</code>&nbsp;which is equivalent to&nbsp;<code>myForm.controls.name</code>. It is possible to retrieve error information with&nbsp;<code>.hasError('required')</code>&nbsp;or&nbsp;<code>.errors.required</code>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the template, you can access each&nbsp;FormControl’s value and validity and the value and validity of the whole form group as a whole. Revisit&nbsp;app.component.html&nbsp;and use&nbsp;*ngIf&nbsp;to display feedback messages to the user if the form values are not valid: src/app/app.component.html This code checks to see if the user has interacted with the field (dirty&nbsp;or&nbsp;touched). Then, if [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5069" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5069"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5069/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5070,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5069/revisions/5070"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5069"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5069"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5069"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 5071,
    "date": "2022-12-03T11:59:44",
    "date_gmt": "2022-12-03T11:59:44",
    "guid": { "rendered": "https://angular.foobrdigital.com/?p=5071" },
    "modified": "2022-12-03T11:59:44",
    "modified_gmt": "2022-12-03T11:59:44",
    "slug": "conclusion",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/conclusion/",
    "title": { "rendered": "Conclusion" },
    "content": {
      "rendered": "\n<p>In this article, you explored how reactive forms can be applied to an example Angular application. You used <code>FormControl</code>, <code>FormGroup</code>, <code>FormBuilder</code>, and <code>Validators</code> to construct an example form with validation.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this article, you explored how reactive forms can be applied to an example Angular application. You used FormControl, FormGroup, FormBuilder, and Validators to construct an example form with validation.</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [288],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5071" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5071"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5071/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5072,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5071/revisions/5072"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5071"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5071"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5071"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
