[
  {
    "id": 3586,
    "date": "2020-12-04T11:24:15",
    "date_gmt": "2020-12-04T11:24:15",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3586" },
    "modified": "2020-12-09T05:19:28",
    "modified_gmt": "2020-12-09T05:19:28",
    "slug": "angular-forms-tutorial-fundamentals-concepts",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-forms-tutorial-fundamentals-concepts/",
    "title": {
      "rendered": "Angular Forms Tutorial: Fundamentals &#038; Concepts"
    },
    "content": {
      "rendered": "\n<h2>Angular Forms Module</h2>\n\n\n\n<p>Angular forms module provides all the above&nbsp;services&nbsp;out of the box. It binds the form field to the&nbsp;Angular component&nbsp;class. It tracks changes made to the form fields so that we can respond accordingly. The Angular forms provide the&nbsp;built-in validators&nbsp;to validate the inputs. You can create your own&nbsp;custom validator.&nbsp;It presents the validation errors to the user. Finally, it encapsulates all the input fields into an object structure when the user submits the form.</p>\n\n\n\n<p>Angular takes two approaches to build the forms. One is&nbsp;Template-driven forms&nbsp;approach and another one is&nbsp;Reactive forms&nbsp;or model-driven forms approach</p>\n\n\n\n<h3>Template-driven&nbsp;forms approach</h3>\n\n\n\n<p>In&nbsp;Template-driven approach&nbsp;is the easiest way to build the Angular forms. The logic of the form is placed in the template. The approach here is similar to what we did in AngularJs.</p>\n\n\n\n<h3>Model-driven forms approach</h3>\n\n\n\n<p>In&nbsp;Reactive Forms&nbsp;or&nbsp;Model-driven&nbsp;approach, the logic of the form is defined in the component as an object. The Model-driven approach has more benefits as it makes the testing of the component easier.</p>\n\n\n\n<p>In this approach, the representation of the form is created in the component class. This form model is then bound to the HTML elements. it is done using the special markups.</p>\n\n\n\n<p>Template-driven forms&nbsp;in Angular allows us to create sophisticated looking forms easily without writing any javascript code. The model-driven forms are created in component class, where Form fields are created as properties of our component class. &nbsp;This makes it easier to test.</p>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8&nbsp;Best Angular Books, which helps you to get started with Angular&nbsp;</strong>&nbsp;</p>\n\n\n\n<p>Here is the list of tutorials on how to build a form using the template-driven approach &amp; reactive or model-driven approach</p>\n\n\n\n<h2>Building Blocks of Angular Forms</h2>\n\n\n\n<p>The Angular Forms module consists of three Building blocks, irrespective of whether you are using&nbsp;Template-driven&nbsp;or&nbsp;Reactive forms&nbsp;approach.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2016/12/Building-Blocks-of-Angular-Forms.png\" alt=\"Building Blocks of Angular 2 Forms\" class=\"wp-image-4976\"/></figure>\n\n\n\n<h3>FormControl</h3>\n\n\n\n<p>A&nbsp;<code>FormControl</code>&nbsp;represents a single input field in an Angular form.</p>\n\n\n\n<p>Consider a simple Text input box</p>\n\n\n\n<pre class=\"wp-block-code\"><code> First Name : &lt;input type=\"text\" name=\"firstname\" /> </code></pre>\n\n\n\n<p>As a developer, you would like to know the current value in the Text box. You would also be like to know if the value is valid or not. If the user has changed the value(dirty) or is it unchanged. You would like to be notified when the user changes value.</p>\n\n\n\n<p>The&nbsp;<code>FormControl</code>&nbsp;is an object that encapsulates all this information related to the single input element. It Tracks the value and validation status of each of these control</p>\n\n\n\n<p>The&nbsp;<code>FormControl</code>&nbsp;is just a class. A&nbsp;<code>FormControl</code>&nbsp;is created for each form field. We can refer them in our component class and inspect its properties and methods</p>\n\n\n\n<p>You can use&nbsp;<code>FormControl</code>&nbsp;to set the value of the Form field, find the status of form field like (valid/invalid, pristine/dirty, touched/untouched ) etc &amp; add validation rules to it.</p>\n\n\n\n<p>The above input field is created using the&nbsp;FormControl&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let firstname= new FormControl(); //Creating a FormControl in a Reactive forms </code></pre>\n\n\n\n<p>Then, you can retrieve the current value in the input field using the value property</p>\n\n\n\n<pre class=\"wp-block-code\"><code> firstname.value   //Returns the value of the first name field </code></pre>\n\n\n\n<p>You can check the validation status of the First Name element as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> firstname.errors      // returns the list of errors\r\nfirstname.dirty       // true if the value has changed (dirty)\r\nfirstname.touched     // true if input field is touched\r\nfirstname.valid       // true if the input value has passed all the validation</code></pre>\n\n\n\n<h3>FormGroup</h3>\n\n\n\n<p>FormGroup&nbsp;is a collection of&nbsp;<code>FormControls</code>&nbsp;. Each&nbsp;<code>FormControl</code>&nbsp;is a property in a&nbsp;<code>FormGroup</code>. with the control name as the key.</p>\n\n\n\n<p>Often forms have more than one field. It is helpful to have a simple way to manage the Form controls together.</p>\n\n\n\n<p>Consider the following Form. we have three input fields street, city &amp; Pincode.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\ncity : &lt;input type=\"text\" name=\"city\" >\r\nStreet : &lt;input type=\"text\" name=\"street\" >\r\nPinCode : &lt;input type=\"text\" name=\"pincode\" ></code></pre>\n\n\n\n<p>All of the above input fields are represented as the separate&nbsp;<code>FormControl</code>. If we wanted to check the validity of our form, we have to check the validity of each and every&nbsp;<code>FormControl</code>&nbsp;for validity. Imagine Form having large no of fields. It is cumbersome to loop over large no of&nbsp;<code>FormControls</code>&nbsp;and check for validity.</p>\n\n\n\n<p><code>FormGroup</code>&nbsp;solveâ€™s this issue by providing a wrapper interface around a collection of&nbsp;FormControls&nbsp;A&nbsp;<code>FormGroup</code>&nbsp;tracks the status of each child&nbsp;<code>FormControl</code>&nbsp;and aggregates the values into one object. with each control name as the key</p>\n\n\n\n<p>We can group these input fields under the group address as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> let address= new FormGroup({\r\n    street : new FormControl(\"\"),\r\n    city : new FormControl(\"\"),\r\n    pinCode : new FormControl(\"\")\r\n})</code></pre>\n\n\n\n<p>In the above example, the address is our&nbsp;<code>FormGroup</code>, consisting of 3 Form Controls city, street, and Pincode. Now we can check the validity of the entire group together. For example, if the state is invalid, then the address&nbsp;FormGroup&nbsp;returns the invalid state.</p>\n\n\n\n<p>You can read the value of an address using the value method, which returns the JSON object as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>address.value </code></pre>\n\n\n\n<p>The Return value</p>\n\n\n\n<pre class=\"wp-block-code\"><code> address {    street :\"\",    city:\"\",    Pincode:\"\"} </code></pre>\n\n\n\n<p>You can access child control as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>address.get(\"street\") </code></pre>\n\n\n\n<p>Check the Validation status as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code>address.errors     // returns the list of errors\r\naddress.dirty      // true if the value of one of the child control has changed (dirty)\r\naddress.touched    // true if one of the child control is touched\r\naddress.valid      // true if all the child controls passed the validation</code></pre>\n\n\n\n<p>A typical Angular Form can have more than one&nbsp;FormGroup. A&nbsp;FormGroup&nbsp;can also contain another&nbsp;FormGroup.</p>\n\n\n\n<p>The Angular form is itself a&nbsp;FormGroup</p>\n\n\n\n<h3>FormArray</h3>\n\n\n\n<p><code>FormArray</code>&nbsp;is an array of form controls. It is similar to&nbsp;<code>FormGroup</code>&nbsp;except for one difference. In&nbsp;<code>FormGroup</code>&nbsp;each&nbsp;<code>FormControl</code>&nbsp;is a property with the control name as the key. In&nbsp;<code>FormArray</code>&nbsp;is an array of form controls.</p>\n\n\n\n<p>We define the&nbsp;FormArray&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> contactForm = new FormGroup( {\r\n    name: new FormControl(''),\r\n    cities:new FormArray(&#91;\r\n      new FormControl('Mumbai'),\r\n      new FormControl('Delhi')\r\n    ])\r\n  });</code></pre>\n\n\n\n<p>You can get the reference to the&nbsp;<code>cities</code>&nbsp;from the&nbsp;<code>contactForm.get</code>&nbsp;method</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  cities() :FormArray {    return this.contactForm.get(\"cities\") as FormArray  } </code></pre>\n\n\n\n<p>Check the Validation status as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n3\r\n4\r\n5\r\n6\r\n \r\ncities.errors     // returns the list of errors\r\ncities.dirty      // true if the value of one of the child control has changed (dirty)\r\ncities.touched    // true if one of the child control is touched\r\ncities.valid      // true if all the child controls passed the validation</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Angular Forms Module Angular forms module provides all the above&nbsp;services&nbsp;out of the box. It binds the form field to the&nbsp;Angular component&nbsp;class. It tracks changes made to the form fields so that we can respond accordingly. The Angular forms provide the&nbsp;built-in validators&nbsp;to validate the inputs. You can create your own&nbsp;custom validator.&nbsp;It presents the validation errors to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3586" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3586"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3586/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3811,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3586/revisions/3811"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3586"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3586"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3586"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3588,
    "date": "2020-12-04T11:29:26",
    "date_gmt": "2020-12-04T11:29:26",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3588" },
    "modified": "2020-12-09T05:22:06",
    "modified_gmt": "2020-12-09T05:22:06",
    "slug": "angular-template-driven-forms-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-template-driven-forms-example/",
    "title": { "rendered": "Angular Template-driven forms example" },
    "content": {
      "rendered": "\n<h2>What is Template-driven form?</h2>\n\n\n\n<p>In Template Driven Forms we specify behaviors/validations using directives and attributes in our template and let it work behind the scenes. All things happen in Templates hence very little code is required in the component class. This is different from the reactive forms, where we define the logic and controls in the component class.</p>\n\n\n\n<p>The Template-driven forms&nbsp;</p>\n\n\n\n<ol><li>The form is set up&nbsp;using&nbsp;<code>ngForm</code>&nbsp;directive</li><li>controls are set up using the&nbsp;<code>ngModel</code>&nbsp;directive</li><li><code>ngModel</code>&nbsp;also provides the two-way data binding</li><li>The Validations are configured in the template via directives</li></ol>\n\n\n\n<p>Template-driven forms are</p>\n\n\n\n<ol><li>Contains little code in the component class&nbsp;</li><li>Easier to set up&nbsp;</li></ol>\n\n\n\n<p>While they are</p>\n\n\n\n<ol><li>Difficult to add controls dynamically</li><li>Unit testing is a challenge</li></ol>\n\n\n\n<h2>Create the Example Application</h2>\n\n\n\n<p>Use&nbsp;<code>ng new</code>&nbsp;to create a new application</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ng new tdf  --routing=true --style=css </code></pre>\n\n\n\n<p>Run&nbsp;<code>ng serve</code>&nbsp;and verify if everything is installed correctly.</p>\n\n\n\n<h3>Import FormsModule</h3>\n\n\n\n<p>To work with Template-driven forms, we must import the&nbsp;<code>FormsModule</code>. We usually import it in root module or in a&nbsp;shared module. The&nbsp;<code>FormsModule</code>&nbsp;contains all the form directives and constructs for working with forms</p>\n\n\n\n<p>Open the&nbsp;<code>app.module.ts</code>&nbsp;and add the&nbsp;<code>import { FormsModule } from '@angular/forms';</code>&nbsp;to it.</p>\n\n\n\n<p>And also add the&nbsp;<code>FormsModule</code>&nbsp;to the&nbsp;<em>imports metadata property array</em></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';        //import FormsModule\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule                    //Add in Imports Array\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<h3>HTML Form</h3>\n\n\n\n<p>The first task is to build the template. The following is a regular HTML&nbsp;<code>form</code>. We enclose it in a&nbsp;<code>&lt;form&gt;</code>&nbsp;tag. We have included two text input (FirstName &amp; LastName), a email (email), a radio button (gender), a checkbox (isMarried), and a select list (country). These are form elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name&lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name&lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder&lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\"> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\"> Female\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married&lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n  &lt;label for=\"country\">country &lt;/label>\r\n  &lt;select name=\"country\" id=\"country\">\r\n    &lt;option selected=\"\" value=\"\">&lt;/option>\r\n    &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n      {{c.name}}\r\n    &lt;/option>\r\n  &lt;/select>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form></code></pre>\n\n\n\n<p><strong>Component Class</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Template driven forms';\r\n \r\n  countryList:country&#91;] = &#91;\r\n    new country(\"1\", \"India\"),\r\n    new country('2', 'USA'),\r\n    new country('3', 'England')\r\n  ];\r\n}\r\n \r\nexport class country {\r\n  id:string;\r\n  name:string;\r\n \r\n  constructor(id:string, name:string) {\r\n    this.id=id;\r\n    this.name=name;\r\n  }\r\n}\r\n </code></pre>\n\n\n\n<h3>ngForm</h3>\n\n\n\n<p>Once, we have a form with few form elements, the angular automatically converts it into a Template-driven form. This is done by the&nbsp;<code>ngForm</code>&nbsp;directive.</p>\n\n\n\n<p>The&nbsp;<code>ngForm</code>&nbsp;directive is what makes the Angular template-driven forms work. But we do not need to add it&nbsp;explicitly. Angular adds it automatically</p>\n\n\n\n<p>When we include&nbsp;<code>FormsModule</code>, the Angular is going to look out for any&nbsp;<code>&lt;form&gt;</code>&nbsp;tag in our HTML template. Angular does this via&nbsp;<code>ngForm</code>&nbsp;directive.&nbsp;<code>ngForm</code>&nbsp;directive automatically detects the&nbsp;<code>&lt;form&gt;</code>&nbsp;tag and automatically binds to it. You do not have to do anything on your part to invoke and bind the&nbsp;<code>ngForm</code>&nbsp;directive.</p>\n\n\n\n<p>The&nbsp;<code>ngForm</code>&nbsp;does the following</p>\n\n\n\n<ol><li>Binds itself to the&nbsp;<code>&lt;Form&gt;</code>&nbsp;directive</li><li>Creates a top-level&nbsp;<code>FormGroup</code>&nbsp;instance</li><li>Creates<code>FormControl</code>&nbsp;instance for each of child control, which has&nbsp;<code>ngModel</code>&nbsp;directive.</li><li>Creates<code>FormGroup</code>&nbsp;instance for each of the &nbsp;<code>NgModelGroup</code>&nbsp;directive.</li></ol>\n\n\n\n<p>We can export the&nbsp;<code>ngForm</code>&nbsp;instance into a local template variable using&nbsp;<code>ngForm</code>&nbsp;as the key (ex:&nbsp;<code>#contactForm=\"ngForm\"</code>). This allows us to access the many properties and methods of&nbsp;<code>ngForm</code>&nbsp;using the template variable&nbsp;<code>contactForm</code></p>\n\n\n\n<p>Hence, update the&nbsp;<code>form</code>&nbsp;element as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #contactForm=\"ngForm\"> </code></pre>\n\n\n\n<h3>FormControl</h3>\n\n\n\n<p>The&nbsp;<code>FormControl</code>&nbsp;is the basic building block of the&nbsp;Angular Forms. It represents a single input field in an&nbsp;Angular form<strong>.</strong>&nbsp;The&nbsp;Angular Forms Module&nbsp;binds the input element to a&nbsp;<code>FormControl</code>. We use the&nbsp;<code>FormControl</code>&nbsp;instance to track the value, user interaction and validation status of an individual form element. Each individual&nbsp;<code>Form</code>&nbsp;element is a&nbsp;<code>FormControl</code></p>\n\n\n\n<p>We have six form elements in our HTML template. They are firstName, lastname, email, gender, isMarried &amp; country. We need to bind them to&nbsp;<code>FormControl</code>&nbsp;instance. We do this by using the&nbsp;<code>ngModel</code>&nbsp;directive. Add the&nbsp;<code>ngModel</code>&nbsp;directive to each control as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type=\"text\" name=\"firstname\" ngModel> </code></pre>\n\n\n\n<p><code>ngModel</code>&nbsp;will use the&nbsp;<code>name</code>&nbsp;attribute to create the&nbsp;<code>FormControl</code>&nbsp;instance for each of the&nbsp;<code>Form</code>&nbsp;field it is attached.</p>\n\n\n\n<h3>Submit Form</h3>\n\n\n\n<p>Now have the template ready, except for the final piece i.e submitting data to the component.</p>\n\n\n\n<p>We use the&nbsp;<code>ngSubmit</code>&nbsp;event, to submit the form data to the component class. We use the&nbsp;event binding&nbsp;(parentheses) to bind&nbsp;<code>ngSubmit</code>&nbsp;to&nbsp;<code>OnSubmit</code>&nbsp;method in the component class. When the user clicks on the submit button, the&nbsp;<code>ngSubmit</code>&nbsp;event will fire</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\"> </code></pre>\n\n\n\n<p>We are passing the local template variable&nbsp;<code>contactForm</code>&nbsp;in&nbsp;<code>onSubmit</code>&nbsp;method.&nbsp;<code>contactForm</code>&nbsp;holds the reference to the&nbsp;<code>ngForm</code>&nbsp;directive. We can use this in our component class to extract the data from the form fields.</p>\n\n\n\n<h3>Final Template</h3>\n\n\n\n<p>Our final template is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name&lt;/label>\r\n    &lt;input type=\"text\" name=\"firstname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name&lt;/label>\r\n    &lt;input type=\"text\" name=\"lastname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder&lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" name=\"gender\" ngModel> Male\r\n    &lt;input type=\"radio\" value=\"female\" name=\"gender\" ngModel> Female\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married&lt;/label>\r\n    &lt;input type=\"checkbox\" name=\"isMarried\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;select name=\"country\" ngModel>\r\n    &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n      {{c.name}}\r\n    &lt;/option>\r\n  &lt;/select>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n  \r\n&lt;/form></code></pre>\n\n\n\n<h3>Receive Form Data</h3>\n\n\n\n<p>We need to receive the data in component class from our form. To do this we need to create the&nbsp;<code>onSubmit</code>&nbsp;method in our component class. The&nbsp;<code>submit</code>&nbsp;method receives the reference to the&nbsp;<code>ngForm</code>&nbsp;directive, which we named is as&nbsp;<code>contactForm</code>. The&nbsp;<code>contactForm</code>&nbsp;exposes the&nbsp;<code>value</code>&nbsp;method which returns the form fields as a Json object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> onSubmit(contactForm) {    console.log(contactForm.value);  } </code></pre>\n\n\n\n<p>You can print the value to the console using the&nbsp;<code>console.log(contactForm.value)</code></p>\n\n\n\n<p>Run the code now and enter some data into the form. Open the Developer Console in your browser and check the output, when you submit the data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>country: \"1\"\r\nfirstname: \"Sachin\"\r\nemail:\"sachin@gmail.com\"\r\ngender: \"male\"\r\nisMarried: true\r\nlastname: \"Tendulkar\"</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/09/Angular-template-driven-forms.gif\" alt=\"Angular template driven forms\" class=\"wp-image-14206\"/><figcaption>Angular template-driven forms in Action</figcaption></figure>\n\n\n\n<h2>Local Variable</h2>\n\n\n\n<p>We can assign the&nbsp;<code>ngForm</code>,<code>FormControl</code>&nbsp;or&nbsp;<code>FormGroup</code>&nbsp;instance to a template local variable. This allows us to check the status of the form like whether the form is&nbsp;<code>valid</code>,&nbsp;<code>submitted</code>, and&nbsp;<code>value</code>&nbsp;of the form elements, etc</p>\n\n\n\n<h3>ngForm</h3>\n\n\n\n<p>We have access to the&nbsp;<code>ngForm</code>&nbsp;instance via the local template variable&nbsp;<code>#contactForm</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\"> </code></pre>\n\n\n\n<p>Now, we can make use of some of the properties &amp; methods to know the status of form. For Example</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;p>\r\n  &lt;button type=\"submit\">Submit&lt;/button>\r\n&lt;/p>\r\n \r\n&lt;pre>Value : {{contactForm.value | json }} &lt;/pre>\r\n&lt;pre>Valid : {{contactForm.valid}} &lt;/pre>\r\n&lt;pre>Touched : {{contactForm.touched  }} &lt;/pre>\r\n&lt;pre>Submitted : {{contactForm.submitted  }} &lt;/pre></code></pre>\n\n\n\n<p><code>value</code>: The value property returns the object containing the value of every FormControl<br><code>valid</code>: Returns true if the form is Valid else returns false.<br><code>touched</code>: True if the user has entered a value in at least in one field.<br><code>submitted</code>: Returns true if the form is submitted. else false.</p>\n\n\n\n<h3>FormControl</h3>\n\n\n\n<p>Similarly, we can also get access to the&nbsp;<code>FormControl</code>&nbsp;instance by assigning the&nbsp;<code>ngModel</code>&nbsp;to a local variable as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;input type=\"text\" name=\"firstname\" #fname=\"ngModel\" ngModel> </code></pre>\n\n\n\n<p>Now, the variable&nbsp;<code>#fname</code>&nbsp;holds the reference to the&nbsp;<code>firstname</code>&nbsp;FormControl. We can then access the properties of FormControl like&nbsp;<code>value</code>,&nbsp;<code>valid</code>,&nbsp;<code>isvalid</code>,&nbsp;<code>tocuhed</code>&nbsp;etc</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;p>\r\n  &lt;label for=\"firstname\">First Name &lt;/label>\r\n  &lt;input type=\"text\" name=\"firstname\" #fname=\"ngModel\" ngModel>\r\n&lt;/p>\r\n \r\n&lt;pre>Value    : {{fname.value}} &lt;/pre>\r\n&lt;pre>valid    : {{fname.valid}} &lt;/pre>\r\n&lt;pre>invalid  : {{fname.invalid}} &lt;/pre>\r\n&lt;pre>touched  : {{fname.touched}} &lt;/pre\r\n </code></pre>\n\n\n\n<p><code>value</code>: Returns the current value of the control<br><code>valid</code>: Returns true if the value is Valid else false<br><code>invalid</code>: True if the value is invalid else false<br><code>touched</code>: Returns true if the value is entered in the element</p>\n\n\n\n<h2>Nested FormGroup</h2>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>&nbsp;is a collection of&nbsp;<code>FormControl</code>. It can also contain other&nbsp;<code>FormGroup's</code>.</p>\n\n\n\n<p>The&nbsp;<code>ngForm</code>&nbsp;directive creates the top Level&nbsp;<code>FormGroup</code>&nbsp;behind the scene, when we use the&nbsp;<code>&lt;Form&gt;</code>&nbsp;directive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\"> </code></pre>\n\n\n\n<p>We can add new&nbsp;<code>FormGroup</code>&nbsp;using the&nbsp;<code>ngModelGroup</code>&nbsp;directive. Let us add street, city &amp; Pincode form controls and group them under the address&nbsp;<code>FormGroup</code></p>\n\n\n\n<p>All you need to do is to enclose the fields inside a&nbsp;<code>div</code>&nbsp;element with&nbsp;<code>ngModelGroup</code>&nbsp;directive applied on it as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div ngModelGroup=\"address\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"city\">City&lt;/label>\r\n      &lt;input type=\"text\" name=\"city\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"street\">Street&lt;/label>\r\n      &lt;input type=\"text\" name=\"street\" ngModel>\r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n      &lt;input type=\"text\" name=\"pincode\" ngModel>\r\n    &lt;/p>\r\n \r\n&lt;/div></code></pre>\n\n\n\n<p>Run the App and submit. The resultant object is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Value : {\r\n  \"firstname\": \"Sachin\",\r\n  \"lastname\": \"Tendulkar\",\r\n  \"email\":\"sachin@gmail.com\"\r\n  \"gender\": \"male\",\r\n  \"isMarried\": true,\r\n  \"country\": \"1\",\r\n  \"address\": {\r\n    \"city\": \"Mumbai\",\r\n    \"street\": \"Fashin Street\",\r\n    \"pincode\": \"400600\"\r\n  }\r\n} </code></pre>\n\n\n\n<h2>Setting the Initial Value</h2>\n\n\n\n<p>The form is usually pre-filled with some default data. In the case of editing, we have to show the user the current data. You can refer to the next tutorial on&nbsp;How to set value in the template-driven form.</p>\n\n\n\n<h2>Validating the Form</h2>\n\n\n\n<p>Validating the form is another important task. We have covered it in Validation in template-driven form tutorial</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Template-driven form? In Template Driven Forms we specify behaviors/validations using directives and attributes in our template and let it work behind the scenes. All things happen in Templates hence very little code is required in the component class. This is different from the reactive forms, where we define the logic and controls in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3588" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3588"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3588/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3812,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3588/revisions/3812"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3588"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3588"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3588"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3590,
    "date": "2020-12-04T11:42:49",
    "date_gmt": "2020-12-04T11:42:49",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3590" },
    "modified": "2020-12-09T05:25:28",
    "modified_gmt": "2020-12-09T05:25:28",
    "slug": "how-to-set-value-in-template-driven-forms-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/how-to-set-value-in-template-driven-forms-in-angular/",
    "title": {
      "rendered": "How to set value in template-driven forms in Angular"
    },
    "content": {
      "rendered": "\n<h2>Template</h2>\n\n\n\n<p>The following is the&nbsp;<code>app.component.html</code>&nbsp;from the&nbsp;angular template-driven forms tutorial.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\"  ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder &lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" ngModel> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" ngModel> Female\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married &lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"country\">country &lt;/label>\r\n    &lt;select id=\"country\" name=\"country\" ngModel>\r\n      &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n        {{c.name}}\r\n      &lt;/option>\r\n    &lt;/select>\r\n  &lt;/p>\r\n \r\n  &lt;div ngModelGroup=\"address\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"city\">City&lt;/label>\r\n      &lt;input type=\"text\" id=\"city\" name=\"city\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"street\">Street&lt;/label>\r\n      &lt;input type=\"text\" id=\"street\" name=\"street\" ngModel>\r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n      &lt;input type=\"text\" id=\"pincode\" name=\"pincode\" ngModel>\r\n    &lt;/p>\r\n \r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form</code></pre>\n\n\n\n<p>Before we set the default value, it is better to create a model class for the above form. Open the&nbsp;<code>app.component.ts</code>&nbsp;and add the following class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class contact {\r\n  firstname:string;\r\n  lastname:string;\r\n  email:string;\r\n  gender:string;\r\n  isMarried:boolean;\r\n  country:string;\r\n  address: {\r\n    city:string;\r\n    street:string;\r\n    pincode:string;\r\n  }\r\n} \r\n </code></pre>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8&nbsp;Best Angular Books, which helps you to get started with Angular&nbsp;</strong>&nbsp;</p>\n\n\n\n<h2>Set value in template-driven forms</h2>\n\n\n\n<p>There are two ways you can set the value of the form elements</p>\n\n\n\n<ul><li>Two-way data binding</li><li>Use the template reference variable</li></ul>\n\n\n\n<h3>Two-way data binding</h3>\n\n\n\n<p>The&nbsp;two-way data binding.is the recommended way to set the value in the template-driven forms.</p>\n\n\n\n<p>The following code uses the&nbsp;<code>[(ngModel)]=\"contact.firstname\"</code>&nbsp;to bind the&nbsp;<code>firstname</code>&nbsp;HTML element to the contact.<code>firstname</code>&nbsp;field in the component class. The advantageous here is that any changes made in the form are automatically propagated to the component class and changes made in component class are immediately shown in the form.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;label for=\"firstname\">First Name &lt;/label>\n&lt;input type=\"text\" id=\"firstname\" name=\"firstname&#91;(ngModel)]=\"contact.firstname\"> </code></pre>\n\n\n\n<h4>Set the default/initial value</h4>\n\n\n\n<p>To set the initial or default value all you need to populate the contact model in the&nbsp;<code>ngOnInit</code>&nbsp;method as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ngOnInit() {\r\n \r\n    this.contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: { city: \"Mumbai\", street: \"Perry Cross Rd\", pincode: \"400050\" }\r\n    };\r\n \r\n  }</code></pre>\n\n\n\n<h4>Set the value individually or dynamically</h4>\n\n\n\n<pre class=\"wp-block-code\"><code> changeCountry() {  this.contact.country = \"1\";} </code></pre>\n\n\n\n<h4>Reset form</h4>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;button type=\"button\" (click)=\"reset(contactForm)\">Reset&lt;/button> </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> reset(contactForm :NgForm) {  contactForm.resetForm();} </code></pre>\n\n\n\n<h2>app.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Template driven forms';\r\n \r\n \r\n  countryList: country&#91;] = &#91;\r\n    new country(\"1\", \"India\"),\r\n    new country('2', 'USA'),\r\n    new country('3', 'England')\r\n  ];\r\n \r\n  contact: contact;\r\n \r\n  ngOnInit() {\r\n \r\n    this.contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: { city: \"Mumbai\", street: \"Perry Cross Rd\", pincode: \"400050\" }\r\n    };\r\n \r\n  }\r\n \r\n  onSubmit() {\r\n    console.log(this.contact);\r\n  }\r\n \r\n  setDefaults() {\r\n    this.contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: { city: \"Mumbai\", street: \"Perry Cross Rd\", pincode: \"400050\" }\r\n    };\r\n  }\r\n \r\n  changeCountry() {\r\n    this.contact.country = \"1\";\r\n  }\r\n \r\n  reset(contactForm :NgForm) {\r\n    contactForm.resetForm();\r\n  }\r\n \r\n}\r\n \r\nexport class contact {\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  gender: string;\r\n  isMarried: boolean;\r\n  country: string;\r\n  address: {\r\n    city: string;\r\n    street: string;\r\n    pincode: string;\r\n  }\r\n}\r\n \r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}</code></pre>\n\n\n\n<h2>app.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" &#91;(ngModel)]=\"contact.firstname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" &#91;(ngModel)]=\"contact.lastname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\"  &#91;(ngModel)]=\"contact.email\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder &lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" &#91;(ngModel)]=\"contact.gender\"> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" &#91;(ngModel)]=\"contact.gender\"> Female\r\n \r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married &lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" &#91;(ngModel)]=\"contact.isMarried\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"country\">country &lt;/label>\r\n    &lt;select id=\"country\" name=\"country\" &#91;(ngModel)]=\"contact.country\">\r\n      &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n        {{c.name}}\r\n      &lt;/option>\r\n    &lt;/select>\r\n  &lt;/p>\r\n \r\n  &lt;div ngModelGroup=\"address\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"city\">City&lt;/label>\r\n      &lt;input type=\"text\" id=\"city\" name=\"city\" &#91;(ngModel)]=\"contact.address.city\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"street\">Street&lt;/label>\r\n      &lt;input type=\"text\" id=\"street\" name=\"street\" &#91;(ngModel)]=\"contact.address.street\"> \r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n      &lt;input type=\"text\" id=\"pincode\" name=\"pincode\"  &#91;(ngModel)]=\"contact.address.pincode\">\r\n    &lt;/p>\r\n \r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"button\" (click)=\"changeCountry()\">Change Country&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"setDefaults()\">Set Defaults&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"reset(contactForm)\">Reset&lt;/button>\r\n  &lt;/p>\r\n \r\n  &lt;b>valid&lt;/b> {{contactForm.valid}} \r\n  &lt;b>touched&lt;/b> {{contactForm.touched}} \r\n  &lt;b>pristine&lt;/b> {{contactForm.pristine}} \r\n  &lt;b>dirty&lt;/b> {{contactForm.dirty}} \r\n \r\n&lt;/form></code></pre>\n\n\n\n<h3>Template reference variable</h3>\n\n\n\n<p>We have a&nbsp;<code>#contactForm</code>&nbsp;reference variable, which is an instance of&nbsp;<code>ngForm</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\"></code></pre>\n\n\n\n<p>We can get the reference to the&nbsp;<code>#contactForm</code>&nbsp;in the&nbsp;<code>app.component.ts</code>, using the&nbsp;<code>viewchild</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  @ViewChild('contactForm',null) contactForm: NgForm; </code></pre>\n\n\n\n<p>Once we have the reference, we can use the&nbsp;<code>setValue</code>&nbsp;method of the&nbsp;<code>ngForm</code>&nbsp;to set the initial value</p>\n\n\n\n<h4>Set the default or initial value</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>ngOnInit() {\r\n \r\n   this.contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: {\r\n        city: \"Mumbai\",\r\n        street: \"Perry Cross Rd\",\r\n        pincode: \"400050\"\r\n      }\r\n    };\r\n \r\n    setTimeout(() => { \r\n      this.contactForm.setValue(this.contact);\r\n    });\r\n \r\n  }</code></pre>\n\n\n\n<p>Note that we are using the&nbsp;<code>setTimeout</code>&nbsp;That is because the form controls are yet initialized when the&nbsp;<code>OnInit</code>&nbsp;is fired. We will get the following error message</p>\n\n\n\n<p>There are no form controls registered with this group yet. If youâ€™re using ngModel, you may want to check next tick (e.g. use setTimeout).</p>\n\n\n\n<h4>Set the value individually or dynamically</h4>\n\n\n\n<p>You can also set the value individually using the&nbsp;<code>setValue</code>&nbsp;method of the individual&nbsp;<code>FormControl</code>.</p>\n\n\n\n<p>You will get the reference to the individual&nbsp;<code>FormControl</code>&nbsp;from the&nbsp;<code>controls</code>&nbsp;collection of the&nbsp;<code>ngForm</code>. Once you get the reference use the&nbsp;<code>setValue</code>&nbsp;on the&nbsp;<code>FormControl</code>&nbsp;instance to change the value.</p>\n\n\n\n<p>For Example, this code will change the country to India</p>\n\n\n\n<pre class=\"wp-block-code\"><code>changeCountry() {   this.contactForm.controls&#91;\"country\"].setValue(\"1\");} </code></pre>\n\n\n\n<p>Call the&nbsp;<code>changeCountry</code>&nbsp;method from the Template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;button type=\"button\" (click)=\"changeCountry()\">Change Country&lt;/button> </code></pre>\n\n\n\n<h4>Reset values</h4>\n\n\n\n<p>You can reset the form to empty value using the&nbsp;<code>reset</code>&nbsp;or&nbsp;<code>resetForm</code>&nbsp;method of the&nbsp;<code>ngForm</code>. These also resets the form status like&nbsp;<code>dirty</code>,&nbsp;<code>valid</code>,&nbsp;<code>pristine</code>&nbsp;&amp;&nbsp;<code>touched</code>, etc</p>\n\n\n\n<pre class=\"wp-block-code\"><code> reset() {  this.contactForm.reset();} </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> resetForm() {   this.contactForm.resetForm();} </code></pre>\n\n\n\n<h4>Set Default Value</h4>\n\n\n\n<p>You can invoke the&nbsp;<code>setValue</code>&nbsp;anytime to set the form back to the default value. This will set the entire form to the value held by the contact form.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  setDefaults() {    this.contactForm.setValue(this.contact);  } </code></pre>\n\n\n\n<h4>patch value</h4>\n\n\n\n<p>You can make use of the&nbsp;<code>patchValue</code>&nbsp;to change the only few fields anytime. The control property of the&nbsp;<code>ngForm</code>&nbsp;returns the reference to the top level&nbsp;<code>FormGroup</code>. Then, you can make use of the&nbsp;<code>patchValue</code>&nbsp;method to change only&nbsp;<code>firstname</code>,&nbsp;<code>lastname</code>&nbsp;&amp;&nbsp;<code>email</code>&nbsp;fields</p>\n\n\n\n<pre class=\"wp-block-code\"><code>patchValue() {    let obj = {      firstname: \"Rahul\",      lastname: \"Dravid\",      email: \"rahul@gmail.com\",    };     this.contactForm.control.patchValue(obj);   } </code></pre>\n\n\n\n<h4>Set value of nested FormGroup</h4>\n\n\n\n<p>You can update nested&nbsp;<code>FormGroup</code>&nbsp;by getting a reference to the nested&nbsp;<code>FormGroup</code>&nbsp;from the&nbsp;<code>controls</code>&nbsp;collection of&nbsp;<code>ngForm</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>changeAddress() {\r\n    let obj = {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600100\"\r\n    };\r\n    let address= this.contactForm.controls&#91;\"address\"] as FormGroup\r\n    address.patchValue(obj);\r\n \r\n  }\r\n </code></pre>\n\n\n\n<p><strong>The complete code.</strong></p>\n\n\n\n<h2>app.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { NgForm, FormGroup } from '@angular/forms';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'Template driven forms';\r\n \r\n  @ViewChild('contactForm', null) contactForm: NgForm;\r\n \r\n  countryList: country&#91;] = &#91;\r\n    new country(\"1\", \"India\"),\r\n    new country('2', 'USA'),\r\n    new country('3', 'England')\r\n  ];\r\n \r\n  contact: contact;\r\n \r\n  ngOnInit() {\r\n \r\n    this.contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: {\r\n        city: \"Mumbai\",\r\n        street: \"Perry Cross Rd\",\r\n        pincode: \"400050\"\r\n      }\r\n    };\r\n \r\n    setTimeout(() => {\r\n      this.contactForm.setValue(this.contact);\r\n    });\r\n \r\n  }\r\n \r\n  onSubmit() {\r\n    console.log(this.contactForm.value);\r\n  }\r\n \r\n  setDefaults() {\r\n    this.contactForm.setValue(this.contact);\r\n  }\r\n \r\n  changeCountry() {\r\n    this.contactForm.controls&#91;\"country\"].setValue(\"1\");\r\n  }\r\n \r\n  patchValue() {\r\n    let obj = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      email: \"rahul@gmail.com\",\r\n    };\r\n \r\n    this.contactForm.control.patchValue(obj);\r\n \r\n  }\r\n \r\n  changeAddress() {\r\n    let obj = {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600100\"\r\n    };\r\n    let address= this.contactForm.controls&#91;\"address\"] as FormGroup\r\n    address.patchValue(obj);\r\n \r\n  }\r\n \r\n  reset() {\r\n    this.contactForm.reset();\r\n  }\r\n \r\n  resetForm() {\r\n    this.contactForm.resetForm();\r\n  }\r\n}\r\n \r\n \r\nexport class contact {\r\n  firstname: string;\r\n  lastname: string;\r\n  email: string;\r\n  gender: string;\r\n  isMarried: boolean;\r\n  country: string;\r\n  address: {\r\n    city: string;\r\n    street: string;\r\n    pincode: string;\r\n  }\r\n}\r\n \r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}  </code></pre>\n\n\n\n<h2>app.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>  &lt;form #contactForm=\"ngForm\" (ngSubmit)=\"onSubmit(contactForm)\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\"  ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder &lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" ngModel> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" ngModel> Female\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married &lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"country\">country &lt;/label>\r\n \r\n    &lt;select id=\"country\" name=\"country\" ngModel>\r\n      &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n        {{c.name}}\r\n      &lt;/option>\r\n    &lt;/select>\r\n \r\n  &lt;/p>\r\n \r\n  &lt;div ngModelGroup=\"address\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"city\">City&lt;/label>\r\n      &lt;input type=\"text\" id=\"city\" name=\"city\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"street\">Street&lt;/label>\r\n      &lt;input type=\"text\" id=\"street\" name=\"street\" ngModel>\r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n      &lt;input type=\"text\" id=\"pincode\" name=\"pincode\"  ngModel>\r\n    &lt;/p>\r\n \r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"button\" (click)=\"changeCountry()\">Change Country&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"setDefaults()\">Set Defaults&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"patchValue()\">Patch Value&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"changeAddress()\">Change Address&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"reset()\">Reset&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"resetForm()\">Reset Form&lt;/button>\r\n  &lt;/p>\r\n \r\n  &lt;b>valid&lt;/b> {{contactForm.valid}} \r\n  &lt;b>touched&lt;/b> {{contactForm.touched}} \r\n  &lt;b>pristine&lt;/b> {{contactForm.pristine}} \r\n  &lt;b>dirty&lt;/b> {{contactForm.dirty}} \r\n \r\n&lt;/form>\r\n </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/09/Angular-Set-Value-in-template-driven-forms.gif\" alt=\"Angular Set Value in template driven forms\" class=\"wp-image-14240\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Template The following is the&nbsp;app.component.html&nbsp;from the&nbsp;angular template-driven forms tutorial. Before we set the default value, it is better to create a model class for the above form. Open the&nbsp;app.component.ts&nbsp;and add the following class BEST ANGULAR BOOKSThe Top 8&nbsp;Best Angular Books, which helps you to get started with Angular&nbsp;&nbsp; Set value in template-driven forms There are [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3590" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3590"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3590/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3813,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3590/revisions/3813"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3590"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3590"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3590"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3593,
    "date": "2020-12-05T05:43:38",
    "date_gmt": "2020-12-05T05:43:38",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3593" },
    "modified": "2020-12-09T05:27:14",
    "modified_gmt": "2020-12-09T05:27:14",
    "slug": "angular-reactive-forms-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-reactive-forms-example/",
    "title": { "rendered": "Angular Reactive Forms Example" },
    "content": {
      "rendered": "\n<h2>What are Reactive Forms?</h2>\n\n\n\n<p>Reactive forms are forms where we define the structure of the form in the component class. I,e we create the form model with Form Groups, Form Controls, and Form Arrays. We also define the validation rules in the component class. Then, we bind it to the HTML form in the template. This is different from the template-driven forms, where we define the logic and controls in the HTML template.</p>\n\n\n\n<h2>How to use Reactive Forms</h2>\n\n\n\n<ol><li>Import&nbsp;<code>ReactiveFormsModule</code></li><li>Create Form Model in component class using Form Group, Form Control &amp; Form Arrays</li><li>Create the HTML Form resembling the Form Model.</li><li>Bind the HTML Form to the Form Model</li></ol>\n\n\n\n<h2>Reactive Forms Example Application</h2>\n\n\n\n<p>Use&nbsp;<code>ng new</code>&nbsp;to create a new application</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ng new mdf  --routing=true --style=css </code></pre>\n\n\n\n<p>Run&nbsp;<code>ng serve</code>&nbsp;and verify if everything is installed correctly.</p>\n\n\n\n<h2>Import ReactiveFormsModule</h2>\n\n\n\n<p>To work with Reactive forms, we must import the&nbsp;<code>ReactiveFormsModule</code>. We usually import it in root module or in a shared module. The&nbsp;<code>ReactiveFormsModule</code>&nbsp;contains all the form directives and constructs for working with angular reactive forms.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<h2>Model</h2>\n\n\n\n<p>In the&nbsp;template-driven approach, we used&nbsp;<code>ngModel</code>&nbsp;&amp;&nbsp;<code>ngModelGroup</code>&nbsp;directive on the HTML elements. The&nbsp;<code>FormsModule</code>&nbsp;created the&nbsp;<code>FormGroup</code>&nbsp;&amp;&nbsp;<code>FormControl</code>&nbsp;instances from the template. This happens behind the scene.</p>\n\n\n\n<p>In Reactive&nbsp;Forms approach, It is our responsibility to build the Model using&nbsp;<code>FormGroup</code>,&nbsp;<code>FormControl</code>&nbsp;and&nbsp;<code>FormArray</code>.</p>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>,&nbsp;<code>FormControl</code>&nbsp;&amp;&nbsp;<code>FormArray</code>&nbsp;are the three building blocks of the Angular Forms. We learned about them in&nbsp;Angular Forms Tutorial.</p>\n\n\n\n<p><code>FormControl</code>&nbsp;encapsulates the state of a&nbsp;<strong><em>single form element</em></strong>&nbsp;in our form. It stores the value and state of the form element and helps us to interact with them using properties &amp; methods.</p>\n\n\n\n<p><code>FormGroup</code>&nbsp;represents a collection of&nbsp;form Controls. It can also contain form groups and form arrays. In fact,&nbsp;an angular form is a&nbsp;<code>FormGroup</code>.</p>\n\n\n\n<p>Letâ€™s create the model for our Form.</p>\n\n\n\n<p>First, we need to import&nbsp;<code>FormGroup</code>,&nbsp;<code>FormControl</code>&nbsp;&amp;&nbsp;<code>Validator</code>&nbsp;from the&nbsp;<code>@angular/forms</code>. Open the&nbsp;<code>app.component.ts</code>&nbsp;and the add following import statement.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { FormGroup, FormControl, Validators } from '@angular/forms' </code></pre>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8&nbsp;Best Angular Books, which helps you to get started with Angular&nbsp;</strong>&nbsp;</p>\n\n\n\n<h3>FormGroup</h3>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>&nbsp;is created with the following syntax</p>\n\n\n\n<pre class=\"wp-block-code\"><code> contactForm = new FormGroup({}) </code></pre>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>&nbsp;takes 3 arguments. a collection of a child&nbsp;<code>FormControl</code>, a&nbsp;<code>validator</code>, and an&nbsp;<code>asynchronous validator</code>. The validators are optional.</p>\n\n\n\n<h3>FormControl</h3>\n\n\n\n<p>The first argument to&nbsp;<code>FormGroup</code>&nbsp;is the collection of&nbsp;<code>FormControl</code>. They are added using the&nbsp;<code>FormControl</code>&nbsp;method as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> contactForm = new FormGroup({\r\n  firstname: new FormControl(),\r\n  lastname: new FormControl(),\r\n  email: new FormControl(),\r\n  gender: new FormControl(),\r\n  isMarried: new FormControl(),\r\n  country: new FormControl()\r\n})</code></pre>\n\n\n\n<p>In the above, we have created an instance of a&nbsp;<code>FormGroup</code>&nbsp;and named it&nbsp;as&nbsp;<code>contactForm</code>.&nbsp;<code>contactForm</code>&nbsp;is our top-level&nbsp;<code>FormGroup</code>. Under the&nbsp;<code>contactForm</code>, we have five&nbsp;<code>FormControl</code>&nbsp;instances each representing the properties&nbsp;<code>firstname</code>.&nbsp;<code>lastname</code>.<code>email</code>,&nbsp;<code>gender</code>,&nbsp;<code>ismarried</code>&nbsp;&amp;&nbsp;<code>country</code>.</p>\n\n\n\n<p>The Other two arguments to&nbsp;<code>FormGroup</code>&nbsp;are&nbsp;<code>Sync Validator</code>&nbsp;&amp;&nbsp;<code>Async Validator</code>. They are optional.</p>\n\n\n\n<h2>HTML Form</h2>\n\n\n\n<p>The next task is to build an HTML form. The following is a regular HTML&nbsp;<code>form</code>. We enclose it in a&nbsp;<code>&lt;form&gt;</code>&nbsp;tag. We have included two text input (FirstName &amp; LastName), an email field, a radio button (gender), a checkbox (isMarried), and a select list (country). These are Form elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder &lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\"> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\"> Female\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married &lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"country\">country &lt;/label>\r\n    &lt;select id=\"country\" name=\"country\">\r\n      &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n        {{c.name}}\r\n      &lt;/option>\r\n    &lt;/select>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form></code></pre>\n\n\n\n<h3>Binding the template to the model</h3>\n\n\n\n<p>Now we need to associate our model to the Template. We need to tell angular that we have a model for the form.</p>\n\n\n\n<p>This is done using the&nbsp;<code>formGroup</code>&nbsp;directive as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;formGroup]=\"contactForm\"> </code></pre>\n\n\n\n<p>We have used the square&nbsp;bracket (one-way binding) around&nbsp;<code>FormGroup</code>&nbsp;directive and set that equal the model.</p>\n\n\n\n<p>Next, we need to bind form fields to the&nbsp;<code>FormControl</code>&nbsp;models. We use the&nbsp;<code>FormControlName</code>&nbsp;directive for this. We add this directive to every form field element in our form. The value is set to the name of the corresponding&nbsp;<code>FormControl</code>&nbsp;instance in the component class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n&lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n </code></pre>\n\n\n\n<h3>Submit form</h3>\n\n\n\n<p>We submit the form data to the component using the&nbsp;Angular directive&nbsp;named&nbsp;<code>ngSubmit</code>. &nbsp;Note that we already have a&nbsp;<code>submit</code>&nbsp;button in our form. The&nbsp;<code>ngSubmit</code>&nbsp;directive binds itself to the click event of the&nbsp;<code>submit</code>&nbsp;button. We are using&nbsp;event binding&nbsp;(parentheses) to bind&nbsp;<code>ngSubmit</code>&nbsp;to&nbsp;<code>OnSubmit</code>&nbsp;method.&nbsp;When the user clicks on the&nbsp;<code>submit</code>&nbsp;button&nbsp;<code>ngSubmit</code>&nbsp;invokes the&nbsp;<code>OnSubmit</code>&nbsp;method on the Component class</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form &#91;formGroup]=\"contactForm\" (ngSubmit)=\"onSubmit()\"> </code></pre>\n\n\n\n<h2>Final Template</h2>\n\n\n\n<p>Our Final Template is as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form &#91;formGroup]=\"contactForm\" (ngSubmit)=\"onSubmit()\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\" formControlName=\"email\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder &lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" formControlName=\"gender\"> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" formControlName=\"gender\"> Female\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married &lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" formControlName=\"isMarried\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"country\">country &lt;/label>\r\n    &lt;select id=\"country\" name=\"country\"  formControlName=\"country\">\r\n      &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n        {{c.name}}\r\n      &lt;/option>\r\n    &lt;/select>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form></code></pre>\n\n\n\n<h3>Receive the data in the Component class</h3>\n\n\n\n<p>The last step is to receive the form data in the component class. All we need to do is to create the&nbsp;<code>onSubmit</code>&nbsp;method in our component class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> onSubmit() {  console.log(this.contactForm.value);} </code></pre>\n\n\n\n<p>We are using the&nbsp;<code>console.log(this.contactForm.value)</code>&nbsp;to send the value of our form data to the console window.</p>\n\n\n\n<h3>Test the form</h3>\n\n\n\n<p>Now you can run the app and see the result. Open the developer console and see the value returned by the&nbsp;<code>contactForm</code>.value. The values of the form are returned as&nbsp;<code>JSON</code>&nbsp;object as shown below, which you can pass it your backend API to persist the information to the database.</p>\n\n\n\n<h2>FormControl</h2>\n\n\n\n<p>A&nbsp;<code>FormControl</code>&nbsp;takes 3 arguments. a default value, a validator and an asynchronous validator. All of them are optional.</p>\n\n\n\n<h3>Default Value</h3>\n\n\n\n<p>You can pass a default value as either as a string or as an object of key-value pair. When you pass object you can set both the value and the whether or not the control is disabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> //Setting Default value as stringfirstname= new FormControl(â€˜Sachinâ€™); \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> //Setting Default value &amp; disabled state as objectfirstname: new FormControl({value: â€˜Rahulâ€™, disabled: true}), </code></pre>\n\n\n\n<h3>Sync Validator</h3>\n\n\n\n<p>The second parameter is an array of sync Validators. Angular has some built-in Validators such as&nbsp;<code>required</code>&nbsp;and&nbsp;<code>minLength</code>&nbsp;etc.</p>\n\n\n\n<p>You can pass with Validator function as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> firstname: new FormControl('', &#91;Validators.required,Validators.minLength(10)]), </code></pre>\n\n\n\n<h3>Asynchronous validator</h3>\n\n\n\n<p>The third argument is the Async Validator. The syntax of Async Validators is similar to Sync Validators.</p>\n\n\n\n<p>More on validation in our next tutorial Validations in Reactive forms.</p>\n\n\n\n<h2>Grouping the controls using FormGroup</h2>\n\n\n\n<p>We can group various form controls together. For Example fields such as street, city, and Pincode each will have their own form control, but can be grouped together as an address form group</p>\n\n\n\n<pre class=\"wp-block-code\"><code>contactForm = new FormGroup({\r\n  firstname: new FormControl(),\r\n  lastname: new FormControl(),\r\n  email: new FormControl(),\r\n  gender: new FormControl(),\r\n  isMarried: new FormControl(),\r\n  country: new FormControl(),\r\n  address:new FormGroup({\r\n    city: new FormControl(),\r\n    street: new FormControl(),\r\n    pincode:new FormControl()\r\n  })\r\n})</code></pre>\n\n\n\n<p>In the code above, we have created new&nbsp;<code>FormGroup</code>&nbsp;Address&nbsp;and added three&nbsp;form controls&nbsp;i.e&nbsp;<code>city</code>,&nbsp;<code>street</code>&nbsp;&amp;&nbsp;<code>Pincode</code></p>\n\n\n\n<p>In the template use the&nbsp;<code>formGroupName</code>&nbsp;directive to enclose the control using a&nbsp;<code>div</code>&nbsp;element as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    &lt;div formGroupName=\"address\">\r\n  \r\n    &lt;div class=\"form-group\">\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"city\" formControlName=\"city\" >\r\n    &lt;/div>\r\n \r\n    &lt;div class=\"form-group\">\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"street\" formControlName=\"street\" >\r\n    &lt;/div>\r\n \r\n    &lt;div class=\"form-group\">\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"pincode\" formControlName=\"pincode\">\r\n    &lt;/div>\r\n \r\n  &lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What are Reactive Forms? Reactive forms are forms where we define the structure of the form in the component class. I,e we create the form model with Form Groups, Form Controls, and Form Arrays. We also define the validation rules in the component class. Then, we bind it to the HTML form in the template. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3593" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3593"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3593/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3814,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3593/revisions/3814"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3593"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3593"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3593"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3595,
    "date": "2020-12-05T05:47:42",
    "date_gmt": "2020-12-05T05:47:42",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3595" },
    "modified": "2020-12-09T05:28:32",
    "modified_gmt": "2020-12-09T05:28:32",
    "slug": "using-angular-formbuilder-to-build-forms",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/using-angular-formbuilder-to-build-forms/",
    "title": { "rendered": "Using Angular FormBuilder to build Forms" },
    "content": {
      "rendered": "\n<h2>What is FormBuilder</h2>\n\n\n\n<p>The&nbsp;<code>FormBuilder</code>&nbsp;is the helper API to build forms in Angular.&nbsp; It provides shortcuts to create the instance of the&nbsp;<code>FormControl</code>,&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>. It reduces the code required to write the complex forms.</p>\n\n\n\n<h2>How to use FormBuilder</h2>\n\n\n\n<h3>Import &amp; inject FormBuilder API</h3>\n\n\n\n<p>To use the&nbsp;<code>FormBuilder</code>, first, we need to&nbsp;<code>import</code>&nbsp;it in our component</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { FormBuilder } from '@angular/forms' </code></pre>\n\n\n\n<p>Next, we need to inject it into our component class</p>\n\n\n\n<pre class=\"wp-block-code\"><code> constructor(private formBuilder: FormBuilder) {} </code></pre>\n\n\n\n<p>Finally, use the&nbsp;<code>group</code>,&nbsp;<code>array</code>&nbsp;&amp;&nbsp;<code>control</code>&nbsp;methods to build the&nbsp;<code>FormModel</code></p>\n\n\n\n<h3>FormGroup</h3>\n\n\n\n<p>We use the&nbsp;<code>group</code>&nbsp;method to build the Form Group. We pass the list of&nbsp;Form Controls,&nbsp;Form Array, or another&nbsp;Form Group&nbsp;to the&nbsp;<code>group</code>&nbsp;method as key-value pair. Where the key is the name of the&nbsp;<code>FormControl</code>,&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>. The value is the configuration of the control.</p>\n\n\n\n<p>In the following example, we have added six form controls. The First argument to the FormControl is the initial value, which we set to empty string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.contactForm = this.formBuilder.group({\r\n  firstname: &#91;''],\r\n  lastname: &#91;''],\r\n  email: &#91;''],\r\n  gender: &#91;''],\r\n  isMarried: &#91;''],\r\n  country: &#91;''],\r\n});</code></pre>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8&nbsp;Best Angular Books, which helps you to get started with Angular&nbsp;</strong>&nbsp;</p>\n\n\n\n<h3>Nested FormGroup</h3>\n\n\n\n<p>Creating a Nested FormGroup is just as easy. use the&nbsp;<code>formbuilder.group</code>&nbsp;method, as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.contactForm = this.formBuilder.group({\r\n  firstname: &#91;''],\r\n  lastname: &#91;''],\r\n  email: &#91;''],\r\n  gender: &#91;''],\r\n  isMarried: &#91;''],\r\n  country: &#91;''],\r\n  address: this.formBuilder.group({\r\n    city: &#91;''],\r\n    street: &#91;''],\r\n    pincode: &#91;'']\r\n  })\r\n})</code></pre>\n\n\n\n<h3>Validations</h3>\n\n\n\n<p>The second argument to the FormControl is the list of sync validators. The following example shows how to add validators.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.contactForm = this.formBuilder.group({\r\n  firstname: &#91;'', &#91;Validators.required, Validators.minLength(10)]],\r\n  lastname: &#91;'', &#91;Validators.required, Validators.maxLength(15), Validators.pattern(\"^&#91;a-zA-Z]+$\")]],\r\n  email: &#91;'', &#91;Validators.required, Validators.email]],\r\n  gender: &#91;'', &#91;Validators.required]],\r\n  isMarried: &#91;'', &#91;Validators.required]],\r\n  country: &#91;'', &#91;Validators.required]],\r\n  address: this.formBuilder.group({\r\n    city: &#91;'', &#91;Validators.required]],\r\n    street: &#91;'', &#91;Validators.required]],\r\n    pincode: &#91;'', &#91;Validators.required]],\r\n  })\r\n});</code></pre>\n\n\n\n<h2>FormBuilder Example</h2>\n\n\n\n<p>We learned how to build reactive forms the&nbsp;Angular Reactive forms tutorial.</p>\n\n\n\n<p><strong>app.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms'\r\nimport { FormBuilder } from '@angular/forms'\r\nimport { groupBy } from 'rxjs/internal/operators/groupBy';\r\n \r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n \r\n  title = 'Angular Reactive forms';\r\n \r\n  contactForm;\r\n \r\n  constructor(private formBuilder: FormBuilder) {\r\n \r\n \r\n \r\n    // this.contactForm = this.formBuilder.group({\r\n    //   firstname: &#91;''],\r\n    //   lastname: &#91;''],\r\n    //   email: &#91;''],\r\n    //   gender: &#91;''],\r\n    //   isMarried: &#91;''],\r\n    //   country: &#91;''],\r\n    // });\r\n \r\n    // this.contactForm = this.formBuilder.group({\r\n    //   firstname: &#91;''],\r\n    //   lastname: &#91;''],\r\n    //   email: &#91;''],\r\n    //   gender: &#91;''],\r\n    //   isMarried: &#91;''],\r\n    //   country: &#91;''],\r\n    //   address: this.formBuilder.group({\r\n    //     city: &#91;''],\r\n    //     street: &#91;''],\r\n    //     pincode: &#91;'']\r\n    //   })\r\n    // });\r\n \r\n    this.contactForm = this.formBuilder.group({\r\n      firstname: &#91;'', &#91;Validators.required, Validators.minLength(10)]],\r\n      lastname: &#91;'', &#91;Validators.required, Validators.maxLength(15), Validators.pattern(\"^&#91;a-zA-Z]+$\")]],\r\n      email: &#91;'', &#91;Validators.required, Validators.email]],\r\n      gender: &#91;'', &#91;Validators.required]],\r\n      isMarried: &#91;'', &#91;Validators.required]],\r\n      country: &#91;'', &#91;Validators.required]],\r\n      address: this.formBuilder.group({\r\n        city: &#91;'', &#91;Validators.required]],\r\n        street: &#91;'', &#91;Validators.required]],\r\n        pincode: &#91;'', &#91;Validators.required]],\r\n      })\r\n    });\r\n  }\r\n \r\n \r\n  get firstname() {\r\n    return this.contactForm.get('firstname');\r\n  }\r\n \r\n  get lastname() {\r\n    return this.contactForm.get('lastname');\r\n  }\r\n \r\n  get email() {\r\n    return this.contactForm.get('email');\r\n  }\r\n \r\n  get gender() {\r\n    return this.contactForm.get('gender');\r\n  }\r\n \r\n  get isMarried() {\r\n    return this.contactForm.get('isMarried');\r\n  }\r\n \r\n  get country() {\r\n    return this.contactForm.get('country');\r\n  }\r\n \r\n  get city() {\r\n    return this.contactForm.get(\"address\").get('city');\r\n  }\r\n \r\n  get street() {\r\n    return this.contactForm.get(\"address\").get('street');\r\n  }\r\n \r\n  get pincode() {\r\n    return this.contactForm.get(\"address\").get('pincode');\r\n  }\r\n \r\n \r\n  countryList: country&#91;] = &#91;\r\n    new country(\"1\", \"India\"),\r\n    new country('2', 'USA'),\r\n    new country('3', 'England')\r\n  ];\r\n \r\n  onSubmit() {\r\n    console.log(this.contactForm.value);\r\n  }\r\n \r\n}\r\n \r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}   </code></pre>\n\n\n\n<p><strong>app.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div style=\"float: left; width:50%;\">\r\n \r\n&lt;form &#91;formGroup]=\"contactForm\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n  &lt;/p>\r\n \r\n  &lt;div\r\n    *ngIf=\"!firstname?.valid &amp;&amp; (firstname?.dirty ||firstname?.touched)\">\r\n    &lt;div &#91;hidden]=\"!firstname.errors.required\">\r\n      First Name is required\r\n    &lt;/div>\r\n    &lt;div &#91;hidden]=\"!firstname.errors.minlength\">\r\n      Min Length is 10\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n  &lt;/p>\r\n \r\n  &lt;div *ngIf=\"!lastname.valid &amp;&amp; (lastname.dirty ||lastname.touched)\">\r\n    &lt;div &#91;hidden]=\"!lastname.errors.pattern\">\r\n      Only characters are allowed\r\n    &lt;/div>\r\n    &lt;div &#91;hidden]=\"!lastname.errors.maxLength\">\r\n      Max length allowed is {{lastname.errors.maxlength?.requiredLength}} \r\n    &lt;/div>\r\n    &lt;div &#91;hidden]=\"!lastname.errors.required\">\r\n      Last Name is required\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\" formControlName=\"email\">\r\n  &lt;/p>\r\n  &lt;div *ngIf=\"!email.valid &amp;&amp; (email.dirty ||email.touched)\">\r\n    &lt;div &#91;hidden]=\"!email.errors.required\">\r\n      email is required\r\n    &lt;/div>\r\n    &lt;div &#91;hidden]=\"!email.errors.email\">\r\n      invalid email id\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n \r\n  &lt;p>\r\n    &lt;label for=\"gender\">Geneder &lt;/label>\r\n    &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" formControlName=\"gender\"> Male\r\n    &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" formControlName=\"gender\"> Female\r\n  &lt;/p>\r\n  &lt;div *ngIf=\"!gender.valid &amp;&amp; (gender.dirty ||gender.touched)\">\r\n    &lt;div &#91;hidden]=\"!gender.errors.required\">\r\n      gender is required\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"isMarried\">Married &lt;/label>\r\n    &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" formControlName=\"isMarried\">\r\n  &lt;/p>\r\n  &lt;div *ngIf=\"!isMarried.valid &amp;&amp; (isMarried.dirty ||isMarried.touched)\">\r\n    &lt;div &#91;hidden]=\"!isMarried.errors.required\">\r\n      isMarried is required\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n \r\n  &lt;p>\r\n    &lt;label for=\"country\">country &lt;/label>\r\n    &lt;select id=\"country\" name=\"country\" formControlName=\"country\">\r\n      &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n        {{c.name}}\r\n      &lt;/option>\r\n    &lt;/select>\r\n  &lt;/p>\r\n  &lt;div *ngIf=\"!country.valid &amp;&amp; (country.dirty ||country.touched)\">\r\n    &lt;div &#91;hidden]=\"!country.errors.required\">\r\n      country is required\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n  &lt;div formGroupName=\"address\">\r\n \r\n    &lt;div class=\"form-group\">\r\n      &lt;label for=\"city\">City&lt;/label>\r\n      &lt;input type=\"text\" class=\"form-control\" name=\"city\" formControlName=\"city\">\r\n    &lt;/div>\r\n    &lt;div *ngIf=\"!city.valid &amp;&amp; (city.dirty ||city.touched)\">\r\n      &lt;div &#91;hidden]=\"!city.errors.required\">\r\n        city is required\r\n      &lt;/div>\r\n    &lt;/div>\r\n \r\n \r\n    &lt;div class=\"form-group\">\r\n      &lt;label for=\"street\">Street&lt;/label>\r\n      &lt;input type=\"text\" class=\"form-control\" name=\"street\" formControlName=\"street\">\r\n    &lt;/div>\r\n    &lt;div *ngIf=\"!street.valid &amp;&amp; (street.dirty ||street.touched)\">\r\n      &lt;div &#91;hidden]=\"!street.errors.required\">\r\n        street is required\r\n      &lt;/div>\r\n    &lt;/div>\r\n \r\n    &lt;div class=\"form-group\">\r\n      &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n      &lt;input type=\"text\" class=\"form-control\" name=\"pincode\" formControlName=\"pincode\">\r\n    &lt;/div>\r\n    &lt;div *ngIf=\"!pincode.valid &amp;&amp; (pincode.dirty ||pincode.touched)\">\r\n      &lt;div &#91;hidden]=\"!pincode.errors.required\">\r\n        pincode is required\r\n      &lt;/div>\r\n    &lt;/div>\r\n \r\n  &lt;/div> \r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\" &#91;disabled]=\"!contactForm.valid\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form>\r\n \r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n \r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>valid : &lt;/b>{{contactForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{contactForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{contactForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{contactForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{contactForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{contactForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{contactForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{contactForm.enabled}}\r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{contactForm.value |json}}\r\n \r\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is FormBuilder The&nbsp;FormBuilder&nbsp;is the helper API to build forms in Angular.&nbsp; It provides shortcuts to create the instance of the&nbsp;FormControl,&nbsp;FormGroup&nbsp;or&nbsp;FormArray. It reduces the code required to write the complex forms. How to use FormBuilder Import &amp; inject FormBuilder API To use the&nbsp;FormBuilder, first, we need to&nbsp;import&nbsp;it in our component Next, we need to inject [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3595" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3595"
        }
      ],
      "version-history": [
        {
          "count": 3,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3595/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3816,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3595/revisions/3816"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3595"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3595"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3595"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3597,
    "date": "2020-12-05T05:54:27",
    "date_gmt": "2020-12-05T05:54:27",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3597" },
    "modified": "2020-12-09T05:32:30",
    "modified_gmt": "2020-12-09T05:32:30",
    "slug": "setvalue-patchvalue-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/setvalue-patchvalue-in-angular/",
    "title": { "rendered": "SetValue &#038; PatchValue in Angular" },
    "content": {
      "rendered": "\n<h2>SetValue</h2>\n\n\n\n<p><code>setValue(value: { [key: string]: any; }, options: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<p>We use the&nbsp;<code>SetValue</code>&nbsp;to update the&nbsp;<code>FormControl</code>&nbsp;,&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>. When we use it to update the&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>&nbsp;the&nbsp;<code>SetValue</code>&nbsp;requires that the object must match the structure of the&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>&nbsp;exactly. Otherwise, it will result in an error.</p>\n\n\n\n<h2>PatchValue</h2>\n\n\n\n<p><code>patchValue(value: { [key: string]: any; }, options: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<p>The&nbsp;<code>PatchValue</code>&nbsp;is used to update only a subset of the elements of the&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>. It will only update the matching objects and ignores the rest.</p>\n\n\n\n<h3>onlySelf</h3>\n\n\n\n<p>The Angular checks the validation status of the form, whenever there is a change in value.&nbsp;The validation&nbsp;starts from the control whose value was changed and propagates to the top level&nbsp;<code>FormGroup</code>. This is the default behavior</p>\n\n\n\n<p>There may be circumstances, where you do not want angular to check the validity of the entire form, whenever you change the value using the&nbsp;<code>setValue</code>&nbsp;or&nbsp;<code>patchValue</code>. We do that by setting the&nbsp;<code>onlySelf=true</code>&nbsp;as the argument. In such cases, the angular only checks the validity of the current control, but does not check any other control and does not propagate the validity checking to the parent form group.</p>\n\n\n\n<h3>emitEvent</h3>\n\n\n\n<p>The Angular forms emit two events. One is&nbsp;<code>ValueChanges</code>&nbsp;&amp; the other one is&nbsp;<code>StatusChanges</code>. The&nbsp;<code>ValueChanges</code>&nbsp;event is emitted whenever the value of the form is changed. The&nbsp;<code>StatusChanges</code>&nbsp;event is emitted whenever angular calculates the validation status of the Form. This is the default behavior</p>\n\n\n\n<p>We can stop that from happening, by setting the&nbsp;<code>emitEvent=false</code></p>\n\n\n\n<h2>SetValue Vs PatchValue</h2>\n\n\n\n<p>The difference is that with&nbsp;<code>setValue</code>&nbsp;we must include all the controls, while with the&nbsp;<code>patchValue</code>&nbsp;you can exclude some controls.</p>\n\n\n\n<h2>Example form setup</h2>\n\n\n\n<p>Create a new angular application. Import both&nbsp;<code>FormsModule</code>,&nbsp;<code>ReactiveFormsModule</code>&nbsp;from&nbsp;<code>@angular/forms</code>. Also add it into the&nbsp;<code>imports</code>&nbsp;metadata</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplateComponent } from './template-component';\r\nimport { ReactiveComponent } from './reactive.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent,TemplateComponent,ReactiveComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>Create two new components&nbsp;<code>reactive.component.ts</code>&nbsp;&amp;&nbsp;<code>template-component.ts</code>&nbsp;with their respective templates. Also, update the&nbsp;<code>app.component.ts</code>&nbsp;&amp; its template as shown below</p>\n\n\n\n<h2>app.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component} from '@angular/core';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n}</code></pre>\n\n\n\n<h2>app.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Angular Forms SetValue &amp; PatchValue Example&lt;/h1>\r\n \r\n&lt;ul>\r\n  &lt;li>\r\n    &lt;a &#91;routerLink]=\"&#91;'/template']\" routerLinkActive=\"router-link-active\" >Template&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n    &lt;a &#91;routerLink]=\"&#91;'/reactive']\" routerLinkActive=\"router-link-active\" >Reactive&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul>\r\n \r\n&lt;router-outlet>&lt;/router-outlet> </code></pre>\n\n\n\n<h2>SetValue &amp; PatchValue in Reactive Forms</h2>\n\n\n\n<p>Here is our&nbsp;<code>template-component.ts</code>&nbsp;&amp;&nbsp;<code>template-component.html</code>.</p>\n\n\n\n<h2>reactive-component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms'\r\n \r\n \r\n@Component({\r\n  templateUrl: './reactive.component.html',\r\n})\r\nexport class ReactiveComponent implements OnInit {\r\n  title = 'Reactive Forms';\r\n \r\n \r\n  countryList: country&#91;] = &#91;\r\n    new country(\"1\", \"India\"),\r\n    new country('2', 'USA'),\r\n    new country('3', 'England')\r\n  ];\r\n \r\n  // reactiveForm = new FormGroup({\r\n  //   firstname: new FormControl('Sachin'),\r\n  //   lastname: new FormControl('Tendulkar'),\r\n  //   email: new FormControl('sachin@gmail.com'),\r\n  //   gender: new FormControl('male'),\r\n  //   isMarried: new FormControl(true),\r\n  //   country: new FormControl('2'),\r\n  //   address:new FormGroup({\r\n  //     city: new FormControl(\"Mumbai\"),\r\n  //     street: new FormControl(\"Perry Cross Rd\"),\r\n  //     pincode:new FormControl(\"400050\")\r\n  //   })\r\n  // })\r\n \r\n  reactiveForm = new FormGroup({\r\n    firstname: new FormControl(),\r\n    lastname: new FormControl(),\r\n    email: new FormControl(),\r\n    gender: new FormControl(),\r\n    isMarried: new FormControl(),\r\n    country: new FormControl(),\r\n    address:new FormGroup({\r\n      city: new FormControl(),\r\n      street: new FormControl(),\r\n      pincode:new FormControl()\r\n    })\r\n  })\r\n \r\n  onSubmit() {\r\n    console.log(this.reactiveForm.value);\r\n  }\r\n \r\n  ngOnInit() {\r\n    this.setDefault();\r\n  }\r\n \r\n  setDefault() {\r\n \r\n    let contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: {\r\n        city: \"Mumbai\",\r\n        street: \"Perry Cross Rd\",\r\n        pincode: \"400050\"\r\n      }\r\n    };\r\n \r\n    this.reactiveForm.setValue(contact);\r\n  }\r\n \r\n  setValue() {\r\n \r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      email: \"rahul@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"1\",\r\n      address: {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    };\r\n \r\n    this.reactiveForm.setValue(contact);\r\n  }\r\n \r\n  setAddress() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600070\",\r\n    };\r\n \r\n    this.reactiveForm.get(\"address\").setValue(address);\r\n \r\n  };\r\n \r\n  setCountry() {\r\n \r\n    this.reactiveForm.get(\"country\").setValue(\"1\");\r\n \r\n  };\r\n \r\n \r\n  patchAddress() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      //pincode: \"600070\",\r\n      //firstname:'saurv'\r\n    };\r\n \r\n    this.reactiveForm.get(\"address\").patchValue(address);\r\n \r\n  }\r\n \r\n  patchName() {\r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n    }\r\n \r\n    this.reactiveForm.patchValue(contact);\r\n \r\n  }\r\n \r\n  reset() {\r\n    this.reactiveForm.reset();\r\n  }\r\n \r\n}\r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}</code></pre>\n\n\n\n<h2>reactive-component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>{{title}}&lt;/h3>\r\n \r\n&lt;div style=\"float: left; width:50%;\">\r\n \r\n  &lt;form &#91;formGroup]=\"reactiveForm\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"email\">Email &lt;/label>\r\n      &lt;input type=\"text\" id=\"email\" name=\"email\" formControlName=\"email\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"gender\">Geneder &lt;/label>\r\n      &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" formControlName=\"gender\"> Male\r\n      &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" formControlName=\"gender\"> Female\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"isMarried\">Married &lt;/label>\r\n      &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" formControlName=\"isMarried\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"country\">country &lt;/label>\r\n      &lt;select id=\"country\" name=\"country\" formControlName=\"country\">\r\n        &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n          {{c.name}}\r\n        &lt;/option>\r\n      &lt;/select>\r\n    &lt;/p>\r\n \r\n \r\n    &lt;div formGroupName=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"city\" formControlName=\"city\">\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"street\" formControlName=\"street\">\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"pincode\" formControlName=\"pincode\">\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n \r\n    &lt;button>Submit&lt;/button>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"setDefault()\">Default&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"setValue()\">SetValue&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setAddress()\">Address&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setCountry()\">Country&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"patchName()\">Name&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"patchAddress()\">Address&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"reset()\">Reset&lt;/button>\r\n    &lt;/div>\r\n \r\n \r\n  &lt;/form>\r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n \r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>valid : &lt;/b>{{reactiveForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{reactiveForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{reactiveForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{reactiveForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{reactiveForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{reactiveForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{reactiveForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{reactiveForm.enabled}}\r\n \r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{reactiveForm.value |json}}\r\n \r\n&lt;/div></code></pre>\n\n\n\n<h3>Setting Initial /Default Value</h3>\n\n\n\n<p>There are two ways, in which set the initial value. One at the time of defining the Form Model as the first argument to the&nbsp;<code>FormControl</code>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>reactiveForm = new FormGroup({\r\n    firstname: new FormControl('Sachin'),\r\n    lastname: new FormControl('Tendulkar'),\r\n    email: new FormControl('sachin@gmail.com'),\r\n    gender: new FormControl('male'),\r\n    isMarried: new FormControl(true),\r\n    country: new FormControl('2'),\r\n    address:new FormGroup({\r\n      city: new FormControl(\"Mumbai\"),\r\n      street: new FormControl(\"Perry Cross Rd\"),\r\n      pincode:new FormControl(\"400050\")\r\n    })\r\n  })</code></pre>\n\n\n\n<p>Another option is to use the&nbsp;<code>setValue</code>&nbsp;in&nbsp;<code>ngOnInit</code>&nbsp;method. To do that, first, create a contact object with the properties exactly matching the Form Model and then invoke the&nbsp;<code>setValue</code>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ngOnInit() {\r\n  this.setDefault();\r\n}\r\n \r\nsetDefault() {\r\n \r\n    let contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: {\r\n        city: \"Mumbai\",\r\n        street: \"Perry Cross Rd\",\r\n        pincode: \"400050\"\r\n      }\r\n    };\r\n \r\n    this.reactiveForm.setValue(contact);\r\n  }\r\n </code></pre>\n\n\n\n<p>The advantageous of the second option is that you can call the&nbsp;<code>setDefault</code>&nbsp;any time and set the default values again.</p>\n\n\n\n<p>As said earlier, the&nbsp;<code>setValue</code>&nbsp;only works, when the properties match exactly. If you remove any of the properties or add a new property, then it will result in an error.</p>\n\n\n\n<p>Ex: if you comment out&nbsp;<code>isMarried</code>&nbsp;field, then you will see the following error in the console window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Must supply a value for form control with name: 'isMarried'. </code></pre>\n\n\n\n<p>Or if you add a new property&nbsp;<code>surname</code>, you will see the following error.</p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code\"><code> Cannot find form control with name: surname. </code></pre>\n</div></div>\n\n\n\n<h3>Nested FormGroup</h3>\n\n\n\n<p>As mentioned earlier, the&nbsp;<code>setValue</code>&nbsp;updates the entire&nbsp;<code>FormGroup</code>. Hence we can update the nested form group separately.</p>\n\n\n\n<p>In the following example, we get the reference to the&nbsp;<code>address</code>&nbsp;form group and then invoke the&nbsp;<code>setValue</code>&nbsp;to update only the address.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> etAddress() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600070\",\r\n    };\r\n \r\n    this.reactiveForm.get(\"address\").setValue(address);\r\n \r\n  };</code></pre>\n\n\n\n<p>Here again, the properties of the address must match completely. Otherwise, it will result in an error.</p>\n\n\n\n<h3>FormControl</h3>\n\n\n\n<p>The value of individual control can be easily set</p>\n\n\n\n<pre class=\"wp-block-code\"><code> setCountry() {\r\n    this.reactiveForm.get(\"country\").setValue(\"1\");\r\n};</code></pre>\n\n\n\n<h2>PatchValue</h2>\n\n\n\n<p>We use&nbsp;<code>patchValue</code>&nbsp;when we want to update only the subset of properties.</p>\n\n\n\n<p>For Example, the following shows how to update only city &amp; street properties using the&nbsp;<code>patchValue</code>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>patchAddress() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n    };\r\n \r\n    this.reactiveForm.get(\"address\").patchValue(address);\r\n  }</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>  patchName() {\r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n    }\r\n \r\n    this.reactiveForm.patchValue(contact);\r\n \r\n  }</code></pre>\n\n\n\n<h2>Reset Form</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>reset() {  this.reactiveForm.reset();} </code></pre>\n\n\n\n<h2>OnlySelf Example</h2>\n\n\n\n<p>The angular forms calculate the validity status of the form, whenever the values of any of the controls on the form change. The validation check starts from the control and is run for the parent control until it reaches the top-level FormGroup.</p>\n\n\n\n<p>We can use the&nbsp;<code>onlySelf:true</code>&nbsp;argument to tell angular not to run validation on the parent control.</p>\n\n\n\n<p>For Example, we have added a&nbsp;<code>required</code>&nbsp;validator to the&nbsp;<code>firstname</code>&nbsp;FormControl. Now enter some text in the firstname field to make the form Valid and then set the value to blank as shown below.&nbsp;<strong>The Form becomes invalid</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> withOutOnlySelf(){    this.reactiveForm.get(\"firstname\").setValue(\"\");  } </code></pre>\n\n\n\n<p>Make the form valid again by entering some text in the firstname field. Now, try the same with&nbsp;<code>onlySelf:true</code>&nbsp;added.&nbsp;<strong>The Form stays Valid</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>withOnlySelf(){    this.reactiveForm.get(\"firstname\").setValue(\"\",{onlySelf:true});  } </code></pre>\n\n\n\n<h2>emitEvent example</h2>\n\n\n\n<p>The Angular forms emit two events. One is&nbsp;<code>ValueChanges</code>&nbsp;&amp; the Other one is&nbsp;<code>statusChanges</code>. You can stop them from happening using the&nbsp;<code>emitEvent:false</code>&nbsp;argument as shown below.</p>\n\n\n\n<p>First, subscribe to&nbsp;<code>statusChanges</code>&nbsp;&amp;&nbsp;<code>valueChanges</code>&nbsp;event at Form Level and also at the control level.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>reset() {\r\n  this.reactiveForm.reset();\r\n}\r\n  </code></pre>\n\n\n\n<p>And then change the value of the firstname and you will see all the four events are fired.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>withouEmitEvent(){  this.reactiveForm.get(\"firstname\").setValue(\"Sachin\");} </code></pre>\n\n\n\n<p>And when you use the&nbsp;<code>emitEvent:false</code>&nbsp;the events are suppressed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>withEmitEvent(){  this.reactiveForm.get(\"firstname\").setValue(\"\",{emitEvent:false});} </code></pre>\n\n\n\n<h2>SetValue &amp; PatchValue in Template-driven Forms</h2>\n\n\n\n<p>You can make use of the&nbsp;<code>setValue</code>&nbsp;&amp;&nbsp;<code>patchValue</code>&nbsp;in&nbsp;template-driven forms&nbsp;also. We learned how to do it in&nbsp;set Value in template-driven forms in the angular&nbsp;tutorial.</p>\n\n\n\n<p>To do that, we first need the reference to the Form model in the template, using the viewchild</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  @ViewChild('templateForm',null) templateForm: NgForm; </code></pre>\n\n\n\n<p>Once, we have the reference, you can make use of&nbsp;<code>SetValue</code>&nbsp;&amp;&nbsp;<code>PatchValue</code>&nbsp;as shown in the following examples. For a more detailed explanation refer to the tutorial&nbsp;Set Value in template-driven forms in the angular</p>\n\n\n\n<h2>template-component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n \r\n \r\n@Component({\r\n  templateUrl: './template.component.html',\r\n})\r\nexport class TemplateComponent implements OnInit {\r\n \r\n  title = 'Template driven forms';\r\n \r\n  @ViewChild('templateForm',null) templateForm: NgForm;\r\n \r\n  countryList: country&#91;] = &#91;\r\n    new country(\"1\", \"India\"),\r\n    new country('2', 'USA'),\r\n    new country('3', 'England')\r\n  ];\r\n \r\n  contact: contact;\r\n  \r\n  onSubmit() {\r\n    console.log(this.templateForm.value);\r\n  }\r\n \r\n  ngOnInit() {\r\n \r\n    setTimeout(() => { \r\n      this.setDefault();\r\n    });\r\n    \r\n  }\r\n \r\n  setDefault() {\r\n \r\n    let contact = {\r\n      firstname: \"Sachin\",\r\n      lastname: \"Tendulkar\",\r\n      email: \"sachin@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"2\",\r\n      address: {\r\n        city: \"Mumbai\",\r\n        street: \"Perry Cross Rd\",\r\n        pincode: \"400050\"\r\n      }\r\n    };\r\n \r\n    this.templateForm.control.setValue(contact);\r\n  }\r\n \r\n \r\n  setValue() {\r\n \r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      email: \"rahul@gmail.com\",\r\n      gender: \"male\",\r\n      isMarried: true,\r\n      country: \"1\",\r\n      address: {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    };\r\n \r\n    this.templateForm.setValue(contact);\r\n  }\r\n \r\n  setAddress() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600070\"\r\n    };\r\n \r\n    this.templateForm.control.get(\"address\").setValue(address);\r\n \r\n  };\r\n \r\n  setCountry() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600070\"\r\n    };\r\n \r\n    this.templateForm.control.get(\"country\").setValue(\"1\");\r\n \r\n  };\r\n \r\n  \r\n  patchAddress() {\r\n \r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      //pincode: \"600070\",\r\n      //firstname:'saurv'\r\n    };\r\n \r\n    this.templateForm.control.get(\"address\").patchValue(address);\r\n \r\n  }\r\n \r\n  patchName() {\r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n    }\r\n \r\n    this.templateForm.control.patchValue(contact);\r\n \r\n  }\r\n \r\n  reset() {\r\n    this.templateForm.reset();\r\n  }\r\n  \r\n}\r\n \r\nexport class contact {\r\n  firstname:string;\r\n  lastname:string;\r\n  gender:string;\r\n  email:string;\r\n  isMarried:boolean;\r\n  country:string;\r\n  address: {\r\n    city:string;\r\n    street:string;\r\n    pincode:string;\r\n  }\r\n} \r\n \r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}\r\n \r\n   </code></pre>\n\n\n\n<h2>template-component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h3>{{title}}&lt;/h3>\r\n \r\n&lt;div style=\"float: left; width:50%;\">\r\n  &lt;form #templateForm=\"ngForm\" (ngSubmit)=\"onSubmit(templateForm)\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" #fname=\"ngModel\" ngModel>\r\n \r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"email\">Email &lt;/label>\r\n      &lt;input type=\"text\" id=\"email\" name=\"email\" ngModel>\r\n    &lt;/p>\r\n \r\n \r\n    &lt;p>\r\n      &lt;label for=\"gender\">Geneder &lt;/label>\r\n      &lt;input type=\"radio\" value=\"male\" id=\"gender\" name=\"gender\" ngModel> Male\r\n      &lt;input type=\"radio\" value=\"female\" id=\"gender\" name=\"gender\" ngModel> Female\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"isMarried\">Married &lt;/label>\r\n      &lt;input type=\"checkbox\" id=\"isMarried\" name=\"isMarried\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"country\">country &lt;/label>\r\n      &lt;select id=\"country\" name=\"country\" ngModel>\r\n        &lt;option &#91;ngValue]=\"c.id\" *ngFor=\"let c of countryList\">\r\n          {{c.name}}\r\n        &lt;/option>\r\n      &lt;/select>\r\n    &lt;/p>\r\n \r\n    &lt;div ngModelGroup=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" id=\"city\" name=\"city\" ngModel>\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" id=\"street\" name=\"street\" ngModel>\r\n      &lt;/p>\r\n      &lt;p>\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" id=\"pincode\" name=\"pincode\" ngModel>\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n    &lt;p>\r\n      &lt;button type=\"submit\">Submit&lt;/button>\r\n    &lt;/p>\r\n \r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"setDefault()\">Default&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"setValue()\">SetValue&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setAddress()\">Address&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setCountry()\">Country&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"patchName()\">Name&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"patchAddress()\">Address&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"reset()\">Reset&lt;/button>\r\n    &lt;/div>\r\n \r\n \r\n  &lt;/form>\r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>valid : &lt;/b>{{templateForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{templateForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{templateForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{templateForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{templateForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{templateForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{templateForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{templateForm.enabled}}\r\n \r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{templateForm.value | json }}\r\n \r\n&lt;/div>>\r\n </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>SetValue setValue(value: { [key: string]: any; }, options: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void We use the&nbsp;SetValue&nbsp;to update the&nbsp;FormControl&nbsp;,&nbsp;FormGroup&nbsp;or&nbsp;FormArray. When we use it to update the&nbsp;FormGroup&nbsp;or&nbsp;FormArray&nbsp;the&nbsp;SetValue&nbsp;requires that the object must match the structure of the&nbsp;FormGroup&nbsp;or&nbsp;FormArray&nbsp;exactly. Otherwise, it will result in an error. PatchValue patchValue(value: { [key: string]: any; }, options: { onlySelf?: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3597" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3597"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3597/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3817,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3597/revisions/3817"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3597"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3597"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3597"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3599,
    "date": "2020-12-05T06:02:03",
    "date_gmt": "2020-12-05T06:02:03",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3599" },
    "modified": "2020-12-09T05:36:57",
    "modified_gmt": "2020-12-09T05:36:57",
    "slug": "statuschanges-in-angular-forms",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/statuschanges-in-angular-forms/",
    "title": { "rendered": "StatusChanges in Angular Forms" },
    "content": {
      "rendered": "\n<h2>How to use StatusChanges</h2>\n\n\n\n<p>The&nbsp;Angular Forms&nbsp;has three building blocks. FormControl,&nbsp;FormGroup&nbsp;&amp; FormArray. All of these controls extend the AbstractControl base class. The AbstractControl base class implements&nbsp;<code>StatusChanges</code>&nbsp;event</p>\n\n\n\n<p>We can subscribe to&nbsp;<code>StatusChanges</code>&nbsp;by getting the reference of the control and subscribing it as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").statusChanges.subscribe(newStaus => {\r\n   console.log('firstname status changed')\r\n   console.log(newStaus)\r\n})\r\n </code></pre>\n\n\n\n<p>You can also subscribe to the top-level form as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.statusChanges.subscribe(newStaus => {\r\n    console.log('form Status changed event')\r\n    console.log(newStaus)\r\n})\r\n </code></pre>\n\n\n\n<h2>StatusChanges Example</h2>\n\n\n\n<p>Create a&nbsp;reactive form&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>reactiveForm = new FormGroup({\r\n   firstname: new FormControl('', &#91;Validators.required]),\r\n   lastname: new FormControl(),\r\n   address: new FormGroup({\r\n     city: new FormControl(),\r\n     street: new FormControl(),\r\n     pincode: new FormControl()\r\n   })\r\n })</code></pre>\n\n\n\n<h3>StatusChanges of FormControl</h3>\n\n\n\n<p>You can subscribe to&nbsp;<code>StatusChanges</code>&nbsp;of a single&nbsp;<code>FormControl</code>&nbsp;as shown below. Here in the newStatus variable, we will get the latest status of the firstname. You can also retreive the latest status of the firstname using&nbsp;<code>this.reactiveForm.get(\"firstname\").status</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").statusChanges.subscribe(newStatus => {\r\n   console.log('firstname status changed')\r\n   console.log(newStatus)                                   //latest status\r\n   console.log(this.reactiveForm.get(\"firstname\").status)  //latest status\r\n})</code></pre>\n\n\n\n<p>But, the top-level form is not yet updated at this point, hence&nbsp;<code>this.reactiveForm.status</code>&nbsp;still shows the old status of the firstname and also the form.</p>\n\n\n\n<p>The&nbsp;<code>statusChanges</code>&nbsp;event for the firstname fires&nbsp;immediately&nbsp;<strong>after</strong>&nbsp;the new status is updated but&nbsp;<strong>before</strong>&nbsp;the change is bubbled up to its parent.&nbsp;Hence the&nbsp;<code>this.reactiveForm.status</code>&nbsp;still shows the old status.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.get(\"firstname\").statusChanges.subscribe(newStatus=> {\r\n   console.log('firstname status changed')\r\n   console.log(newStatus)                                   //latest status\r\n   console.log(this.reactiveForm.get(\"firstname\").status)  //latest status\r\n   console.log(this.reactiveForm.status)                   //Previous status\r\n})\r\n </code></pre>\n\n\n\n<p>You can work around this by waiting for the next tick using&nbsp;<code>setTimeout</code>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").statusChanges.subscribe(newStatus=> {\r\n   console.log('firstname status changed')\r\n   console.log(newStatus)                                    //latest status\r\n   console.log(this.reactiveForm.get(\"firstname\").status)   //latest status\r\n   console.log(this.reactiveForm.status)                    //Previous status\r\n      \r\n   setTimeout(() => {\r\n     console.log(this.reactiveForm.status)                  //latest status\r\n   })\r\n      \r\n})</code></pre>\n\n\n\n<h3>StatusChanges of FormGroup</h3>\n\n\n\n<p>The&nbsp;<code>StatusChanges</code>&nbsp;event of&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>&nbsp;is fired, whenever the status of any of its child controls are calculated. For Example, the following&nbsp;<code>StatusChanges</code>&nbsp;will fire even whenever the status of the&nbsp;<em>city</em>,&nbsp;<em>state</em>&nbsp;&amp;&nbsp;<em>pincode</em>&nbsp;are calculated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").statusChanges.subscribe(newStatus=> {\r\n   console.log('firstname status changed')\r\n   console.log(newStatus)                                    //latest status\r\n   console.log(this.reactiveForm.get(\"firstname\").status)   //latest status\r\n   console.log(this.reactiveForm.status)                    //Previous status\r\n      \r\n   setTimeout(() => {\r\n     console.log(this.reactiveForm.status)                  //latest status\r\n   })\r\n      \r\n})</code></pre>\n\n\n\n<h3>StatusChanges of Form</h3>\n\n\n\n<p>The following example show we can subscribe to the changes made to the entire form.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.statusChanges.subscribe(newStaus => {\r\n  console.log('form status changed')\r\n  console.log(newStaus)\r\n}) </code></pre>\n\n\n\n<h3>emitEvent &amp; StatusChanges</h3>\n\n\n\n<p>The&nbsp;<code>statusChanges</code>&nbsp;event is fired even when the angular calculates the status of the control either via UI or programmatically. In some circumstances, you might not want to raise the&nbsp;<code>statusChanges</code>&nbsp;event. To do that we can use the&nbsp;<code>emitEvent: false</code></p>\n\n\n\n<p>In the following example, the&nbsp;<code>statusChanges</code>&nbsp;event is&nbsp;<strong>not fired</strong>&nbsp;at all, even though the value of the firstname is changed making it and the form&nbsp;<code>INVALID</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.get(\"firstname\").setValue(\"\", { emitEvent: false }); </code></pre>\n\n\n\n<p>You can use&nbsp;<code>emitEvent: false</code>&nbsp;with the&nbsp;<code>setValue</code>,&nbsp;<code>patchValue</code>,&nbsp;<code>markAsPending</code>,&nbsp;<code>disable</code>,&nbsp;<code>enable</code>,&nbsp;<code>updateValueAndValidity</code>&nbsp;&amp;&nbsp;<code>setErrors</code>&nbsp;methods.</p>\n\n\n\n<h3>onlySelf &amp; StatusChanges</h3>\n\n\n\n<p>When&nbsp;<code>onlySelf: true</code>&nbsp;the changes will only affect only this&nbsp;<code>FormControl</code>&nbsp;and change is&nbsp;<strong>not</strong>&nbsp;bubbled up to its parent. Hence the&nbsp;<code>StatusChanges</code>&nbsp;event of the parent&nbsp;<code>FormGroup</code>&nbsp;does not fire.</p>\n\n\n\n<p>For Example, the following code will result in the&nbsp;<code>StatusChanges</code>&nbsp;of the firstname. but not of its parent (i.e. top-level form)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.get(\"firstname\").setValue(\"\", { onlySelf: true });</code></pre>\n\n\n\n<p>You can use the&nbsp;<code>onlySelf: true</code>&nbsp;with the&nbsp;<code>setValue</code>,&nbsp;<code>patchValue</code>,&nbsp;<code>markAsUntouched</code>,&nbsp;<code>markAsDirty</code>,&nbsp;<code>markAsPristine</code>,&nbsp;<code>markAsPending</code>,&nbsp;<code>disable</code>,&nbsp;<code>enable</code>, and&nbsp;<code>updateValueAndValidity</code>&nbsp;methods</p>\n\n\n\n<h2>Complete Source Code</h2>\n\n\n\n<h2>reactive.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms'\r\nimport { timeout } from 'q';\r\n \r\n \r\n@Component({\r\n  templateUrl: './reactive.component.html',\r\n})\r\nexport class ReactiveComponent implements OnInit {\r\n  title = 'Reactive Forms';\r\n \r\n  reactiveForm = new FormGroup({\r\n    firstname: new FormControl('', &#91;Validators.required]),\r\n    lastname: new FormControl(),\r\n    address: new FormGroup({\r\n      city: new FormControl(),\r\n      street: new FormControl(),\r\n      pincode: new FormControl()\r\n    })\r\n  })\r\n \r\n  onSubmit() {\r\n    //console.log(this.reactiveForm.value);\r\n  }\r\n \r\n  ngOnInit() {\r\n \r\n    this.reactiveForm.get(\"firstname\").statusChanges.subscribe(newStatus=> {\r\n      console.log('firstname status changed')\r\n      console.log(newStatus)\r\n      console.log(this.reactiveForm.get(\"firstname\").status)\r\n      console.log(this.reactiveForm.status)\r\n      \r\n      setTimeout(() => {\r\n        console.log(this.reactiveForm.status)\r\n      })\r\n      \r\n    })\r\n \r\n    this.reactiveForm.get(\"address\").statusChanges.subscribe(newStatus=> {\r\n      console.log('address status changed')\r\n      console.log(newStatus)\r\n    })\r\n \r\n    this.reactiveForm.statusChanges.subscribe(newStatus=> {\r\n      console.log('form status changed')\r\n      console.log(newStatus)\r\n    })\r\n  }\r\n \r\n  setValue() {\r\n \r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      address: {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    };\r\n \r\n    this.reactiveForm.setValue(contact);\r\n  }\r\n \r\n  setAddress() {\r\n \r\n    this.reactiveForm.get(\"address\").setValue(\r\n      {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    );\r\n  }\r\n \r\n  setFirstname() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"Saurav\")\r\n  }\r\n \r\n  withoutOnlySelf() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"\");\r\n  }\r\n  withOnlySelf() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"\", { onlySelf: true });\r\n  }\r\n \r\n  withEmitEvent() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"Sachin\");\r\n  }\r\n  withoutEmitEvent() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"\", { emitEvent: false });\r\n  }\r\n \r\n  reset() {\r\n    this.reactiveForm.reset();\r\n  }\r\n \r\n}\r\n </code></pre>\n\n\n\n<h2>reactive.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>{{title}}&lt;/h3>\r\n \r\n&lt;div style=\"float: left; width:50%;\">\r\n \r\n  &lt;form &#91;formGroup]=\"reactiveForm\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n    &lt;/p>\r\n \r\n    &lt;div formGroupName=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"city\" formControlName=\"city\">\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"street\" formControlName=\"street\">\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"pincode\" formControlName=\"pincode\">\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n    &lt;button>Submit&lt;/button>\r\n \r\n  &lt;/form>\r\n \r\n  &lt;div>\r\n    &lt;button type=\"button\" (click)=\"setValue()\">SetValue&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"setAddress()\">Address&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"setFirstname()\">First Name&lt;/button>\r\n  &lt;/div>\r\n  &lt;div>\r\n    &lt;button type=\"button\" (click)=\"withoutOnlySelf()\">Without Only Self&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"withOnlySelf()\">With Only Self&lt;/button>\r\n  &lt;/div>\r\n  &lt;div>\r\n    &lt;button type=\"button\" (click)=\"withouEmitEvent()\">Without EmitEvent&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"withEmitEvent()\">With EmitEvent&lt;/button>\r\n  &lt;/div>\r\n \r\n \r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n \r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>status : &lt;/b>{{reactiveForm.status}}\r\n  &lt;b>valid : &lt;/b>{{reactiveForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{reactiveForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{reactiveForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{reactiveForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{reactiveForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{reactiveForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{reactiveForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{reactiveForm.enabled}}\r\n \r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{reactiveForm.value |json}}\r\n \r\n&lt;/div>\n </code></pre>\n\n\n\n<h2>app.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h3>Angular StatusChanges Example&lt;/h3>\r\n \r\n&lt;ul>\r\n  &lt;li>\r\n    &lt;a &#91;routerLink]=\"&#91;'/template']\" routerLinkActive=\"router-link-active\" >Template&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n    &lt;a &#91;routerLink]=\"&#91;'/reactive']\" routerLinkActive=\"router-link-active\" >Reactive&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul>\r\n \r\n&lt;router-outlet>&lt;/router-outlet>\r\n </code></pre>\n\n\n\n<h2>app.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component} from '@angular/core';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n}\r\n </code></pre>\n\n\n\n<h2>app.module.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplateComponent } from './template-component';\r\nimport { ReactiveComponent } from './reactive.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent,TemplateComponent,ReactiveComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<h2>StatusChanges in Template Driven Forms</h2>\n\n\n\n<p><code>StatusChanges</code>&nbsp;event can also be used in the&nbsp;template-driven forms. All you need to do is to get the reference to the Form Model in the component as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> @ViewChild('templateForm',null) templateForm: NgForm; </code></pre>\n\n\n\n<p>You can refer to the example code below</p>\n\n\n\n<h2>template-component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, ViewChild, ElementRef, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n \r\n \r\n@Component({\r\n  templateUrl: './template.component.html',\r\n})\r\nexport class TemplateComponent implements OnInit {\r\n \r\n  title = 'Template driven forms';\r\n \r\n  @ViewChild('templateForm',null) templateForm: NgForm;\r\n \r\n  contact: contact;\r\n  \r\n  onSubmit() {\r\n    console.log(this.templateForm.value);\r\n  }\r\n \r\n  ngOnInit() {\r\n \r\n    setTimeout(() => {\r\n \r\n      this.templateForm.control.get(\"firstname\").statusChanges.subscribe(newStatus=> {\r\n        console.log('firstname status changed')\r\n        console.log(newStatus)\r\n        console.log(this.templateForm.control.get(\"firstname\").status)\r\n        console.log(this.templateForm.control.status)\r\n        \r\n        setTimeout(() => {\r\n          console.log(this.templateForm.control.status)\r\n        })\r\n        \r\n      })\r\n  \r\n      this.templateForm.control.get(\"address\").statusChanges.subscribe(newStatus => {\r\n        console.log('address status changed')\r\n        console.log(newStatus)\r\n      })\r\n  \r\n      this.templateForm.control.statusChanges.subscribe(newStatus=> {\r\n        console.log('form status changed')\r\n        console.log(newStatus)\r\n      })     \r\n      \r\n    });\r\n \r\n \r\n \r\n \r\n  }\r\n \r\n \r\n \r\n  setValue() {\r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      address: {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    };\r\n \r\n    this.templateForm.setValue(contact);\r\n  }\r\n \r\n  setAddress() {\r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600070\"\r\n    };\r\n \r\n    this.templateForm.control.get(\"address\").setValue(address);\r\n \r\n  };\r\n \r\n  setFirstname() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"Saurav\")\r\n  }\r\n \r\n \r\n  withoutOnlySelf() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"\");\r\n  }\r\n  withOnlySelf() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"\", { onlySelf: true });\r\n  }\r\n \r\n  withouEmitEvent() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"Sachin\");\r\n  }\r\n  withEmitEvent() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"\", { emitEvent: false });\r\n  }\r\n \r\n  reset() {\r\n    this.templateForm.reset();\r\n  }\r\n  \r\n}\r\n \r\nexport class contact {\r\n  firstname:string;\r\n  lastname:string;\r\n  gender:string;\r\n  email:string;\r\n  isMarried:boolean;\r\n  country:string;\r\n  address: {\r\n    city:string;\r\n    street:string;\r\n    pincode:string;\r\n  }\r\n} \r\n </code></pre>\n\n\n\n<h2>template-component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>{{title}}&lt;/h3>\r\n \r\n&lt;div style=\"float: left; width:50%;\">\r\n  &lt;form #templateForm=\"ngForm\" (ngSubmit)=\"onSubmit(templateForm)\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" #fname=\"ngModel\" ngModel>\r\n \r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;div ngModelGroup=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" id=\"city\" name=\"city\" ngModel>\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" id=\"street\" name=\"street\" ngModel>\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" id=\"pincode\" name=\"pincode\" ngModel>\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n    &lt;button>Submit&lt;/button>\r\n \r\n  &lt;/form>\r\n  \r\n  &lt;div>\r\n    &lt;button type=\"button\" (click)=\"setValue()\">SetValue&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"setAddress()\">Address&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"setFirstname()\">First Name&lt;/button>\r\n  &lt;/div>\r\n  &lt;div>\r\n    &lt;button type=\"button\" (click)=\"withoutOnlySelf()\">Without Only Self&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"withOnlySelf()\">With Only Self&lt;/button>\r\n  &lt;/div>\r\n  &lt;div>\r\n    &lt;button type=\"button\" (click)=\"withouEmitEvent()\">Without EmitEvent&lt;/button>\r\n    &lt;button type=\"button\" (click)=\"withEmitEvent()\">With EmitEvent&lt;/button>\r\n  &lt;/div>\r\n \r\n \r\n \r\n \r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>status : &lt;/b>{{templateForm.status}}\r\n  &lt;b>valid : &lt;/b>{{templateForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{templateForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{templateForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{templateForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{templateForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{templateForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{templateForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{templateForm.enabled}}\r\n \r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{templateForm.value | json }}\r\n \r\n&lt;/div></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>How to use StatusChanges The&nbsp;Angular Forms&nbsp;has three building blocks. FormControl,&nbsp;FormGroup&nbsp;&amp; FormArray. All of these controls extend the AbstractControl base class. The AbstractControl base class implements&nbsp;StatusChanges&nbsp;event We can subscribe to&nbsp;StatusChanges&nbsp;by getting the reference of the control and subscribing it as shown below You can also subscribe to the top-level form as shown below. StatusChanges Example Create [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3599" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3599"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3599/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3818,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3599/revisions/3818"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3599"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3599"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3599"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3601,
    "date": "2020-12-05T06:06:41",
    "date_gmt": "2020-12-05T06:06:41",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3601" },
    "modified": "2020-12-09T05:39:48",
    "modified_gmt": "2020-12-09T05:39:48",
    "slug": "valuechanges-in-angular-forms",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/valuechanges-in-angular-forms/",
    "title": { "rendered": "ValueChanges in Angular Forms" },
    "content": {
      "rendered": "\n<h2>How to use ValueChanges</h2>\n\n\n\n<p>The&nbsp;Angular Forms&nbsp;has three building blocks. FormControl,&nbsp;FormGroup&nbsp;&amp; FormArray. All of these controls extend the AbstractControl base class. The AbstractControl base class implements ValueChanges event</p>\n\n\n\n<p>We can subscribe to ValueChanges by getting the reference of the control and subscribing it as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.get(\"firstname\").valueChanges.subscribe(x => {   console.log('firstname value changed')   console.log(x)}) </code></pre>\n\n\n\n<p>You can also subscribe to the top-level form as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.valueChanges.subscribe(x => {    console.log('form value changed')    console.log(x)}) </code></pre>\n\n\n\n<h2>ValueChanges Example</h2>\n\n\n\n<p>Create a&nbsp;reactive form&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> reactiveForm = new FormGroup({\r\n   firstname: new FormControl('', &#91;Validators.required]),\r\n   lastname: new FormControl(),\r\n   address: new FormGroup({\r\n     city: new FormControl(),\r\n     street: new FormControl(),\r\n     pincode: new FormControl()\r\n   })\r\n })</code></pre>\n\n\n\n<h3>ValueChanges of FormControl</h3>\n\n\n\n<p>You can subscribe to&nbsp;<code>ValueChanges</code>&nbsp;of a single&nbsp;<code>FormControl</code>&nbsp;as shown below. Here in&nbsp;<code>selectedValue</code>&nbsp;variable, we will get the latest value of the&nbsp;<code>firstname</code>. You can also retrieve the latest value of the firstname using&nbsp;<code>this.reactiveForm.get(\"firstname\").value</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.get(\"firstname\").valueChanges.subscribe(selectedValue => {\r\n  console.log('firstname value changed')\r\n  console.log(selectedValue)                              //latest value of firstname\r\n  console.log(this.reactiveForm.get(\"firstname\").value)   //latest value of firstname\r\n})</code></pre>\n\n\n\n<h3>ValueChanges shows previous value</h3>\n\n\n\n<p>But, the top-level form is not yet updated at this point, hence&nbsp;<code>this.reactiveForm.value</code>&nbsp;still shows the previous value of the&nbsp;<code>firstname</code>.</p>\n\n\n\n<p>The&nbsp;<code>valueChanges</code>&nbsp;event for the&nbsp;<code>firstname</code>&nbsp;fires&nbsp;immediately&nbsp;<strong>after</strong>&nbsp;the new value is updated but&nbsp;<strong>before</strong>&nbsp;the change is bubbled up to its parent.&nbsp;Hence the&nbsp;<code>this.reactiveForm.value</code>&nbsp;still shows the previous value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").valueChanges.subscribe(selectedValue => {\r\n  console.log('firstname value changed')\r\n  console.log(selectedValue)\r\n  console.log(this.reactiveForm.get(\"firstname\").value)\r\n  console.log(this.reactiveForm.value)   //still shows the old first name\r\n})</code></pre>\n\n\n\n<p>You can work around this by waiting for the next tick using&nbsp;<code>setTimeout</code>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").valueChanges.subscribe(selectedValue => {\r\n  console.log('firstname value changed')\r\n  console.log(selectedValue)\r\n  console.log(this.reactiveForm.get(\"firstname\").value)\r\n  console.log(this.reactiveForm.value)    //shows the old first name\r\n      \r\n  setTimeout(() => {\r\n    console.log(this.reactiveForm.value)   //shows the latest first name\r\n  })\r\n     \r\n})</code></pre>\n\n\n\n<h3>ValueChanges of FormGroup</h3>\n\n\n\n<p>The&nbsp;<code>ValueChanges</code>&nbsp;event of&nbsp;<code>FormGroup</code>&nbsp;or&nbsp;<code>FormArray</code>&nbsp;is fired, whenever the value of any of its child controls value changes. For Example, the following&nbsp;<code>ValueChanges</code>&nbsp;will fire even whenever the value of the&nbsp;<em>city</em>,&nbsp;<em>state</em>&nbsp;&amp;&nbsp;<em>pincode</em>&nbsp;changes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"address\").valueChanges.subscribe(selectedValue  => {  console.log('address changed')  console.log(selectedValue)}) </code></pre>\n\n\n\n<h3>ValueChanges of Form</h3>\n\n\n\n<p>The following example show we can subscribe to the changes made to the entire form.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.valueChanges.subscribe(selectedValue  => {  console.log('form value changed')  console.log(selectedValue)}) </code></pre>\n\n\n\n<h3>EmitEvent &amp; ValueChanges</h3>\n\n\n\n<p>The&nbsp;<code>ValueChanges</code>&nbsp;event is fired even when the values of the control are changed programmatically. In some circumstances, you might not want to raise the&nbsp;<code>ValueChanges</code>&nbsp;event. To do that we can use the&nbsp;<code>emitEvent: false</code></p>\n\n\n\n<p>In the following example, the&nbsp;<code>ValueChanges</code>&nbsp;event is&nbsp;<strong>not fired</strong>&nbsp;at all, even though the value of the firstname is changed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").setValue(\"\", { emitEvent: false })</code></pre>\n\n\n\n<p>You can use&nbsp;<code>emitEvent: false</code>&nbsp;with the&nbsp;<code>setValue</code>,&nbsp;<code>patchValue</code>,&nbsp;<code>markAsPending</code>,&nbsp;<code>disable</code>,&nbsp;<code>enable</code>,&nbsp;<code>updateValueAndValidity</code>&nbsp;&amp;&nbsp;<code>setErrors</code>&nbsp;methods.</p>\n\n\n\n<h3>OnlySelf &amp; ValueChanges</h3>\n\n\n\n<p>When<code>onlySelf: true</code>&nbsp;the changes will only affect only this&nbsp;<code>FormControl</code>&nbsp;and change is&nbsp;<strong>not</strong>&nbsp;bubbled up to its parent. Hence the&nbsp;<code>ValueChanges</code>&nbsp;event of the parent&nbsp;<code>FormGroup</code>&nbsp;does not fire.</p>\n\n\n\n<p>For Example, the following code will result in the ValueChanges of the firstname. but not of its parent (i.e. top-level form)</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").setValue(\"\", { onlySelf: true }); </code></pre>\n\n\n\n<p>You can use the&nbsp;<code>onlySelf: true</code>&nbsp;with the&nbsp;<code>setValue</code>,&nbsp;<code>patchValue</code>,&nbsp;<code>markAsUntouched</code>,&nbsp;<code>markAsDirty</code>,&nbsp;<code>markAsPristine</code>,&nbsp;<code>markAsPending</code>,&nbsp;<code>disable</code>,&nbsp;<code>enable</code>, and&nbsp;<code>updateValueAndValidity</code>&nbsp;methods</p>\n\n\n\n<h2>Complete Source Code</h2>\n\n\n\n<h2>reactive.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms'\r\nimport { timeout } from 'q';\r\n \r\n \r\n@Component({\r\n  templateUrl: './reactive.component.html',\r\n})\r\nexport class ReactiveComponent implements OnInit {\r\n  title = 'Reactive Forms';\r\n \r\n  reactiveForm = new FormGroup({\r\n    firstname: new FormControl('', &#91;Validators.required]),\r\n    lastname: new FormControl(),\r\n    address: new FormGroup({\r\n      city: new FormControl(),\r\n      street: new FormControl(),\r\n      pincode: new FormControl()\r\n    })\r\n  })\r\n \r\n  onSubmit() {\r\n    console.log(this.reactiveForm.value);\r\n  }\r\n \r\n  ngOnInit() {\r\n \r\n    this.reactiveForm.get(\"firstname\").valueChanges.subscribe(selectedValue => {\r\n      console.log('firstname value changed')\r\n      console.log(selectedValue)\r\n      console.log(this.reactiveForm.get(\"firstname\").value)\r\n      console.log(this.reactiveForm.value)\r\n      \r\n      setTimeout(() => {\r\n        console.log(this.reactiveForm.value)\r\n      })\r\n      \r\n    })\r\n \r\n    this.reactiveForm.get(\"address\").valueChanges.subscribe(selectedValue => {\r\n      console.log('address changed')\r\n      console.log(selectedValue)\r\n    })\r\n \r\n    this.reactiveForm.valueChanges.subscribe(selectedValue => {\r\n      console.log('form value changed')\r\n      console.log(selectedValue)\r\n    })\r\n  }\r\n \r\n \r\n \r\n  setValue() {\r\n \r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      address: {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    };\r\n \r\n    this.reactiveForm.setValue(contact);\r\n  }\r\n \r\n  setAddress() {\r\n \r\n    this.reactiveForm.get(\"address\").setValue(\r\n      {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    );\r\n  }\r\n \r\n  setFirstname() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"Saurav\")\r\n  }\r\n \r\n  withoutOnlySelf() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"\");\r\n  }\r\n  withOnlySelf() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"\", { onlySelf: true });\r\n  }\r\n \r\n  withEmitEvent() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"Sachin\");\r\n  }\r\n  withoutEmitEvent() {\r\n    this.reactiveForm.get(\"firstname\").setValue(\"\", { emitEvent: false });\r\n  }\r\n \r\n  reset() {\r\n    this.reactiveForm.reset();\r\n  }\r\n \r\n}\r\n </code></pre>\n\n\n\n<h2>reactive.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h3>{{title}}&lt;/h3>\r\n \r\n&lt;div style=\"float: left; width:50%;\">\r\n \r\n  &lt;form &#91;formGroup]=\"reactiveForm\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n    &lt;/p>\r\n \r\n    &lt;div formGroupName=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"city\" formControlName=\"city\">\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"street\" formControlName=\"street\">\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"pincode\" formControlName=\"pincode\">\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n \r\n    &lt;button>Submit&lt;/button>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"setValue()\">SetValue&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setAddress()\">Address&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setFirstname()\">First Name&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"withoutOnlySelf()\">Without Only Self&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"withOnlySelf()\">With Only Self&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"withouEmitEvent()\">Without EmitEvent&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"withEmitEvent()\">With EmitEvent&lt;/button>\r\n    &lt;/div>\r\n \r\n  &lt;/form>\r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n \r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>status : &lt;/b>{{reactiveForm.status}}\r\n  &lt;b>valid : &lt;/b>{{reactiveForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{reactiveForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{reactiveForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{reactiveForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{reactiveForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{reactiveForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{reactiveForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{reactiveForm.enabled}}\r\n \r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{reactiveForm.value |json}}\r\n \r\n&lt;/div></code></pre>\n\n\n\n<h2>app.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>Angular ValueChanges Example&lt;/h3>\r\n \r\n&lt;ul>\r\n  &lt;li>\r\n    &lt;a &#91;routerLink]=\"&#91;'/template']\" routerLinkActive=\"router-link-active\" >Template&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n    &lt;a &#91;routerLink]=\"&#91;'/reactive']\" routerLinkActive=\"router-link-active\" >Reactive&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul>\r\n \r\n&lt;router-outlet>&lt;/router-outlet></code></pre>\n\n\n\n<h2>app.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component} from '@angular/core'; @Component({  selector: 'app-root',  templateUrl: './app.component.html',  styleUrls: &#91;'./app.component.css']})export class AppComponent {}  </code></pre>\n\n\n\n<h2>app.module.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplateComponent } from './template-component';\r\nimport { ReactiveComponent } from './reactive.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent,TemplateComponent,ReactiveComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<h2>ValueChanges in Template Driven Forms</h2>\n\n\n\n<p><code>ValueChanges</code>&nbsp;event can also be used in the&nbsp;template-driven forms. All you need to do is to get the reference to the Form Model in the component as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@ViewChild('templateForm',null) templateForm: NgForm; </code></pre>\n\n\n\n<p>You can refer to the example code below</p>\n\n\n\n<h2>template-component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, ViewChild, ElementRef, OnInit, OnDestroy } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\n \r\n \r\n@Component({\r\n  templateUrl: './template.component.html',\r\n})\r\nexport class TemplateComponent implements OnInit {\r\n \r\n  title = 'Template driven forms';\r\n \r\n  @ViewChild('templateForm',null) templateForm: NgForm;\r\n \r\n  contact: contact;\r\n  \r\n  onSubmit() {\r\n    console.log(this.templateForm.value);\r\n  }\r\n \r\n  ngOnInit() {\r\n \r\n    setTimeout(() => {\r\n \r\n      this.templateForm.control.get(\"firstname\").valueChanges.subscribe(selectedValue => {\r\n        console.log('firstname value changed')\r\n        console.log(selectedValue)\r\n        console.log(this.templateForm.control.get(\"firstname\").value)\r\n        console.log(this.templateForm.control.value)\r\n        \r\n        setTimeout(() => {\r\n          console.log(this.templateForm.control.value)\r\n        })\r\n      })\r\n  \r\n      this.templateForm.control.get(\"address\").valueChanges.subscribe(selectedValue => {\r\n        console.log('address changed')\r\n        console.log(selectedValue)\r\n      })\r\n \r\n      this.templateForm.valueChanges.subscribe(selectedValue => {\r\n        console.log('form value changed')\r\n        console.log(selectedValue)\r\n      })      \r\n      \r\n    });\r\n \r\n  }\r\n \r\n \r\n setValue() {\r\n    let contact = {\r\n      firstname: \"Rahul\",\r\n      lastname: \"Dravid\",\r\n      address: {\r\n        city: \"Bangalore\",\r\n        street: \"Brigade Road\",\r\n        pincode: \"600070\"\r\n      }\r\n    };\r\n \r\n    this.templateForm.setValue(contact);\r\n  }\r\n \r\n  setAddress() {\r\n    let address= {\r\n      city: \"Bangalore\",\r\n      street: \"Brigade Road\",\r\n      pincode: \"600070\"\r\n    };\r\n \r\n    this.templateForm.control.get(\"address\").setValue(address);\r\n \r\n  };\r\n \r\n  setFirstname() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"Saurav\")\r\n  }\r\n \r\n \r\n  withoutOnlySelf() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"\");\r\n  }\r\n  withOnlySelf() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"\", { onlySelf: true });\r\n  }\r\n \r\n  withouEmitEvent() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"Sachin\");\r\n  }\r\n  withEmitEvent() {\r\n    this.templateForm.control.get(\"firstname\").setValue(\"\", { emitEvent: false });\r\n  }\r\n \r\n  reset() {\r\n    this.templateForm.reset();\r\n  }\r\n  \r\n}\r\n \r\n \r\nexport class contact {\r\n  firstname:string;\r\n  lastname:string;\r\n  gender:string;\r\n  email:string;\r\n  isMarried:boolean;\r\n  country:string;\r\n  address: {\r\n    city:string;\r\n    street:string;\r\n    pincode:string;\r\n  }\r\n} </code></pre>\n\n\n\n<h2>template-component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h3>{{title}}&lt;/h3>\r\n \r\n&lt;div style=\"float: left; width:50%;\">\r\n  &lt;form #templateForm=\"ngForm\" (ngSubmit)=\"onSubmit(templateForm)\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" #fname=\"ngModel\" ngModel>\r\n \r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;div ngModelGroup=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" id=\"city\" name=\"city\" ngModel>\r\n        &lt;label for=\"street\">Street&lt;/label>\r\n        &lt;input type=\"text\" id=\"street\" name=\"street\" ngModel>\r\n        &lt;label for=\"pincode\">Pin Code&lt;/label>\r\n        &lt;input type=\"text\" id=\"pincode\" name=\"pincode\" ngModel>\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n    &lt;button>Submit&lt;/button>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"setValue()\">SetValue&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setAddress()\">Address&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"setFirstname()\">First Name&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"withoutOnlySelf()\">Without Only Self&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"withOnlySelf()\">With Only Self&lt;/button>\r\n    &lt;/div>\r\n    &lt;div>\r\n      &lt;button type=\"button\" (click)=\"withouEmitEvent()\">Without EmitEvent&lt;/button>\r\n      &lt;button type=\"button\" (click)=\"withEmitEvent()\">With EmitEvent&lt;/button>\r\n    &lt;/div>\r\n    \r\n  &lt;/form>\r\n&lt;/div>\r\n \r\n&lt;div style=\"float: right; width:50%;\">\r\n  &lt;h3>Form Status&lt;/h3>\r\n  &lt;b>status : &lt;/b>{{templateForm.status}}\r\n  &lt;b>valid : &lt;/b>{{templateForm.valid}}\r\n  &lt;b>invalid : &lt;/b>{{templateForm.invalid}}\r\n  &lt;b>touched : &lt;/b>{{templateForm.touched}}\r\n  &lt;b>untouched : &lt;/b>{{templateForm.untouched}}\r\n  &lt;b>pristine : &lt;/b>{{templateForm.pristine}}\r\n  &lt;b>dirty : &lt;/b>{{templateForm.dirty}}\r\n  &lt;b>disabled : &lt;/b>{{templateForm.disabled}}\r\n  &lt;b>enabled : &lt;/b>{{templateForm.enabled}}\r\n \r\n  &lt;h3>Form Value&lt;/h3>\r\n  {{templateForm.value | json }}\r\n&lt;/div>></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>How to use ValueChanges The&nbsp;Angular Forms&nbsp;has three building blocks. FormControl,&nbsp;FormGroup&nbsp;&amp; FormArray. All of these controls extend the AbstractControl base class. The AbstractControl base class implements ValueChanges event We can subscribe to ValueChanges by getting the reference of the control and subscribing it as shown below You can also subscribe to the top-level form as shown [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3601" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3601"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3601/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3819,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3601/revisions/3819"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3601"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3601"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3601"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3603,
    "date": "2020-12-05T10:34:27",
    "date_gmt": "2020-12-05T10:34:27",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3603" },
    "modified": "2020-12-09T05:45:08",
    "modified_gmt": "2020-12-09T05:45:08",
    "slug": "formcontrol-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/formcontrol-in-angular/",
    "title": { "rendered": "FormControl in Angular" },
    "content": {
      "rendered": "\n<h2>What is FormControl</h2>\n\n\n\n<p>Consider a simple text input box</p>\n\n\n\n<pre class=\"wp-block-code\"><code> First Name : &lt;input type=\"text\" name=\"firstname\" />  </code></pre>\n\n\n\n<p>As a developer, you would like to know the current value in the text box. You would also be like to know if the value is valid or not.. If the user has changed the value(dirty) or is it unchanged. You would like to be notified when the user changes its value.</p>\n\n\n\n<p>The&nbsp;<code>FormControl</code>&nbsp;is an object that encapsulates all the information related to the single input element. It Tracks the value and validation status of each of these control.</p>\n\n\n\n<p>The&nbsp;<code>FormControl</code>&nbsp;is just a class. A&nbsp;<code>FormControl</code>&nbsp;is created for each form field. We can refer to them in our component class and inspect its properties and methods</p>\n\n\n\n<p>We can use&nbsp;<code>FormControl</code>&nbsp;to set the value of the Form field. Find the status of form field like (valid/invalid, pristine/dirty, touched/untouched ), etc. You can add validation rules to it.</p>\n\n\n\n<h2>Using FormControl</h2>\n\n\n\n<p>The Angular has two approaches to building the&nbsp;Angular Forms. One is&nbsp;Template-driven&nbsp;and the other one is&nbsp;Reactive Forms.</p>\n\n\n\n<p>To use the Angular forms, First, we need to import the&nbsp;<code>FormsModule</code>&nbsp;(for template-driven forms) &amp;&nbsp;<code>ReactiveFormsModule</code>&nbsp;( for Reactive Forms) from the&nbsp;<code>@angular/forms</code>&nbsp;in your route module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { FormsModule, ReactiveFormsModule } from '@angular/forms'; </code></pre>\n\n\n\n<p>Also, add it to the&nbsp;<code>imports</code>&nbsp;metadata.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> imports: &#91;\r\n   BrowserModule,\r\n   AppRoutingModule,\r\n   FormsModule,\r\n   ReactiveFormsModule\r\n],</code></pre>\n\n\n\n<h3>Reactive Forms</h3>\n\n\n\n<p>In&nbsp;Reactive Forms&nbsp;approach, It is our responsibility to build the Model using&nbsp;<code>FormGroup</code>,&nbsp;<code>FormControl</code>&nbsp;and&nbsp;<code>FormArray</code>.</p>\n\n\n\n<p>To use&nbsp;<code>FormControl</code>, first, we need to import the&nbsp;<code>FormControl</code>&nbsp;from the&nbsp;<code>@angular/forms</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { FormGroup, FormControl, Validators } from '@angular/forms' </code></pre>\n\n\n\n<p>Then create the top-level FormGroup. The first argument to&nbsp;<code>FormGroup</code>&nbsp;is the collection of&nbsp;<code>FormControl</code>. They are added using the&nbsp;<code>FormControl</code>&nbsp;method as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>reactiveForm = new FormGroup({\r\n  firstname: new FormControl('',&#91;Validators.required]),\r\n  lastname: new FormControl(),\r\n  email: new FormControl(),\r\n})</code></pre>\n\n\n\n<p>Or you can make use of the&nbsp;FormBuilder&nbsp;API</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm = this.formBuilder.group({\r\n  firstname: &#91;'',&#91;Validators.required]],\r\n  lastname: &#91;''],\r\n  email: &#91;''],\r\n});</code></pre>\n\n\n\n<p>Bind the form element with the template using the&nbsp;<code><strong>formControlName</strong></code>directive as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;formGroup]=\"reactiveForm\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\" formControlName=\"email\">\r\n  &lt;/p>\r\n   \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form></code></pre>\n\n\n\n<h3>Template-driven forms</h3>\n\n\n\n<p>In&nbsp;template-driven forms, the&nbsp;<code>FormControl</code>&nbsp;is defined in the Template. The&nbsp;<code>&lt;Form&gt;</code>&nbsp;directive creates the top-level&nbsp;<code>FormGroup</code>. We use the&nbsp;<code>ngModel</code>&nbsp;directive on each Form element, which automatically creates the&nbsp;<code>FormControl</code>&nbsp;instance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #templateForm=\"ngForm\" (ngSubmit)=\"onSubmit(templateForm)\" novalidate>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"firstname\">First Name&lt;/label>\r\n    &lt;input type=\"text\" name=\"firstname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"lastname\">Last Name&lt;/label>\r\n    &lt;input type=\"text\" name=\"lastname\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;label for=\"email\">Email &lt;/label>\r\n    &lt;input type=\"text\" id=\"email\" name=\"email\" ngModel>\r\n  &lt;/p>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n  \r\n&lt;/form></code></pre>\n\n\n\n<p>Use the&nbsp;<code>viewChild</code>&nbsp;to get the reference to the&nbsp;<code>FormModel</code>&nbsp;in the Component class. The&nbsp;<code>control</code>&nbsp;property of the&nbsp;<code>NgForm</code>&nbsp;returns the top-level&nbsp;<code>formgroup</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> @ViewChild('templateForm',null) templateForm: NgForm; </code></pre>\n\n\n\n<h2>Setting the value</h2>\n\n\n\n<h3>setValue()</h3>\n\n\n\n<p><code>abstract setValue(value: any, options?: Object): void</code></p>\n\n\n\n<p>We use&nbsp;<code>setValue</code>&nbsp;or&nbsp;<code>patchValue</code>&nbsp;method of the&nbsp;<code>FormControl</code>&nbsp;to set a new value for the form control. There is no difference between&nbsp;<code>setValue</code>&nbsp;and&nbsp;<code>patchValue</code>&nbsp;at the&nbsp;<code>FormControl</code>&nbsp;level.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> setEmail() {\r\n  this.reactiveForm.get(\"email\").setValue(\"sachin.tendulakar@gmail.com\");\r\n};\r\n </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> setEmail() {\r\n  this.templateForm.control.get(\"email\").setValue(\"sachin.tendulkar@gmail.com\");\r\n};</code></pre>\n\n\n\n<h3>patchValue()</h3>\n\n\n\n<p><code>abstract patchValue(value: any, options?: Object): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>setEmail() {  this.reactiveForm.get(\"email\").setValue(\"sachin.tendulakar@gmail.com\");}; </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> setEmail() {  this.templateForm.control.get(\"email\").setValue(\"sachin.tendulkar@gmail.com\");}; </code></pre>\n\n\n\n<p><strong>Must Read</strong>:&nbsp;setValue &amp; patchValue in Angular forms</p>\n\n\n\n<h3>Two-way binding</h3>\n\n\n\n<p>The two-way data binding is the preferred way to to keep the component model in sync with the&nbsp;<code>FormModel</code>&nbsp;in Template-driven forms.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   &lt;p> \n   &lt;label for=\"firstname\">First Name &lt;/label>    &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" &#91;(ngModel)]=\"contact.firstname\"> \n &lt;/p> </code></pre>\n\n\n\n<p>Using two-way data binding in Reactive forms is deprecated since the Angular 7</p>\n\n\n\n<h2>Finding the Value</h2>\n\n\n\n<h3>value</h3>\n\n\n\n<p><code>value: any</code></p>\n\n\n\n<p>The value returns the current value of&nbsp;<code>FormControl</code>&nbsp;It is Readonly. To set the value of the control either use the&nbsp;<code>setValue</code>&nbsp;or&nbsp;<code>patchValue</code>&nbsp;method</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n//reactive forms\r\nthis.reactiveForm.get(\"firstname\").value\r\n \r\n//template driven forms\r\nthis.templateForm.control.get(\"firstname\").value</code></pre>\n\n\n\n<h3>valueChanges</h3>\n\n\n\n<p><code>valueChanges: Observable&lt;any&gt;</code></p>\n\n\n\n<p>The angular emits the&nbsp;<code>valueChanges</code>&nbsp;event whenever the value of the control changes. The value may change when the user updates the element in the UI or programmatically through the&nbsp;<code>setValue</code>/<code>patchValue</code>&nbsp;method. We can subscribe to it as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n//reactive Forms\r\n \r\nthis.fNameChange = this.reactiveForm.get(\"firstname\").valueChanges.subscribe(x => {\r\n   console.log(x);\r\n})</code></pre>\n\n\n\n<p>Similarly in template-driven forms.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nsetTimeout(() => { \r\n   this.fNameChange = this.templateForm.control.get(\"firstname\").valueChanges.subscribe(x => {\r\n     console.log(x);\r\n   })\r\n});</code></pre>\n\n\n\n<p><strong>Must Read</strong>:&nbsp;ValueChanges in Angular</p>\n\n\n\n<h2>Control Status</h2>\n\n\n\n<p>The&nbsp;<code>FormControl</code>&nbsp;tracks the validation&nbsp;<em>status</em>&nbsp;of the HTML Element to which it is bound. The following is the list of status-related properties</p>\n\n\n\n<h3>status</h3>\n\n\n\n<p><code>status: string</code></p>\n\n\n\n<p>The Angular runs validation checks, whenever the value of a&nbsp;<em>form control</em>&nbsp;changes. Based on the result of the validation, the control can have four possible states.</p>\n\n\n\n<p><strong>VALID:</strong>&nbsp;The FormControl has passed all validation checks.<br><strong>INVALID:</strong>&nbsp;This control has failed at least one validation check.<br><strong>PENDING:</strong>&nbsp;This control is in the midst of conducting a validation check.<br><strong>DISABLED:</strong>&nbsp;This control is exempt from validation checks</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n//reactive forms\r\nthis.reactiveForm.get(\"firstname\").status\r\n \r\n//template driven forms\r\nthis.templateForm.control.get(\"firstname\").status\r\n </code></pre>\n\n\n\n<h3>valid</h3>\n\n\n\n<p><code>valid: boolean</code></p>\n\n\n\n<p>A control is valid when it has passed all the validation checks and is not disabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.get(\"firstname\").valid </code></pre>\n\n\n\n<h3>invalid</h3>\n\n\n\n<p><code>invalid: boolean</code></p>\n\n\n\n<p>A control is invalid when it has failed one of the validation checks and is not disabled</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").invalid </code></pre>\n\n\n\n<h3>pending</h3>\n\n\n\n<p><code>pending: boolean</code></p>\n\n\n\n<p>A control is pending when it is in the midst of conducting a validation check.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").pending  </code></pre>\n\n\n\n<h3>disabled</h3>\n\n\n\n<p><code>disabled: boolean</code></p>\n\n\n\n<p>Control is disabled when its status is DISABLED.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").disabled </code></pre>\n\n\n\n<h3>enabled</h3>\n\n\n\n<p><code>enabled: boolean</code></p>\n\n\n\n<p>Control is enabled as long as the status is not DISABLED.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").disabled </code></pre>\n\n\n\n<h3>pristine</h3>\n\n\n\n<p><code>pristine: boolean</code></p>\n\n\n\n<p>Control is pristine if the user has not yet changed the value in the UI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").pristine </code></pre>\n\n\n\n<h3>dirty</h3>\n\n\n\n<p><code>dirty: boolean</code></p>\n\n\n\n<p>Control is dirty if the user has changed the value in the UI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").dirty </code></pre>\n\n\n\n<h3>touched</h3>\n\n\n\n<p><code>touched: boolean</code></p>\n\n\n\n<p>True if the control is marked as touched. A control is marked touched once the user has triggered a blur event on it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").touched </code></pre>\n\n\n\n<h3>untouched</h3>\n\n\n\n<p><code>untouched: boolean</code></p>\n\n\n\n<p>True if the control has not been marked as touched. A control is untouched if the user has not yet triggered a blur event on it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").untouched </code></pre>\n\n\n\n<h2>Changing the Status</h2>\n\n\n\n<p>We can also change the status of the control programmatically by using the following methods.</p>\n\n\n\n<p>When we change the status of a control programmatically or via UI, the validity &amp; value of the parent control is also calculated and updated. There may arise circumstances when you do not want that to happen. In such circumstances, you can make use of the&nbsp;<code>onlySelf:true</code>&nbsp;to ensure that the parent control is not checked.</p>\n\n\n\n<h3>markAsTouched</h3>\n\n\n\n<p>This method will mark the control as&nbsp;<code>touched</code>.</p>\n\n\n\n<p><code>markAsTouched(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true then only this control is marked. If false it will also mark all its direct ancestors also as touched. The default is false.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nthis.reactiveForm.get(\"firstname\").markAsTouched()\r\nthis.reactiveForm.get(\"firstname\").markAsTouched({ onlySelf:true; })</code></pre>\n\n\n\n<h3>markAllAsTouched</h3>\n\n\n\n<p><code>markAllAsTouched(): void</code></p>\n\n\n\n<p>Marks the control and all its descendant controls as touched.</p>\n\n\n\n<h3>markAsUntouched</h3>\n\n\n\n<p><code>markAsUntouched(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<p>Marks the control as untouched.</p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true only this control is marked as untouched. When false or not supplied, mark all direct ancestors as untouched. The default is false.</li></ul>\n\n\n\n<h3>markAsDirty</h3>\n\n\n\n<p><code>markAsDirty(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<p>Marks the control as dirty. A control becomes dirty when the controlâ€™s value is changed through the UI.</p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true, only this control is marked as dirty else all the direct ancestors are marked as dirty. The default is false.</li></ul>\n\n\n\n<h3>markAsPristine</h3>\n\n\n\n<p><code>markAsPristine(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<p>Marks the control as pristine.</p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true, only this control is marked as pristine else all the direct ancestors are marked as pristine. The default is false.</li></ul>\n\n\n\n<h3>markAsPending</h3>\n\n\n\n<p><code>markAsPending(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<p>Marks the control as pending. We mark it as pending when the control is in the midst of conducting a validation check.</p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, mark only this control. When false or not supplied, mark all direct ancestors. The default is false.</li><li><code>emitEvent</code>: When true or not supplied (the default), the&nbsp;<code>statusChanges</code>&nbsp;observable emits an event with the latest status the control is marked pending. When false, no events are emitted.</li></ul>\n\n\n\n<h3>disable</h3>\n\n\n\n<p><code>disable(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<p>Disables the control. This means the control is exempt from validation checks and excluded from the aggregate value of any parent. Its status is DISABLED.</p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, mark only this control. When false or not supplied, mark all direct ancestors. Default is false..</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control is disabled. When false, no events are emitted.</li></ul>\n\n\n\n<h3>enable</h3>\n\n\n\n<p><code>enable(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<p>Enables control. This means the control is included in validation checks and the aggregate value of its parent. Its status recalculates based on its value and its validators.</p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, mark only this control. When false or not supplied, mark all direct ancestors. The default is false.</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control is enabled. When false, no events are emitted.</li></ul>\n\n\n\n<h2>Status Change Event</h2>\n\n\n\n<h3>statusChanges</h3>\n\n\n\n<p><code>statusChanges: Observable&lt;any&gt;</code></p>\n\n\n\n<p>We can subscribe to the status changes event by subscribing it to the&nbsp;<code>statusChanges</code>&nbsp;as shown below. The event is fired whenever the validation status of the control is calculated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> //Reactive Forms\r\nthis.reactiveForm.get(\"firstname\").statusChanges.subscribe(x => {\r\n  console.log(x);\r\n})\r\n \r\n//Template Driven Forms\r\nthis.templateForm.control.get(\"firstname\").statusChanges.subscribe(x => {\r\n   console.log(x);\r\n})</code></pre>\n\n\n\n<p><strong>Must Read</strong>:&nbsp;StatusChanges in Angular</p>\n\n\n\n<h2>Validation</h2>\n\n\n\n<p>The way we add validators depends on whether we use the Template-driven forms or reactive forms.</p>\n\n\n\n<p>In Reactive forms, the validators are added while declaring the controls</p>\n\n\n\n<pre class=\"wp-block-code\"><code> reactiveForm = new FormGroup({\r\n  firstname: new FormControl('',&#91;Validators.required]),\r\n  lastname: new FormControl(),\r\n  email: new FormControl(),\r\n})\r\n </code></pre>\n\n\n\n<p>While in the template-driven forms in the template</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;p>\r\n  &lt;label for=\"firstname\">First Name &lt;/label>\r\n  &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" ngModel required >\r\n&lt;/p></code></pre>\n\n\n\n<h3>updateValueAndValidity()</h3>\n\n\n\n<p><code>updateValueAndValidity(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<p>The&nbsp;<code>updateValueAndValidity</code>&nbsp;forces the form to perform validation. This is useful when you add/remove validators dynamically using&nbsp;<code>setValidators</code>,&nbsp;<code>RemoveValidators</code>&nbsp;etc</p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, only update this control. When false or not supplied, update all direct ancestors. Default is false..</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control is updated. When false, no events are emitted.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code> //reactive forms\r\nthis.reactiveForm.get(\"firstname\").updateValueAndValidity();\r\n \r\n//template driven forms\r\nthis.templateForm.control.get(\"firstname\").updateValueAndValidity();</code></pre>\n\n\n\n<h3>setValidators() / setAsyncValidators()</h3>\n\n\n\n<p>Programmatically adds the sync or async validators. This method will remove all the previously added sync or async validators.</p>\n\n\n\n<p><code>setValidators(newValidator: ValidatorFn | ValidatorFn[]): void</code><br><code>setAsyncValidators(newValidator: AsyncValidatorFn | AsyncValidatorFn[]): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Reactive Form\r\nsetValidator() {\r\n  this.reactiveForm.get(\"firstname\").setValidators(&#91;Validators.required, Validators.minLength(5)]);\r\n  this.reactiveForm.get(\"firstname\").updateValueAndValidity(); </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> //Template driven forms\r\nsetValidator() {\r\n  this.templateForm.control.get(\"firstname\").setValidators(&#91;Validators.required, Validators.minLength(5)]);\r\n  this.templateForm.control.get(\"firstname\").updateValueAndValidity();\r\n}</code></pre>\n\n\n\n<h3>clearValidators() / clearAsyncValidators()</h3>\n\n\n\n<p><code>clearValidators(): void</code><br><code>clearAsyncValidators(): void</code></p>\n\n\n\n<p>clearValidators &amp; clearAsyncValidators clears all validators.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//reactive forms\r\nclearValidation() {\r\n   this.reactiveForm.get(\"firstname\").clearValidators();\r\n   this.reactiveForm.get(\"firstname\").updateValueAndValidity();\r\n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> //template driven forms\r\nclearValidation() {\r\n  this.templateForm.control.get(\"firstname\").clearValidators();\r\n  this.templateForm.control.get(\"firstname\").updateValueAndValidity();\r\n}</code></pre>\n\n\n\n<h3>errors()</h3>\n\n\n\n<p><code>errors: ValidationErrors | null</code></p>\n\n\n\n<p>An object containing any&nbsp;<code>errors</code>&nbsp;generated by failing validation, or null if there are no errors.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>getErrors() {\r\n \r\n  const controlErrors: ValidationErrors = this.reactiveForm.get(\"firstname\").errors;\r\n  if (controlErrors) {\r\n    Object.keys(controlErrors).forEach(keyError => {\r\n      console.log(\"firtname \"+ ' '+keyError);\r\n    });\r\n  }\r\n}</code></pre>\n\n\n\n<h3>setErrors()</h3>\n\n\n\n<p><code>setErrors(errors: ValidationErrors, opts: { emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> setErrors() {    this.reactiveForm.get(\"firstname\").setErrors( {customerror:'custom error'});} </code></pre>\n\n\n\n<h3>getError()</h3>\n\n\n\n<p><code>getError(errorCode: string, path?: string | (string | number)[]): any</code></p>\n\n\n\n<p>Reports error data for the control with the given path.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.getError(\"firstname\")\r\n \r\n//\r\nthis.reactiveForm.getError(\"address.pincode\");\r\nthis.reactiveForm.getError(&#91;\"address\",\"pincode\"]);</code></pre>\n\n\n\n<h3>hasError</h3>\n\n\n\n<p><code>hasError(errorCode: string, path?: string | (string | number)[]): boolean</code></p>\n\n\n\n<p>Reports whether the control with the given path has the error specified.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.hasError(\"firstname\")\r\n \r\n//\r\nthis.reactiveForm.hasError(\"address.pincode\");\r\nthis.reactiveForm.hasError(&#91;\"address\",\"pincode\"]);</code></pre>\n\n\n\n<h2>Reset</h2>\n\n\n\n<p><code>abstract reset(value?: any, options?: Object): void</code></p>\n\n\n\n<p>Resets the control. We can also pass the default value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").reset('');\r\nthis.reactiveForm.get(\"firstname\").reset('test');\r\n </code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is FormControl Consider a simple text input box As a developer, you would like to know the current value in the text box. You would also be like to know if the value is valid or not.. If the user has changed the value(dirty) or is it unchanged. You would like to be notified [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3603" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3603"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3603/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3820,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3603/revisions/3820"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3603"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3603"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3603"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3605,
    "date": "2020-12-05T10:50:06",
    "date_gmt": "2020-12-05T10:50:06",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3605" },
    "modified": "2020-12-09T05:51:09",
    "modified_gmt": "2020-12-09T05:51:09",
    "slug": "formgroup-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/formgroup-in-angular/",
    "title": { "rendered": "FormGroup in Angular" },
    "content": {
      "rendered": "\n<h2>What is FormGroup</h2>\n\n\n\n<p>Consider a simple HTML form</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form>\r\n  First Name : &lt;input type=\"text\" name=\"firstname\" /> \r\n  Last Name  : &lt;input type=\"text\" name=\"lastname\" /> \r\n  Email      : &lt;input type=\"text\" name=\"email\" /> \r\n&lt;/form></code></pre>\n\n\n\n<p>We create a FormControl for each of these input fields. It tracks the value &amp; validity of these elements. All of the above input fields are represented as the separate&nbsp;<code>FormControl</code>. If we wanted to check the validity of our form, we have to check the validity of each and every&nbsp;<code>FormControl</code>&nbsp;for validity. Imagine a form having a large no of fields. It is cumbersome to loop over large no of&nbsp;FormControls&nbsp;and check for validity</p>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>&nbsp;solveâ€™s this issue by providing a wrapper around a collection of FormControls It encapsulates all the information related to a group of form elements. It Tracks the value and validation status of each of these control. We can use it to check the validity of the elements. set its values &amp; listen for change events, add and run validations on the group, etc</p>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>&nbsp;is just a class. We create a&nbsp;<code>FormGroup</code>&nbsp;to organize and manage the related elements. For Example form elements like address, city.state, pin code etc can be grouped together as a single FormGroup. It makes it easier to manage them. A FormGroup aggregates the values of each child FormControl into one object, with each control name as the key. It calculates its status by reducing the status values of its children. For example, if one of the controls in a group is invalid, the entire group becomes invalid.</p>\n\n\n\n<h2>Using FormGroup</h2>\n\n\n\n<p>Every Angular Form must have at least one top-level FormGroup. It tracks the value &amp; validity of the entire form.</p>\n\n\n\n<p>The Angular has two approaches to building the&nbsp;Angular Forms. One is&nbsp;Template-driven&nbsp;and the other one is&nbsp;Reactive Forms.</p>\n\n\n\n<p>To use the Angular forms, First, we need to import the FormsModule (for template-driven forms) &amp; ReactiveFormsModule ( for Reactive Forms) from the&nbsp;<code>@angular/forms</code>&nbsp;in your route module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { FormsModule, ReactiveFormsModule } from '@angular/forms'; </code></pre>\n\n\n\n<p>Also, add it to the&nbsp;<code>imports</code>&nbsp;metadata</p>\n\n\n\n<pre class=\"wp-block-code\"><code> imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],</code></pre>\n\n\n\n<h3>Reactive Forms</h3>\n\n\n\n<p>In Reactive forms, we create the form model in the component class. First, we need to import the FormGroup, FormControl, Validators</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { FormGroup, FormControl, Validators } from '@angular/forms' </code></pre>\n\n\n\n<p>When instantiating a FormGroup, pass in a collection of child controls as the first argument. The key for each child registers the name for the control</p>\n\n\n\n<p>The following form model has two Form Groups. One is the top-level Form group, which we have named as&nbsp;<code>reactiveForm</code>. The other one is nested Form Group, which we have named it as&nbsp;<code>address</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> reactiveForm = new FormGroup({\r\n  firstname: new FormControl('', &#91;Validators.required]),\r\n  lastname: new FormControl(''),\r\n  email: new FormControl(''),\r\n  address: new FormGroup({\r\n    address: new FormControl(''),\r\n    city: new FormControl(''),\r\n    state: new FormControl(''),\r\n  })\r\n})\r\n </code></pre>\n\n\n\n<p>And in the Template, we use&nbsp;<code>formGroup</code>,&nbsp;<code>formControlName</code>&nbsp;and&nbsp;<code>formGroupName</code>&nbsp;directive to bind the Form to the template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form &#91;formGroup]=\"reactiveForm\" (ngSubmit)=\"onSubmit()\" novalidate>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" formControlName=\"firstname\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" formControlName=\"lastname\">\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"email\">Email &lt;/label>\r\n      &lt;input type=\"text\" id=\"email\" name=\"email\" formControlName=\"email\">\r\n    &lt;/p>\r\n \r\n    &lt;div formGroupName=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"address\">Address&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"address\" formControlName=\"address\">\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"city\" formControlName=\"city\">\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"state\">State&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"state\" formControlName=\"state\">\r\n      &lt;/p>\r\n \r\n    &lt;/div>\r\n \r\n    &lt;button>Submit&lt;/button>\r\n \r\n  &lt;/form></code></pre>\n\n\n\n<h3>Template Driven forms</h3>\n\n\n\n<p>In Template-driven forms. the model is built in the template first. The top-level form is bound to ngForm directive, which we have named as&nbsp;<code>templateForm</code>. We add&nbsp;<code>ngModel</code>&nbsp;directive to each form element to create Form Controls. The name attribute will become the name of the Form Control. The&nbsp;<code>ngModelGroup</code>&nbsp;directive is used to create the nested Form Group.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form #templateForm=\"ngForm\" (ngSubmit)=\"onSubmit(templateForm)\">\r\n \r\n    &lt;p>\r\n      &lt;label for=\"firstname\">First Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"firstname\" name=\"firstname\" ngModel required>\r\n    &lt;/p>\r\n    &lt;p>\r\n      &lt;label for=\"lastname\">Last Name &lt;/label>\r\n      &lt;input type=\"text\" id=\"lastname\" name=\"lastname\" ngModel>\r\n    &lt;/p>\r\n \r\n    &lt;p>\r\n      &lt;label for=\"email\">Email &lt;/label>\r\n      &lt;input type=\"text\" id=\"email\" name=\"email\" ngModel>\r\n    &lt;/p>\r\n \r\n \r\n    &lt;div ngModelGroup=\"address\">\r\n \r\n      &lt;p>\r\n        &lt;label for=\"address\">Address&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"address\" ngModel>\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"city\">City&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"city\" ngModel>\r\n      &lt;/p>\r\n \r\n      &lt;p>\r\n        &lt;label for=\"state\">State&lt;/label>\r\n        &lt;input type=\"text\" class=\"form-control\" name=\"state\" ngModel>\r\n      &lt;/p>\r\n    &lt;/div>\r\n \r\n    &lt;p>\r\n      &lt;button type=\"submit\">Submit&lt;/button>\r\n    &lt;/p>\r\n    &lt;div>\r\n    &lt;/div>\r\n \r\n  &lt;/form></code></pre>\n\n\n\n<p>We can get the reference to the top-level form group in component class using the&nbsp;<code>ViewChild</code>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { NgForm, Validators } from '@angular/forms';\r\n \r\nexport class TemplateComponent implements OnInit {\r\n   @ViewChild('templateForm', null) templateForm: NgForm;\r\n \r\n   ....\r\n}</code></pre>\n\n\n\n<h2>Setting Value</h2>\n\n\n\n<p>We use&nbsp;<code>setValue</code>&nbsp;or&nbsp;<code>patchValue</code>&nbsp;method of the&nbsp;<code>FormGroup</code>&nbsp;to set a new value for the entire FormGroup.</p>\n\n\n\n<h3>SetValue</h3>\n\n\n\n<p>Sets the value of the&nbsp;<code>FormGroup</code>. It accepts an object that matches the structure of the group, with control names as keys. The structure must match exactly, otherwise, it will result in an error.</p>\n\n\n\n<p><code>setValue(value: { [key: string]: any; }, options: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>setValue() {\r\n \r\n  this.reactiveForm.setValue({\r\n    firstname: \"Sachin\",\r\n    lastname: \"Tendulakr\",\r\n    email: \"sachin@gmail.com\",\r\n    address: {\r\n      address: \"19-A, Perry Cross Road, Bandra (West)\",\r\n      city: \"Mumbai\",\r\n      state: \"Maharatsra\",\r\n    }\r\n  })\r\n}</code></pre>\n\n\n\n<p>You can also update the nested FormGroup separately,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setAddress() {\r\n  this.reactiveForm.get(\"address\").setValue({\r\n    address: \"19-A, Perry Cross Road, Bandra (West)\",\r\n    city: \"Mumbai\",\r\n    state: \"Maharatsra\",\r\n  })\r\n}</code></pre>\n\n\n\n<h3>patchValue</h3>\n\n\n\n<p>Patches the value of the&nbsp;<code>FormGroup</code>. It accepts an object with control names as keys and does its best to match the values to the correct controls in the group.</p>\n\n\n\n<p><code>patchValue(value: { [key: string]: any; }, options: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>patchValue() {\r\n \r\n  this.reactiveForm.patchValue({\r\n    email: \"sachin@gmail.com\",\r\n    address: {\r\n      state: \"Maharatsra\",\r\n    }\r\n  })\r\n}</code></pre>\n\n\n\n<p>We can Both setValue &amp; patchValue</p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, each change only affects this control and not its parent. The default is true.</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control value is updated. When false, no events are emitted. The configuration options are passed to the&nbsp;updateValueAndValidity&nbsp;method.</li></ul>\n\n\n\n<h2>Finding the Value</h2>\n\n\n\n<h3>value</h3>\n\n\n\n<p>The value returns the object with a key-value pair for each member of the Form Group. It is Readonly. To Set&nbsp;Value either setValue or patchValue</p>\n\n\n\n<p><code>value: any</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>onSubmit() {\r\n  console.log(this.reactiveForm.value);\r\n} </code></pre>\n\n\n\n<h3>valueChanges</h3>\n\n\n\n<p><code>valueChanges: Observable&lt;any&gt;</code></p>\n\n\n\n<p>The angular emits the&nbsp;<code>valueChanges</code>&nbsp;event whenever the value of any of the controls in the Form Group changes. The value may change when user updates the element in the UI or programmatically through the&nbsp;<code>setValue</code>/<code>patchValue</code>&nbsp;method. We can subscribe to it as shown below</p>\n\n\n\n<p>In the example below, the first&nbsp;<code>valuesChanges</code>&nbsp;are fired, when any of the control is changed. While the second&nbsp;<code>valuesChanges</code>&nbsp;event is raised only when the controls under the address form group are changed</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ngOnInit() {\r\n  this.reactiveForm.valueChanges.subscribe(x => {\r\n    console.log(x);\r\n  })\r\n  this.reactiveForm.get(\"address\").valueChanges.subscribe(x => {\r\n    console.log(x);\r\n  })\r\n}</code></pre>\n\n\n\n<h2>Adding Controls Dynamically to Form Group</h2>\n\n\n\n<p>We usually add controls, while initializing the FormGroup.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>reactiveForm = new FormGroup({  firstname: new FormControl('', &#91;Validators.required]), } </code></pre>\n\n\n\n<p>The Forms API also allows add controls dynamically</p>\n\n\n\n<h3 id=\"addcontrol\">addControl()</h3>\n\n\n\n<p>Adds a control to the FormGroup and also updates validity &amp; validation status. If the control already exists, then ignores it</p>\n\n\n\n<p><code>addControl(name: string, control: AbstractControl): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> addControl() {\r\n    this.middleName = new FormControl('', &#91;Validators.required]);\r\n    this.reactiveForm.addControl(\"middleName\",this.middleName);\r\n  }\r\n </code></pre>\n\n\n\n<h3 id=\"registercontrol\">registerControl()&nbsp;</h3>\n\n\n\n<p>Adds control to this FormGroup but does not update the validity &amp; validation status. If the control already exists, then ignores it</p>\n\n\n\n<p><code>registerControl(name: string, control: AbstractControl): AbstractControl</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>registerControl() {  this.middleName = new FormControl('', &#91;Validators.required]);  this.reactiveForm.addControl(\"middleName\",this.middleName);}</code></pre>\n\n\n\n<h3 id=\"removecontrol\">removeControl()&nbsp;</h3>\n\n\n\n<p>This method will remove the control with the provided name from the FormGroup.</p>\n\n\n\n<p><code>removeControl(name: string): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> remodeControl() {  this.reactiveForm.removeControl(\"middleName\");} </code></pre>\n\n\n\n<h3 id=\"setcontrol\">setControl()</h3>\n\n\n\n<p>Replaces the control with the provided name with the new control.</p>\n\n\n\n<p><code>setControl(name: string, control: AbstractControl): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> setControl() {\r\n  this.middleName = new FormControl('test', &#91;Validators.required]);\r\n  this.reactiveForm.setControl(\"middleName\",this.middleName);\r\n} </code></pre>\n\n\n\n<h3 id=\"contains\">contains()</h3>\n\n\n\n<p>Check whether the control with the provided name exists or not..</p>\n\n\n\n<p><code>contains(controlName: string): boolean</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> containsControl() {  console.log(this.reactiveForm.contains(\"middleName\"));} </code></pre>\n\n\n\n<h2>Control Status</h2>\n\n\n\n<p>The&nbsp;<code>FormGroup</code>&nbsp;tracks the validation&nbsp;<em>status</em>&nbsp;of all the FormControls, which is part of the FormGroup. That also includes the status of nested FormGroup or FormArray. If any of the control becomes invalid, then the entire FormGroup becomes invalid.</p>\n\n\n\n<p>The following is the list of status-related properties</p>\n\n\n\n<h3>status</h3>\n\n\n\n<p><code>status: string</code></p>\n\n\n\n<p>The Angular runs validation checks, whenever the value of a&nbsp;<em>form control</em>&nbsp;changes. Based on the result of the validation, the FormGroup can have four possible states.</p>\n\n\n\n<p><strong>VALID:</strong>&nbsp;All the controls of the FormGroup has passed all validation checks.<br><strong>INVALID:</strong>&nbsp;At least one of the control has failed at least one validation check.<br><strong>PENDING:</strong>&nbsp;This Group is in the midst of conducting a validation check.<br><strong>DISABLED:</strong>&nbsp;This FormGroup is exempt from validation checks</p>\n\n\n\n<pre class=\"wp-block-code\"><code> //reactive formsthis.reactiveForm.status </code></pre>\n\n\n\n<h3>valid</h3>\n\n\n\n<p><code>valid: boolean</code></p>\n\n\n\n<p>A FormGroup is valid when it has passed all the validation checks and the FormGroup is not disabled</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.valid </code></pre>\n\n\n\n<h3>invalid</h3>\n\n\n\n<p><code>invalid: boolean</code></p>\n\n\n\n<p>A FormGroup is invalid when one of its controls has failed a validation check or the entire FormGroup is disabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.invalid </code></pre>\n\n\n\n<h3>pending</h3>\n\n\n\n<p><code>pending: boolean</code></p>\n\n\n\n<p>A FormGroup is pending when it is in the midst of conducting a validation check.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.pending  </code></pre>\n\n\n\n<h3>disabled</h3>\n\n\n\n<p><code>disabled: boolean</code></p>\n\n\n\n<p>A FormGroup is disabled when all of its controls are disabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.disabled </code></pre>\n\n\n\n<h3>enabled</h3>\n\n\n\n<p><code>enabled: boolean</code></p>\n\n\n\n<p>A FormGroup is enabled as long one of its control is enabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.disabled </code></pre>\n\n\n\n<h3>pristine</h3>\n\n\n\n<p><code>pristine: boolean</code></p>\n\n\n\n<p>A FormGroup is pristine if the user has not yet changed the value in the UI in any of the controls</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.pristine </code></pre>\n\n\n\n<h3>dirty</h3>\n\n\n\n<p><code>dirty: boolean</code></p>\n\n\n\n<p>A FormGroup is dirty if the user has changed the value in the UI in any one of the control.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.dirty </code></pre>\n\n\n\n<h3>touched</h3>\n\n\n\n<p><code>touched: boolean</code></p>\n\n\n\n<p>True if the FomGroup is marked as touched. A FormGroup is marked as touched once the user has triggered a blur event on any one of the controls</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.touched </code></pre>\n\n\n\n<h3>untouched</h3>\n\n\n\n<p><code>untouched: boolean</code></p>\n\n\n\n<p>True if the FormGroup has not been marked as touched. A FormGroup is untouched if the user has not yet triggered a blur event on any of its child controls</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.untouched </code></pre>\n\n\n\n<h2>Changing the Status</h2>\n\n\n\n<p>We can also change the status of the FormGroup by using the following method.</p>\n\n\n\n<h3>markAsTouched</h3>\n\n\n\n<p>The FormGroup is marked as touched if anyone of its control is marked as touched. The control is marked as touched once the user has triggered a blur event on it.</p>\n\n\n\n<p><code>markAsTouched(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true then only this control is marked. If false it will also mark all its direct ancestors also as touched. The default is false.</li></ul>\n\n\n\n<p>In the following example, the City is marked as touched. It will also mark both the address &amp; reactiveFormGroup as touched.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markCityAsTouched() {    this.reactiveForm.get(\"address\").get(\"city\").markAsTouched();  }</code></pre>\n\n\n\n<p>By Passing the&nbsp;<code>onlySelf:true</code>&nbsp;argument, you can ensure that only the&nbsp;<code>city</code>&nbsp;is marked as&nbsp;<code>touched</code>, while&nbsp;<code>address</code>&nbsp;&amp;&nbsp;<code>reactiveForm</code>&nbsp;are not affected.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  markCityAsTouched() {    this.reactiveForm.get(\"address\").get(\"city\").markAsTouched({onlySelf:true});  }</code></pre>\n\n\n\n<p>The following code marks the address&nbsp;<code>FormGroup</code>&nbsp;as touched. while the child controls are not marked as&nbsp;<code>touched</code>. The parent FormGroup is marked as touched.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>markAddressAsTouched() {    this.reactiveForm.get(\"address\").markAsTouched();  } </code></pre>\n\n\n\n<p>While&nbsp;<code>onlySelf:true</code>&nbsp;marks only the address group as touched, leaving the top-level FormGroup</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markAddressAsTouched() {    this.reactiveForm.get(\"address\").markAsTouched({onlySelf:true});  }</code></pre>\n\n\n\n<h3>markAllAsTouched</h3>\n\n\n\n<p>Marks the control and all its descendant controls as touched.</p>\n\n\n\n<p><code>markAllAsTouched(): void</code></p>\n\n\n\n<p>The following example marks the address and all its controls i.e&nbsp;<code>city</code>,&nbsp;<code>state</code>&nbsp;&amp;&nbsp;<code>address</code>&nbsp;as&nbsp;<code>touched</code>. The parent&nbsp;<code>FormGroup</code>&nbsp;stays as it is.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markAllAddressTouched() {  this.reactiveForm.get(\"address\").markAllAsTouched();} </code></pre>\n\n\n\n<h3>markAsUntouched</h3>\n\n\n\n<p>Marks the control as untouched.</p>\n\n\n\n<p><code>markAsUntouched(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true only this control is marked as untouched. When false or not supplied, mark all direct ancestors as untouched. The default is false.</li></ul>\n\n\n\n<p>The following code will mark the city as untouched. It will recalculate the untouched &amp; touched status of the parent Group. If all the other controls are untouched then the parent FormGroup&nbsp;<code>address</code>&nbsp;is also marked as untouched.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>markCityAsUnTouched() {  this.reactiveForm.get(\"address\").get(\"city\").markAsUntouched();} </code></pre>\n\n\n\n<p>By using the&nbsp;<code>onlySelf:true</code>&nbsp;you can ensure that only the city is marked as untouched, leaving the parent FormGroup as it is.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markCityAsUnTouched() {  this.reactiveForm.get(\"address\").get(\"city\").markAsUntouched({onlySelf:true});} </code></pre>\n\n\n\n<p>Similarly, you can mark the entire FormGroup as untouched. While this does not have any effect on the child controls, but it does recalculate the untouched status of the parent FormGroup. You can use the&nbsp;<code>onlySelf:true</code>&nbsp;ensure that it does not happen.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>markAddressAsUnTouched() {  this.reactiveForm.get(\"address\").markAsUntouched();} </code></pre>\n\n\n\n<h3>markAsDirty</h3>\n\n\n\n<p>The FormGroup becomes dirty when any one of its control is marked as dirty. A control becomes dirty when the controlâ€™s value is changed through the UI. We can use the markAsDirty method to manipulate the dirty status.</p>\n\n\n\n<p><code>markAsDirty(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true, only this control is marked as dirty else all the direct ancestors are marked as dirty. The default is false.</li></ul>\n\n\n\n<p>The Following code marks the entire form as dirty. It does not change the status of any of the child controls.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markFormAsDirty() {  this.reactiveForm.markAsDirty();} </code></pre>\n\n\n\n<p>The following code marks the City as dirty. It will also change the Dirty status of Parent FormGroup.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markCityAsDirty() {  this.reactiveForm.get(\"address\").get(\"city\").markAsDirty();} </code></pre>\n\n\n\n<p>You can use the&nbsp;<code>onlySelf:false</code>&nbsp;to ensure that the parent FormGroup is not affected by our change.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   markCityAsDirty() {    this.reactiveForm.get(\"address\").get(\"city\").markAsDirty({onlySelf:false});  }</code></pre>\n\n\n\n<p>You can also make the entire FormGroup as dirty. It does not affect the child controls, but parent FormGroup is also marked as dirty. Unless you pass the&nbsp;<code>{onlySelf:true}</code>&nbsp;argument</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markAddressAsDirty() {  this.reactiveForm.get(\"address\").markAsDirty({onlySelf:false});} </code></pre>\n\n\n\n<h3>markAsPristine</h3>\n\n\n\n<p>The FormGroup becomes&nbsp;<code>pristine</code>&nbsp;when none of its controls values are changed via UI. The&nbsp;<code>pristine</code>&nbsp;is the opposite of dirty. We can use the&nbsp;<code>markAsPrisitine</code>&nbsp;method to manipulate the&nbsp;<code>pristine</code>&nbsp;status.</p>\n\n\n\n<p><code>markAsPristine(opts: { onlySelf?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>&nbsp;if true, only this control is marked as pristine else all the direct ancestors are marked as pristine. The default is false.</li></ul>\n\n\n\n<p>The following code marks the Form as Pristine. It will also mark all the child controls as Pristine</p>\n\n\n\n<pre class=\"wp-block-code\"><code>markFormAsPristine() {  this.reactiveForm.markAsPristine();} </code></pre>\n\n\n\n<p>The following code marks the city as Pristine. It will also calculate the Pristine status of the Parent FormGroup. If all the other controls are pristine then the parent FormGroup becomes pristine.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   markCityAsPristine() {    this.reactiveForm.get(\"address\").get(\"city\").markAsPristine({onlySelf:false});  } </code></pre>\n\n\n\n<p>You can make use of the&nbsp;<code>onlySelf:true</code>&nbsp;to ensure that the pristine status of the parent group is not calculated.</p>\n\n\n\n<h3>markAsPending</h3>\n\n\n\n<p>Marks the control as pending. We usually use this when we running our validation checks. Pending means the status of the control cannot be determined at this time.</p>\n\n\n\n<p><code>markAsPending(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, mark only this control. When false or not supplied, mark all direct ancestors. The default is false.</li><li><code>emitEvent</code>: When true or not supplied (the default), the&nbsp;<code>statusChanges</code>&nbsp;observable emits an event with the latest status the control is marked pending. When false, no events are emitted.</li></ul>\n\n\n\n<p>The following code marks the entire form as Pending. It does not change the status of child Controls.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.markAsPending(); </code></pre>\n\n\n\n<p>The following will mark the address FormGroup as Pending. It will also mark the Parent FormGroup as Pending also, which you can control using the&nbsp;<code>onlySelf:true</code>&nbsp;argument</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markAddressAsPendng() {  this.reactiveForm.get(\"address\").markAsPending();} </code></pre>\n\n\n\n<p>This method also triggers the&nbsp;statusChange&nbsp;Event. You can make use of&nbsp;<code>emitEvent:false</code>&nbsp;argument, which will stop the&nbsp;<code>statusChange</code>&nbsp;event being triggered.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> markAddressAsPendng() {  this.reactiveForm.get(\"address\").markAsPending({emitEvent:false});}  </code></pre>\n\n\n\n<h3>disable</h3>\n\n\n\n<p>Disables the control. This means the control is exempt from validation checks and excluded from the aggregate value of any parent. Its status is DISABLED.</p>\n\n\n\n<p><code>disable(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, mark only this control. When false or not supplied, mark all direct ancestors. Default is false..</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control is disabled. When false, no events are emitted.</li></ul>\n\n\n\n<p>The following code disables all the controls in the FormGroup.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>disableAll() {  this.reactiveForm.disable();} </code></pre>\n\n\n\n<p>If you disable all the controls individually, then the FormGroup is automatically disabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\ndisableAll() {\r\n  this.reactiveForm.get(\"firstname\").disable();\r\n  this.reactiveForm.get(\"lastname\").disable();\r\n  this.reactiveForm.get(\"email\").disable();\r\n  this.reactiveForm.get(\"address\").disable();\r\n}</code></pre>\n\n\n\n<h3>enable</h3>\n\n\n\n<p>Enables control. This means the control is included in validation checks and the aggregate value of its parent. Its status recalculates based on its value and its validators.</p>\n\n\n\n<p><code>enable(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, mark only this control. When false or not supplied, mark all direct ancestors. The default is false.</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control is enabled. When false, no events are emitted.</li></ul>\n\n\n\n<p>The following command enables all the controls in the Group. Even the controls previously disabled are also enabled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> enableAll() {   this.reactiveForm.enable();} </code></pre>\n\n\n\n<p>Disables only address FormGroup.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>enableAddress() {  this.reactiveForm.get(\"address\").enable();} </code></pre>\n\n\n\n<p>Enable a Single Control</p>\n\n\n\n<pre class=\"wp-block-code\"><code> enableFirstName() {  this.reactiveForm.get(\"firstname\").enable();} </code></pre>\n\n\n\n<h3>Status Change Event</h3>\n\n\n\n<h3>statusChanges</h3>\n\n\n\n<p><code>statusChanges: Observable&lt;any&gt;</code></p>\n\n\n\n<p>The&nbsp;<code>statusChanges</code>&nbsp;event is fired whenever the status of the form is calculated. We can subscribe to this event as shown below. We can subscribe it at the FormControl level or at the FormGroup level.</p>\n\n\n\n<p><strong>Note that this event is fired whenever the status is calculated.</strong></p>\n\n\n\n<p>In the example below, the first&nbsp;<code>statusChanges</code>&nbsp;is emitted, when the status of the top-level FormGroup is calculated. The second&nbsp;<code>statusChange</code>&nbsp;event is emitted, when the address FormGroup status is calculated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nthis.reactiveForm.statusChanges.subscribe(x => {\r\n  console.log(x);\r\n})\r\n \r\nthis.reactiveForm.get(\"address\").statusChanges.subscribe(x => {\r\n   console.log(x);\r\n})\r\n </code></pre>\n\n\n\n<h2>Validation</h2>\n\n\n\n<p>The validators can be added to FormControl, FormGroup or to the FormArray.</p>\n\n\n\n<h3>updateValueAndValidity()</h3>\n\n\n\n<p>The&nbsp;<code>updateValueAndValidity</code>&nbsp;forces the form to perform validation. When applied to the FormGroup, it will calculate the validity of all the child controls, including nested form groups &amp; form arrays This is useful when you add/remove validators dynamically using&nbsp;<code>setValidators</code>,&nbsp;<code>RemoveValidators</code>&nbsp;etc</p>\n\n\n\n<p><code>updateValueAndValidity(opts: { onlySelf?: boolean; emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<ul><li><code>onlySelf</code>: When true, only update this control. When false or not supplied, update all direct ancestors. Default is false..</li><li><code>emitEvent</code>: When true or not supplied (the default), both the&nbsp;<code>statusChanges</code>&nbsp;and&nbsp;<code>valueChanges</code>&nbsp;observables emit events with the latest status and value when the control is updated. When false, no events are emitted.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.updateValueAndValidity();this.reactiveForm.get(\"address\").updateValueAndValidity();</code></pre>\n\n\n\n<h3>setValidators() / setAsyncValidators()</h3>\n\n\n\n<p>Programmatically adds the sync or async validators. This method will remove all the previously added sync or async validators.</p>\n\n\n\n<p><code>setValidators(newValidator: ValidatorFn | ValidatorFn[]): void</code><br><code>setAsyncValidators(newValidator: AsyncValidatorFn | AsyncValidatorFn[]): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>setValidator() {\r\n  this.reactiveForm.get(\"address\").setValidators(&#91;addressValidator]);\r\n  this.reactiveForm.get(\"address\").updateValueAndValidity();\r\n}\r\n \r\n \r\nexport const addressValidator = (control: AbstractControl): {&#91;key: string]: boolean} => {\r\n  const city = control.get('city').value;\r\n  const state = control.get('state').value;\r\n  console.log(control.value);\r\n  if (city==\"\" &amp;&amp; state==\"\") {\r\n    return { address:false };\r\n  }\r\n  return null;\r\n};</code></pre>\n\n\n\n<h3>clearValidators() / clearAsyncValidators()</h3>\n\n\n\n<p>cl<code>earValidators(): void</code><br><code>clearAsyncValidators(): void</code></p>\n\n\n\n<p>clearValidators &amp; clearAsyncValidators clears all validators.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> //reactive formsclearValidation() {   th//reactive forms\r\nclearValidation() {\r\n   this.reactiveForm.get(\"address\").clearValidators();\r\n   this.reactiveForm.get(\"address\").updateValueAndValidity();\r\n}</code></pre>\n\n\n\n<h3>errors()</h3>\n\n\n\n<p><code>errors: ValidationErrors | null</code></p>\n\n\n\n<p>An object containing any&nbsp;<code>errors</code>&nbsp;generated by failing validation, or null if there are no errors.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\ngetErrors() {\r\n \r\n  const controlErrors: ValidationErrors = this.reactiveForm.errors;\r\n  if (controlErrors) {\r\n    Object.keys(controlErrors).forEach(keyError => {\r\n      console.log(\"firtname \"+ ' '+keyError);\r\n    });\r\n  }\r\n}</code></pre>\n\n\n\n<h3>setErrors()</h3>\n\n\n\n<p><code>setErrors(errors: ValidationErrors, opts: { emitEvent?: boolean; } = {}): void</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> setErrors() {  this.reactiveForm.setErrors( {customerror:'custom error'});} </code></pre>\n\n\n\n<h3>getError()</h3>\n\n\n\n<p><code>getError(errorCode: string, path?: string | (string | number)[]): any</code></p>\n\n\n\n<p>Reports error data for the control with the given path.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.reactiveForm.getError(\"firstname\")\r\n \r\nthis.reactiveForm.getError(\"address.pincode\");\r\nthis.reactiveForm.getError(&#91;\"address\",\"pincode\"]);\r\n </code></pre>\n\n\n\n<h3>hasError</h3>\n\n\n\n<p><code>hasError(errorCode: string, path?: string | (string | number)[]): boolean</code></p>\n\n\n\n<p>Reports whether the control with the given path has the error specified.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.hasError(\"firstname\")\r\n \r\n//\r\nthis.reactiveForm.hasError(\"address.pincode\");\r\nthis.reactiveForm.hasError(&#91;\"address\",\"pincode\"]);\r\n </code></pre>\n\n\n\n<h2>Reset</h2>\n\n\n\n<p><code>abstract reset(value?: any, options?: Object): void</code></p>\n\n\n\n<p>Resets the control. We can also pass the default value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.reactiveForm.get(\"firstname\").reset('');this.reactiveForm.get(\"firstname\").reset('test');</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is FormGroup Consider a simple HTML form We create a FormControl for each of these input fields. It tracks the value &amp; validity of these elements. All of the above input fields are represented as the separate&nbsp;FormControl. If we wanted to check the validity of our form, we have to check the validity of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3605" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3605"
        }
      ],
      "version-history": [
        {
          "count": 3,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3605/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3822,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3605/revisions/3822"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3605"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3605"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3605"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3607,
    "date": "2020-12-05T10:55:06",
    "date_gmt": "2020-12-05T10:55:06",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3607" },
    "modified": "2020-12-09T05:53:52",
    "modified_gmt": "2020-12-09T05:53:52",
    "slug": "angular-formarray-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-formarray-example/",
    "title": { "rendered": "Angular FormArray Example" },
    "content": {
      "rendered": "\n<h2>What is FormArray</h2>\n\n\n\n<p>The&nbsp;<code>FormArray</code>&nbsp;is a way to Manage collection of Form controls in Angular. The controls can be a<code>FormGroup</code>, a<code>FormControl</code>, or another&nbsp;<code>FormArray</code>.</p>\n\n\n\n<p>We can group Form Controls in Angular forms in two ways. One is using the&nbsp;<code>FormGroup</code>&nbsp;and the other one is&nbsp;<code>FormArray</code>. The difference is how they implement it. In&nbsp;<code>FormGroup</code>&nbsp;controls becomes a property of the&nbsp;<code>FormGroup</code>. Each control is represented as key-value pair. While in&nbsp;<code>FormArray</code>, the controls become part of an array</p>\n\n\n\n<p>Because it is implemented as Array, it makes it easier dynamically add controls.</p>\n\n\n\n<h2>FormArray Example</h2>\n\n\n\n<p>Let us build a simple app, which allows us to add the new skill of a person dynamically .</p>\n\n\n\n<h3>Import FormArray</h3>\n\n\n\n<p>To use FormArray, First, you need to import the&nbsp;<code>FormArray</code>&nbsp;from the&nbsp;Angular Forms&nbsp;Module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { FormGroup, FormControl,FormArray, FormBuilder } from '@angular/forms' </code></pre>\n\n\n\n<h3>Build a Form Model</h3>\n\n\n\n<p>Build a form model&nbsp;<code>skillsForm</code>&nbsp;using the&nbsp;FormBuilder. Our Form has two fields.&nbsp;<code>name</code>&nbsp;of the person and his&nbsp;<code>skills</code>. Since the person can have more than one skill, we define&nbsp;<code>skills</code>&nbsp;as&nbsp;<code>FormArray</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\n  skillsForm: FormGroup;\r\n \r\n  constructor(private fb:FormBuilder) {\r\n \r\n    this.skillsForm = this.fb.group({\r\n      name: '',\r\n      skills: this.fb.array(&#91;]) ,\r\n    });\r\n  \r\n  }</code></pre>\n\n\n\n<p>Next, a&nbsp;<code>getter</code>&nbsp;method&nbsp;<code>skills</code>, which returns the&nbsp;<code>skills</code>&nbsp;FormArray from the&nbsp;<code>skillsForm</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> get skills() : FormArray {  return this.skillsForm.get(\"skills\") as FormArray} </code></pre>\n\n\n\n<h3>The skill FormGroup</h3>\n\n\n\n<p>We need to capture two fields under each skill. Name of the&nbsp;<code>skill</code>&nbsp;&amp; years of&nbsp;<code>exp</code>. Hence we create a&nbsp;<code>FormGroup</code>&nbsp;with two fields. The method&nbsp;<code>newSkill</code>&nbsp;creates a new&nbsp;<code>FormGroup</code>&nbsp;and returns it. Note that we wonâ€™t be able to assign a name to Form Group.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>newSkill(): FormGroup {\r\n   return this.fb.group({\r\n     skill: '',\r\n     exp: '',\r\n   })\r\n}</code></pre>\n\n\n\n<h3>Dynamically adding skill</h3>\n\n\n\n<p>Now, we need to add a new skill to the&nbsp;<code>skills</code>&nbsp;FormArray. Since it is an&nbsp;<code>array</code>&nbsp;we can use the&nbsp;<code>push</code>&nbsp;method to add the new skill using the the&nbsp;<code>newSkill</code>&nbsp;method. Note that&nbsp;<code>newSkill()</code>&nbsp;method returns a&nbsp;<code>FormGroup</code>. The name of the&nbsp;<code>FormGroup</code>&nbsp;is its Index in the&nbsp;<code>FormArray</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>addSkills() {   this.skills.push(this.newSkill());} </code></pre>\n\n\n\n<h3>Dynamically Removing Skill</h3>\n\n\n\n<p>Use the&nbsp;<code>removeAt</code>&nbsp;method to remove the element from the&nbsp;<code>skills</code>&nbsp;FromArray.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> removeSkill(i:number) {  this.skills.removeAt(i);} </code></pre>\n\n\n\n<h3>Submit</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> onSubmit() {   console.log(this.skillsForm.value); } </code></pre>\n\n\n\n<h3>Template</h3>\n\n\n\n<p>Now, it is time to build the Template. Use the&nbsp;<code>[formGroup]=\"skillsForm\"</code>&nbsp;to bind the form to the&nbsp;<code>skillsForm</code>&nbsp;model. The&nbsp;<code>formControlName=\"name\"</code>&nbsp;directive binds the&nbsp;<code>name</code>&nbsp;input element to&nbsp;<code>name</code>&nbsp;property of the&nbsp;<code>skillsForm</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form &#91;formGroup]=\"skillsForm\" (ngSubmit)=\"onSubmit()\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"name\">Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"name\" name=\"name\" formControlName=\"name\">\r\n  &lt;/p>\r\n \r\n &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form></code></pre>\n\n\n\n<h3>Binding FormArray to Template</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div formArrayName=\"skills\"> &lt;/div> </code></pre>\n\n\n\n<p>We use the&nbsp;<code>formArrayName</code>&nbsp;directive to bind the&nbsp;<code>skills</code>&nbsp;form array to the&nbsp;<code>div</code>&nbsp;element. Now the&nbsp;<code>div</code>&nbsp;and anything inside the&nbsp;<code>div</code>&nbsp;element is bound to the&nbsp;<code>skills</code>&nbsp;form array.</p>\n\n\n\n<p>Inside the&nbsp;<code>div</code>&nbsp;use&nbsp;<code>ngFor</code>&nbsp;to loop through each element of&nbsp;<code>skills</code>&nbsp;FormArray.&nbsp;<code>let i=index</code>&nbsp;will store the&nbsp;<code>index</code>&nbsp;value of the array in template local variable&nbsp;<code>i</code>. We will make use of it to remove the element from the&nbsp;<code>skills</code>&nbsp;array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div formArrayName=\"skills\">\r\n  &lt;div *ngFor=\"let skill of skills().controls; let i=index\">\r\n \r\n  &lt;/div>\r\n&lt;/div></code></pre>\n\n\n\n<p>Each element under the&nbsp;<code>skills</code>&nbsp;is a&nbsp;<code>FormGroup</code>. We do not have a name to the&nbsp;<code>FormGroup</code>. The Index of the element is automatically assigned as the name for the element.</p>\n\n\n\n<p>Hence we use the&nbsp;<code>[formGroupName]=\"i\"</code>&nbsp;where&nbsp;<code>i</code>&nbsp;is the index of the FormArray to bind the&nbsp;<code>FormGroup</code>&nbsp;to the&nbsp;<code>div</code>&nbsp;element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div formArrayName=\"skills\">\r\n  &lt;div *ngFor=\"let skill of skills().controls; let i=index\">\r\n      &lt;div &#91;formGroupName]=\"i\">\r\n      \r\n      &lt;/div>\r\n  &lt;/div>\r\n&lt;/div></code></pre>\n\n\n\n<p>Finally, we add the controls using the&nbsp;<code>formControlName</code>&nbsp;directive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Skills:\r\n  &lt;div formArrayName=\"skills\">\r\n    &lt;div *ngFor=\"let skill of skills().controls; let i=index\">\r\n      &lt;div &#91;formGroupName]=\"i\">\r\n        {{i}}\r\n        skill name :\r\n        &lt;input type=\"text\" formControlName=\"skill\">\r\n        exp:\r\n        &lt;input type=\"text\" formControlName=\"exp\">\r\n \r\n        &lt;button (click)=\"removeSkill(i)\">Remove&lt;/button>\r\n      &lt;/div>\r\n    &lt;/div>\r\n  &lt;/div></code></pre>\n\n\n\n<p>Also, pass the index&nbsp;<code>i</code>&nbsp;to&nbsp;<code>removeSkill</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button (click)=\"removeSkill(i)\">Remove&lt;/button> </code></pre>\n\n\n\n<p>Finally, call the&nbsp;<code>addSkills</code>&nbsp;method to add new skills.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;p>  &lt;button type=\"button\" (click)=\"addSkills()\">Add&lt;/button>&lt;/p> </code></pre>\n\n\n\n<p>Thatâ€™s it</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/11/Angular-FormArray-Example-1024x548.gif\" alt=\"Angular FormArray Example\" class=\"wp-image-15086\"/><figcaption>Angular FormArray Example App Running</figcaption></figure>\n\n\n\n<h3>Source Code</h3>\n\n\n\n<p>app.component.ts</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, FormControl,FormArray, FormBuilder } from '@angular/forms'\r\n \r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent  {\r\n  \r\n  title = 'FormArray Example in Angular Reactive forms';\r\n \r\n  skillsForm: FormGroup;\r\n \r\n  constructor(private fb:FormBuilder) {\r\n \r\n    this.skillsForm = this.fb.group({\r\n      name: '',\r\n      skills: this.fb.array(&#91;]) ,\r\n    });\r\n  \r\n  }\r\n \r\n  get skills() : FormArray {\r\n    return this.skillsForm.get(\"skills\") as FormArray\r\n  }\r\n \r\n  newSkill(): FormGroup {\r\n    return this.fb.group({\r\n      skill: '',\r\n      exp: '',\r\n    })\r\n  }\r\n \r\n  addSkills() {\r\n    this.skills.push(this.newSkill());\r\n  }\r\n \r\n  removeSkill(i:number) {\r\n    this.skills.removeAt(i);\r\n  }\r\n \r\n  onSubmit() {\r\n    console.log(this.skillsForm.value);\r\n  }\r\n \r\n}\r\n \r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}\r\n </code></pre>\n\n\n\n<p>app.component.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;formGroup]=\"skillsForm\" (ngSubmit)=\"onSubmit()\">\r\n \r\n  &lt;p>\r\n    &lt;label for=\"name\">Name &lt;/label>\r\n    &lt;input type=\"text\" id=\"name\" name=\"name\" formControlName=\"name\">\r\n  &lt;/p>\r\n \r\n \r\n  Skills:\r\n  &lt;div formArrayName=\"skills\">\r\n    &lt;div *ngFor=\"let skill of skills().controls; let i=index\">\r\n      &lt;div &#91;formGroupName]=\"i\">\r\n        {{i}}\r\n        skill name :\r\n        &lt;input type=\"text\" formControlName=\"skill\">\r\n        exp:\r\n        &lt;input type=\"text\" formControlName=\"exp\">\r\n \r\n        &lt;button (click)=\"removeSkill(i)\">Remove&lt;/button>\r\n      &lt;/div>\r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form>\r\n \r\n \r\n&lt;p>\r\n  &lt;button type=\"button\" (click)=\"addSkills()\">Add&lt;/button>\r\n&lt;/p>\r\n \r\n{{this.skillsForm.value | json}}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is FormArray The&nbsp;FormArray&nbsp;is a way to Manage collection of Form controls in Angular. The controls can be aFormGroup, aFormControl, or another&nbsp;FormArray. We can group Form Controls in Angular forms in two ways. One is using the&nbsp;FormGroup&nbsp;and the other one is&nbsp;FormArray. The difference is how they implement it. In&nbsp;FormGroup&nbsp;controls becomes a property of the&nbsp;FormGroup. Each [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3607" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3607"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3607/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3823,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3607/revisions/3823"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3607"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3607"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3607"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3609,
    "date": "2020-12-05T11:00:27",
    "date_gmt": "2020-12-05T11:00:27",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3609" },
    "modified": "2020-12-09T05:55:47",
    "modified_gmt": "2020-12-09T05:55:47",
    "slug": "nested-formarray-example-add-form-fields-dynamically",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/nested-formarray-example-add-form-fields-dynamically/",
    "title": {
      "rendered": "Nested FormArray Example Add Form Fields Dynamically"
    },
    "content": {
      "rendered": "\n<h2>Import FormArray</h2>\n\n\n\n<p>Import the FormArray from the&nbsp;Angular Forms&nbsp;Module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { FormGroup, FormArray, FormBuilder } from '@angular/forms' </code></pre>\n\n\n\n<h2>Build a Form Model</h2>\n\n\n\n<p>The First task is to build a Form Model&nbsp;<code>empForm</code>. It has only one property a FormArray of employees.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>empForm:FormGroup;\r\n \r\nconstructor(private fb:FormBuilder) {\r\n   this.empForm=this.fb.group({\r\n     employees: this.fb.array(&#91;]) ,\r\n   })\r\n}</code></pre>\n\n\n\n<h3>Employee FormArray</h3>\n\n\n\n<p>Helper method, which returns the&nbsp;<code>employees</code>&nbsp;FormArray from the model&nbsp;<code>empForm</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>employees(): FormArray {  return this.empForm.get(\"employees\") as FormArray} </code></pre>\n\n\n\n<p>The&nbsp;<code>newEmployee</code>&nbsp;method creates a new employee&nbsp;FormGroup&nbsp;and returns it. It has three properties.&nbsp;<code>firstName</code>,&nbsp;<code>lastName</code>&nbsp;and&nbsp;<code>skills</code>&nbsp;FormArray.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>newEmployee(): FormGroup {\r\n  return this.fb.group({\r\n    firstName: '',\r\n    lastName: '',\r\n    skills:this.fb.array(&#91;])\r\n  })\r\n}</code></pre>\n\n\n\n<p>Next, the method to add an employee. It uses the&nbsp;<code>newEmployee</code>&nbsp;method which returns the&nbsp;<code>Employee</code>&nbsp;FormGroup and ads it to&nbsp;<code>employees</code>&nbsp;array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>addEmployee() {  this.employees().push(this.newEmployee());} </code></pre>\n\n\n\n<p>Method to remove the employee form the array. It needs the index position to remove it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>removeEmployee(empIndex:number) {  this.employees().removeAt(empIndex);} </code></pre>\n\n\n\n<h3>Skills FormArray</h3>\n\n\n\n<p>Under each employee, we have skills array. Hence create helper method which returns a skills array from the employee array. We need to pass the index position of the employee array as argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>employeeSkills(empIndex:number) : FormArray {\r\n  return this.employees().at(empIndex).get(\"skills\") as FormArray\r\n}\r\n </code></pre>\n\n\n\n<p><code>newSkill</code>&nbsp;method returns a&nbsp;<code>skill</code>&nbsp;<code>FormGroup</code>. It has two fields. Name of the&nbsp;<code>skill</code>&nbsp;and years of&nbsp;<code>exp</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>newSkill(): FormGroup {  return this.fb.group({    skill: '',    exp: '',  })} </code></pre>\n\n\n\n<p><code>addEmployeeSkill</code>&nbsp;method the&nbsp;<code>skill</code>&nbsp;to&nbsp;<code>employee</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> addEmployeeSkill(empIndex:number) {  this.employeeSkills(empIndex).push(this.newSkill());} </code></pre>\n\n\n\n<p>Finally,&nbsp;<code>removeEmployeeSkill</code>&nbsp;method, which removes the&nbsp;<code>skill</code>&nbsp;of an employee.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>removeEmployeeSkill(empIndex:number,skillIndex:number) {  this.employeeSkills(empIndex).removeAt(skillIndex);} </code></pre>\n\n\n\n<h2>Template</h2>\n\n\n\n<p>Create a&nbsp;<code>&lt;form&gt;</code>&nbsp;and bind it to&nbsp;<code>empForm</code>&nbsp;using&nbsp;<code>formgroup</code>&nbsp;directive</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;formGroup]=\"empForm\" (ngSubmit)=\"onSubmit()\"> </code></pre>\n\n\n\n<p>Under&nbsp;<code>empForm</code>&nbsp;we have&nbsp;<code>employees</code>&nbsp;array. Bind it to the&nbsp;<code>div</code>&nbsp;element using&nbsp;<code>formArrayName</code>&nbsp;directive</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div formArrayName=\"employees\"> </code></pre>\n\n\n\n<p>Next, loop through the controls under the&nbsp;<code>employees</code>&nbsp;using&nbsp;ngFor.&nbsp;<code>let empIndex=index</code>&nbsp;will save the index position in the&nbsp;<code>empIndex</code>&nbsp;local variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>      &lt;div *ngFor=\"let employee of employees().controls; let empIndex=index\">  </code></pre>\n\n\n\n<p>The index is used as the name of the control in a Form Array. Hence use the&nbsp;<code>[formGroupName]=\"empIndex\"</code>&nbsp;to bind it to the&nbsp;<code>FormGroup</code>. The style exists to show a nice border around employee</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div &#91;formGroupName]=\"empIndex\" style=\"border: 1px solid blue; padding: 10px; width: 600px; margin: 5px;\"> </code></pre>\n\n\n\n<p>Input element for employeeâ€™s&nbsp;<code>firstName</code>,&nbsp;<code>lastName</code>. Also, place a button&nbsp;<code>removeEmployee(empIndex)</code>&nbsp;to remove this employee from the array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    {{empIndex}}\r\n        First Name :\r\n        &lt;input type=\"text\" formControlName=\"firstName\">\r\n        Last Name:\r\n        &lt;input type=\"text\" formControlName=\"lastName\">\r\n \r\n        &lt;button (click)=\"removeEmployee(empIndex)\">Remove&lt;/button></code></pre>\n\n\n\n<p>Bind the skills of the empoyee to a div using formArrayName directive</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;div formArrayName=\"skills\"> </code></pre>\n\n\n\n<p>ngFor, now loops through the&nbsp;<code>skills</code>&nbsp;array of the&nbsp;<code>employee</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  &lt;div *ngFor=\"let skill of employeeSkills(empIndex).controls; let skillIndex=index\"> </code></pre>\n\n\n\n<p>input fields for skill and exp, Also button to remove the skill, which calls the&nbsp;<code>removeEmployeeSkill(empIndex,skillIndex)</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>   &lt;div &#91;formGroupName]=\"skillIndex\">\r\n              {{skillIndex}}\r\n              Skill :\r\n              &lt;input type=\"text\" formControlName=\"skill\">\r\n              Exp:\r\n              &lt;input type=\"text\" formControlName=\"exp\">\r\n \r\n              &lt;button (click)=\"removeEmployeeSkill(empIndex,skillIndex)\">Remove&lt;/button>\r\n \r\n            &lt;/div></code></pre>\n\n\n\n<p>Finally a button the add the skill to the employee</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button type=\"button\" (click)=\"addEmployeeSkill(empIndex)\">Add Skill&lt;/button> </code></pre>\n\n\n\n<p>Finally a button the add the skill to the employee</p>\n\n\n\n<p>Finally a button the add the employee</p>\n\n\n\n<h2>Source Code</h2>\n\n\n\n<p>app.component.ts</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component } from '@angular/core';\r\n  import { FormGroup, FormArray, FormBuilder } from '@angular/forms'\r\n \r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent  {\r\n  \r\n  title = 'Nested FormArray Example Add Form Fields Dynamically';\r\n \r\n  empForm:FormGroup;\r\n \r\n \r\n  constructor(private fb:FormBuilder) {\r\n \r\n    this.empForm=this.fb.group({\r\n      employees: this.fb.array(&#91;]) ,\r\n    })\r\n  }\r\n \r\n \r\n  employees(): FormArray {\r\n    return this.empForm.get(\"employees\") as FormArray\r\n  }\r\n \r\n \r\n  newEmployee(): FormGroup {\r\n    return this.fb.group({\r\n      firstName: '',\r\n      lastName: '',\r\n      skills:this.fb.array(&#91;])\r\n    })\r\n  }\r\n \r\n \r\n  addEmployee() {\r\n    console.log(\"Adding a employee\");\r\n    this.employees().push(this.newEmployee());\r\n  }\r\n \r\n \r\n  removeEmployee(empIndex:number) {\r\n    this.employees().removeAt(empIndex);\r\n  }\r\n \r\n \r\n  employeeSkills(empIndex:number) : FormArray {\r\n    return this.employees().at(empIndex).get(\"skills\") as FormArray\r\n  }\r\n \r\n  newSkill(): FormGroup {\r\n    return this.fb.group({\r\n      skill: '',\r\n      exp: '',\r\n    })\r\n  }\r\n \r\n  addEmployeeSkill(empIndex:number) {\r\n    this.employeeSkills(empIndex).push(this.newSkill());\r\n  }\r\n \r\n  removeEmployeeSkill(empIndex:number,skillIndex:number) {\r\n    this.employeeSkills(empIndex).removeAt(skillIndex);\r\n  }\r\n \r\n  onSubmit() {\r\n    console.log(this.empForm.value);\r\n  }\r\n \r\n \r\n}\r\n \r\n \r\nexport class country {\r\n  id: string;\r\n  name: string;\r\n \r\n  constructor(id: string, name: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n  }\r\n}   </code></pre>\n\n\n\n<p>app.component.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>{{title}}&lt;/h1>\r\n \r\n&lt;form &#91;formGroup]=\"empForm\" (ngSubmit)=\"onSubmit()\">\r\n \r\n  &lt;div formArrayName=\"employees\">\r\n \r\n    &lt;div *ngFor=\"let employee of employees().controls; let empIndex=index\">\r\n \r\n      &lt;div &#91;formGroupName]=\"empIndex\" style=\"border: 1px solid blue; padding: 10px; width: 600px; margin: 5px;\">\r\n        {{empIndex}}\r\n        First Name :\r\n        &lt;input type=\"text\" formControlName=\"firstName\">\r\n        Last Name:\r\n        &lt;input type=\"text\" formControlName=\"lastName\">\r\n \r\n        &lt;button (click)=\"removeEmployee(empIndex)\">Remove&lt;/button>\r\n \r\n \r\n        &lt;div formArrayName=\"skills\">\r\n \r\n          &lt;div *ngFor=\"let skill of employeeSkills(empIndex).controls; let skillIndex=index\">\r\n \r\n \r\n \r\n            &lt;div &#91;formGroupName]=\"skillIndex\">\r\n              {{skillIndex}}\r\n              Skill :\r\n              &lt;input type=\"text\" formControlName=\"skill\">\r\n              Exp:\r\n              &lt;input type=\"text\" formControlName=\"exp\">\r\n \r\n              &lt;button (click)=\"removeEmployeeSkill(empIndex,skillIndex)\">Remove&lt;/button>\r\n \r\n            &lt;/div>\r\n \r\n          &lt;/div>\r\n          &lt;button type=\"button\" (click)=\"addEmployeeSkill(empIndex)\">Add Skill&lt;/button>\r\n        &lt;/div>\r\n \r\n \r\n      &lt;/div>\r\n \r\n    &lt;/div>\r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form>\r\n \r\n \r\n&lt;p>\r\n  &lt;button type=\"button\" (click)=\"addEmployee()\">Add Employee&lt;/button>\r\n&lt;/p>\r\n \r\n{{this.empForm.value | json}}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Import FormArray Import the FormArray from the&nbsp;Angular Forms&nbsp;Module. Build a Form Model The First task is to build a Form Model&nbsp;empForm. It has only one property a FormArray of employees. Employee FormArray Helper method, which returns the&nbsp;employees&nbsp;FormArray from the model&nbsp;empForm The&nbsp;newEmployee&nbsp;method creates a new employee&nbsp;FormGroup&nbsp;and returns it. It has three properties.&nbsp;firstName,&nbsp;lastName&nbsp;and&nbsp;skills&nbsp;FormArray. Next, the method to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3609" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3609"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3609/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3824,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3609/revisions/3824"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3609"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3609"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3609"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3611,
    "date": "2020-12-05T11:03:49",
    "date_gmt": "2020-12-05T11:03:49",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3611" },
    "modified": "2020-12-09T05:57:36",
    "modified_gmt": "2020-12-09T05:57:36",
    "slug": "setvalue-patchvalue-in-formarray-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/setvalue-patchvalue-in-formarray-angular/",
    "title": { "rendered": "SetValue &#038; PatchValue in FormArray Angular" },
    "content": {
      "rendered": "\n<h2>Nested FormArray Example</h2>\n\n\n\n<p>We built the nested Form array in the last tutorial. The code is as shown below. You can refer to the tutorial&nbsp;nested FormArray Example&nbsp;for the explanation of the code</p>\n\n\n\n<p>The following is the structure of our form model. There can be many teachers and each teacher can manage many batches. Each batch can contain several students.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\n|Form\r\n|-- Teacher\r\n|-----Batch\r\n|-------Students</code></pre>\n\n\n\n<h2>app.component.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>{{title}}&lt;/h1>\r\n \r\n&lt;form &#91;formGroup]=\"teachersForm\" (ngSubmit)=\"onSubmit()\">\r\n \r\n  &lt;div formArrayName=\"teachers\">\r\n \r\n    &lt;div *ngFor=\"let teacher of teachers().controls; let ti=index\">\r\n \r\n      &lt;div &#91;formGroupName]=\"ti\"\r\n        style=\"border: 1px solid blue; padding: 10px; width: 100%; display: inline-block; margin: 5px;\">\r\n        Teachers Name :\r\n        &lt;input type=\"text\" formControlName=\"name\">\r\n        &lt;button (click)=\"removeTeacher(ti)\">Remove&lt;/button>\r\n        &lt;button type=\"button\" (click)=\"addBatch(ti)\">Add Batch&lt;/button>\r\n \r\n        &lt;div formArrayName=\"batches\">\r\n \r\n          &lt;div *ngFor=\"let batch of batches(ti).controls; let bi=index\">\r\n \r\n            &lt;div &#91;formGroupName]=\"bi\" style=\"border: 1px solid red; padding: 10px; margin: 5px; float:left\">\r\n \r\n              Batch Name :\r\n              &lt;input type=\"text\" formControlName=\"name\">\r\n              &lt;button (click)=\"removeBatch(ti,bi)\">Remove Batch&lt;/button>\r\n              &lt;button (click)=\"addStudent(ti,bi)\">Add Student&lt;/button>\r\n \r\n              &lt;div formArrayName=\"students\">\r\n \r\n                &lt;div *ngFor=\"let batch of students(ti,bi).controls; let si=index\">\r\n                  &lt;div &#91;formGroupName]=\"si\" style=\"border: 1px solid blue; padding: 2px; \">\r\n                    Student Name :\r\n                    &lt;input type=\"text\" formControlName=\"name\">\r\n                    &lt;button (click)=\"removeStudent(ti,bi,si)\">Remove student&lt;/button>\r\n                  &lt;/div>\r\n                &lt;/div>\r\n \r\n              &lt;/div>\r\n \r\n            &lt;/div>\r\n \r\n          &lt;/div>\r\n \r\n        &lt;/div>\r\n \r\n      &lt;/div>\r\n \r\n    &lt;/div>\r\n \r\n  &lt;/div>\r\n \r\n  &lt;p>\r\n    &lt;button type=\"button\" (click)=\"addTeacher()\">Add Teacher&lt;/button>\r\n  &lt;/p>\r\n  &lt;p>\r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  &lt;/p>\r\n \r\n&lt;/form>\r\n \r\n{{this.teachersForm.value | json}}</code></pre>\n\n\n\n<h2>app.component.ts</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms'\r\n \r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n \r\n  title = 'FormArray SetValue &amp; PatchValue Example';\r\n \r\n  teachersForm: FormGroup;\r\n \r\n  constructor(private fb: FormBuilder) {\r\n    this.teachersForm = this.fb.group({\r\n      teachers: this.fb.array(&#91;]),\r\n    })\r\n  }\r\n \r\n \r\n  /** Teachers */\r\n  teachers(): FormArray {\r\n    return this.teachersForm.get(\"teachers\") as FormArray\r\n  }\r\n \r\n  newTeacher(): FormGroup {\r\n    return this.fb.group({\r\n      name: '',\r\n      batches: this.fb.array(&#91;])\r\n    })\r\n  }\r\n \r\n \r\n  addTeacher() {\r\n    this.teachers().push(this.newTeacher());\r\n  }\r\n \r\n \r\n  removeTeacher(ti) {\r\n    this.teachers().removeAt(ti);\r\n  }\r\n \r\n \r\n  /** batches */\r\n \r\n  batches(ti): FormArray {\r\n    return this.teachers().at(ti).get(\"batches\") as FormArray\r\n  }\r\n \r\n \r\n  newBatch(): FormGroup {\r\n    return this.fb.group({\r\n      name: '',\r\n      students: this.fb.array(&#91;])\r\n    })\r\n  }\r\n \r\n  addBatch(ti: number) {\r\n    this.batches(ti).push(this.newBatch());\r\n  }\r\n \r\n  removeBatch(ti: number, bi: number) {\r\n    this.batches(ti).removeAt(ti);\r\n  }\r\n \r\n  /** students */\r\n \r\n  students(ti, bi): FormArray {\r\n    return this.batches(ti).at(bi).get(\"students\") as FormArray\r\n  }\r\n \r\n  newStudent(): FormGroup {\r\n    return this.fb.group({\r\n      name: '',\r\n    })\r\n  }\r\n \r\n  addStudent(ti: number, bi: number) {\r\n    this.students(ti, bi).push(this.newStudent());\r\n  }\r\n \r\n  removeStudent(ti: number, bi: number, si: number) {\r\n    this.students(ti, bi).removeAt(si);\r\n  }\r\n \r\n  onSubmit() {\r\n    console.log(this.teachersForm.value);\r\n  }\r\n \r\n} </code></pre>\n\n\n\n<h3>Form in Action</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/02/SetValue-PatchValue-in-FormArray.gif\" alt=\"\" class=\"wp-image-16457\"/></figure>\n\n\n\n<h2>How to load initial data in FormArray</h2>\n\n\n\n<p>When the form is loads for the first time, it will not have any controls in the FormArray. Calling PatchValue or SetValue will have no effect.</p>\n\n\n\n<p>The&nbsp;<code>patchValue1</code>&nbsp;method in the following example tries to load the data. The data contains one teacher managing two batches with three students in each batch.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>patchValue1() {\r\n    console.log('patchValue1')\r\n    var data = {\r\n      teachers: &#91;\r\n        {\r\n          name: 'Teacher 1', batches: &#91;\r\n            { name: 'Batch No 1', students: &#91;{ name: 'Ramesh' }, { name: 'Suresh' }, { name: 'Naresh' }] },\r\n            { name: 'Batch No 2', students: &#91;{ name: 'Vikas' }, { name: 'Harish' }, { name: 'Lokesh' }] },\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n \r\n    this.teachersForm.patchValue(data);\r\n}</code></pre>\n\n\n\n<p>Invoke the method from the template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;p>  &lt;button (click)=\"patchValue1()\">PatchValue1&lt;/button>&lt;/p>  </code></pre>\n\n\n\n<p>As you can see from below&nbsp;<code>patchValue</code>&nbsp;wonâ€™t work unless we have all the controls loaded. Hence we need to build the form manually before calling&nbsp;<code>patchValue</code></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/02/Example-of-PatchValue-in-FormArray.gif\" alt=\"Example of PatchValue in FormArray\" class=\"wp-image-16483\"/></figure>\n\n\n\n<h2>PatchValue Example</h2>\n\n\n\n<p>To load the data, we need to update our form programmatically to match the data. The&nbsp;<code>patchValue2</code>&nbsp;method in the following example does that.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>patchValue2() {\r\n \r\n  var data = {\r\n    teachers: &#91;\r\n      {\r\n        name: 'Teacher 1', batches: &#91;\r\n          { name: 'Batch No 1', students: &#91;{ name: 'Ramesh' }, { name: 'Suresh' }, { name: 'Naresh' }] },\r\n          { name: 'Batch No 2', students: &#91;{ name: 'Vikas' }, { name: 'Harish' }, { name: 'Lokesh' }] },\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n  this.clearFormArray();\r\n \r\n \r\n  data.teachers.forEach(t => {\r\n \r\n    var teacher: FormGroup = this.newTeacher();\r\n    this.teachers().push(teacher);\r\n \r\n    t.batches.forEach(b => {\r\n      var batch = this.newBatch();\r\n \r\n      (teacher.get(\"batches\") as FormArray).push(batch)\r\n \r\n      b.students.forEach(s => {\r\n        (batch.get(\"students\") as FormArray).push(this.newStudent())\r\n      })\r\n \r\n    });\r\n  });\r\n \r\n  this.teachersForm.patchValue(data);\r\n}\r\n \r\n \r\nclearFormArray() {\r\n \r\n  //Angular 8 +\r\n  this.teachers().clear();\r\n \r\n  //older Versions of angualar\r\n  //while (this.teachers().length) {\r\n  //  this.teachers().removeAt(0);\r\n  //}\r\n}\r\n </code></pre>\n\n\n\n<p>We start by clearing the FormArray. The clearing is useful if the user wants to discard and reload the original data again.</p>\n\n\n\n<p>To clear the form, all You need to do is get hold of the top-level&nbsp;<code>formArray</code>&nbsp;and call&nbsp;<code>clear</code>&nbsp;method Note that&nbsp;<code>clear</code>&nbsp;is available from&nbsp;<strong>Angular 8+</strong>. If you are using the prior versions, then use the&nbsp;<code>removeAt(index)</code>&nbsp;method</p>\n\n\n\n<pre class=\"wp-block-code\"><code> clearFormArray() {\r\n \r\n  //Angular 8 +\r\n  this.teachers().clear();\r\n \r\n  //older Versions of angualar\r\n  //while (this.teachers().length) {\r\n  //  this.teachers().removeAt(0);\r\n  //}\r\n}</code></pre>\n\n\n\n<p>Now loop through the data</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data.teachers.forEach(t => { </code></pre>\n\n\n\n<p>For every teacher create a nested form array and push it to the top-level formArray</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   var teacher: FormGroup = this.newTeacher();    this.teachers().push(teacher); </code></pre>\n\n\n\n<p>Now, loop through the batches and add it to the batches form array</p>\n\n\n\n<pre class=\"wp-block-code\"><code>t.batches.forEach(b => {\r\n \r\n      var batch = this.newBatch();\r\n      (teacher.get(\"batches\") as FormArray).push(batch)</code></pre>\n\n\n\n<p>Next, do the same for students</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  b.students.forEach(s => {        (batch.get(\"students\") as FormArray).push(this.newStudent())      }) </code></pre>\n\n\n\n<p>Now, our form model matches the data structure. You can now call&nbsp;<code>patchValue</code>&nbsp;or&nbsp;<code>setValue</code>&nbsp;to update the Form. Remember the difference between PatchValue &amp; SetValue.</p>\n\n\n\n<ol><li>The patchValue sets the data, even when data does not match the structure of the Form.</li><li>SetValue requires that the data must match the structure of the&nbsp;<code>FormArray</code>&nbsp;exactly</li></ol>\n\n\n\n<p>You can read about them from the tutorial&nbsp;SetValue &amp; PatchValue in Angular</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/02/Updating-the-FormArray-using-intial-value-1024x504.gif\" alt=\"\" class=\"wp-image-16495\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Nested FormArray Example We built the nested Form array in the last tutorial. The code is as shown below. You can refer to the tutorial&nbsp;nested FormArray Example&nbsp;for the explanation of the code The following is the structure of our form model. There can be many teachers and each teacher can manage many batches. Each batch [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3611" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3611"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3611/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3825,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3611/revisions/3825"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3611"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3611"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3611"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3614,
    "date": "2020-12-05T11:09:19",
    "date_gmt": "2020-12-05T11:09:19",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3614" },
    "modified": "2020-12-09T05:59:58",
    "modified_gmt": "2020-12-09T05:59:58",
    "slug": "select-options-example-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/select-options-example-in-angular/",
    "title": { "rendered": "Select Options Example in Angular" },
    "content": {
      "rendered": "\n<h2>Select Options in Reactive Forms</h2>\n\n\n\n<p>Create a&nbsp;<code>contactForm</code>&nbsp;using the&nbsp;Reactive Form&nbsp;as shown below. The&nbsp;<code>Form</code>&nbsp;has only one&nbsp;<code>Formcontrol</code>&nbsp;field i.e.&nbsp;<code>country</code>. The value for the&nbsp;<code>country</code>&nbsp;is going to come from the&nbsp;<code>countries</code>&nbsp;array. We will store the&nbsp;<code>id</code>&nbsp;in the&nbsp;<code>country</code>&nbsp;field</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class AppComponent implements OnInit  { \r\n \r\n  contactForm:FormGroup;\r\n \r\n  countries = &#91;\r\n    { id: 1, name: \"United States\" },\r\n    { id: 2, name: \"Australia\" },\r\n    { id: 3, name: \"Canada\" },\r\n    { id: 4, name: \"Brazil\" },\r\n    { id: 5, name: \"England\" }\r\n  ];\r\n \r\n  constructor(private fb:FormBuilder) {\r\n  }\r\n \r\n  ngOnInit() {\r\n \r\n    this.contactForm = this.fb.group({\r\n      country: &#91;null]\r\n    });\r\n  }\r\n \r\n  submit() {\r\n    console.log(\"Form Submitted\")\r\n    console.log(this.contactForm.value)\r\n  }\r\n \r\n}</code></pre>\n\n\n\n<p>The select option for the&nbsp;<code>country</code>&nbsp;is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;form &#91;formGroup]=\"contactForm\" (ngSubmit)=\"submit()\">\r\n \r\n&lt;p>\r\n \r\n  &lt;select formControlName=\"country\">\r\n    &lt;option &#91;ngValue]=\"null\" disabled>Select Country&lt;/option>\r\n    &lt;option *ngFor=\"let country of countries\" &#91;ngValue]=\"country.id\">{{country.name}}&lt;/option>\r\n  &lt;/select>\r\n \r\n  &lt;button type=\"submit\">Submit&lt;/button>\r\n&lt;/p>\r\n \r\n&lt;/form></code></pre>\n\n\n\n<p>The&nbsp;<code>formControlName</code>&nbsp;directive maps the&nbsp;<code>select</code>&nbsp;to the&nbsp;<code>country</code>&nbsp;field of the&nbsp;<code>contactForm</code>. (&nbsp;<code>&lt;select formControlName=\"country\"&gt;</code>)</p>\n\n\n\n<p><code>&lt;option [ngValue]=\"null\" disabled &gt;</code>&nbsp;displays the&nbsp;<code>Select Country</code>&nbsp;when no value for&nbsp;<code>country</code>&nbsp;is selected or&nbsp;<code>country</code>&nbsp;is null</p>\n\n\n\n<p>The&nbsp;<code>ngFor</code>&nbsp;loops through the&nbsp;<code>\"countries\"</code>&nbsp;array and displays the&nbsp;<code>country.name</code>&nbsp;in the drop down. You can also display the&nbsp;<code>country.name - country.id</code>&nbsp;or any other property of the&nbsp;<code>country</code></p>\n\n\n\n<p>We want to return the&nbsp;<code>id</code>&nbsp;of the&nbsp;<code>country</code>. Hence we use the&nbsp;<code>[ngValue]=\"country.id\"</code>. You can also use&nbsp;<code>[ngValue]=\"country\"</code>, in which case it will return the&nbsp;<code>country</code>&nbsp;object.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Select-Option-Drop-down-in-Reactive-Forms.gif\" alt=\"\" class=\"wp-image-19002\"/></figure>\n\n\n\n<h3>Set the Default Value for the select</h3>\n\n\n\n<p>We can set the value of a&nbsp;FormControl&nbsp;using either&nbsp;setValue or patchValue.</p>\n\n\n\n<p>Set the default values when defining the form to pass the default value. The following code sets the default country as&nbsp;<code>Australia</code>. This works only once when we load the component for the first time</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ngOnInit() {    this.contactForm = this.fb.group({      country: &#91;2]    });) </code></pre>\n\n\n\n<p>The other method is to create a separate&nbsp;<code>setDefaults</code>&nbsp;method, which you call any time.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ngOnInit() {\r\n \r\n  this.contactForm = this.fb.group({\r\n    country: &#91;null]\r\n  });\r\n \r\n  this.setDefaults();\r\n}\r\n \r\nsetDefaults() {\r\n  this.contactForm.get(\"country\").patchValue(null);\r\n}\r\n </code></pre>\n\n\n\n<h3>Listen to the Select option change event</h3>\n\n\n\n<p>Listen to the change event using the&nbsp;<code>valueChanges</code>&nbsp;event as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> this.contactForm.get(\"country\").valueChanges\r\n    .subscribe(f=> {\r\n      this.onCountryChanged(f);\r\n  })\r\n \r\n  onCountryChanged(value) {\r\n    console.log('onCountryChanged')\r\n    console.log(value)\r\n  }\r\n </code></pre>\n\n\n\n<h3>Dynamically update the Drop down option</h3>\n\n\n\n<p>You can dynamically add or remove options from the&nbsp;<code>countries</code>&nbsp;array and it will reflect in the drop down immediately.</p>\n\n\n\n<p>Ask for the new country in template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Template\r\n \r\n&lt;p>\r\n  &lt;input &#91;(ngModel)]=\"country_name\">\r\n  &lt;button (click)=\"addCountry()\">Add&lt;/button>\r\n&lt;/p></code></pre>\n\n\n\n<p>And add it to countries array after verifying it does not exists.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ///Component\r\n \r\n country_name=\"\";\r\n \r\n addCountry() {\r\n    const country = this.countries.find(el => el.name === this.country_name);\r\n    if (!country) {\r\n      let id=Math.max.apply(Math, this.countries.map(function(o) { return o.id; }))\r\n      this.countries.push({id:id+1, name:this.country_name})\r\n      this.country_name=\"\";\r\n    }\r\n  }</code></pre>\n\n\n\n<h3>Dynamically Set Value</h3>\n\n\n\n<p>The following dynamically changes the value of the country via code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\n//Template\r\n \r\n&lt;p>\r\n  &lt;input &#91;(ngModel)]=\"set_country\">\r\n  &lt;button (click)=\"setCountry()\">Set Country&lt;/button>\r\n&lt;/p> </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n//Component\r\n \r\nset_country=\"\";\r\n \r\nsetCountry() {\r\n  const country = this.countries.find(el => el.name === this.set_country);\r\n  if (country) {\r\n    this.contactForm.get(\"country\").patchValue(country.id);\r\n  }\r\n}</code></pre>\n\n\n\n<p>The final application</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Select-Option-Drop-down-Example-in-Reactive-Forms.gif\" alt=\"Select Option Drop down Example in Reactive Forms\" class=\"wp-image-19007\"/><figcaption>Select Option Drop down Example in Reactive Forms</figcaption></figure>\n\n\n\n<h3>Complete Code</h3>\n\n\n\n<p><code>app.component.html</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h1> Angular Select Option Example&lt;/h1>\r\n \r\n&lt;form &#91;formGroup]=\"contactForm\" (ngSubmit)=\"submit()\">\r\n \r\n&lt;p>\r\n \r\n  &lt;select formControlName=\"country\">\r\n    &lt;option &#91;ngValue]=\"null\" disabled>Select Country&lt;/option>\r\n    &lt;option *ngFor=\"let country of countries\" &#91;ngValue]=\"country.id\">{{country.name}}&lt;/option>\r\n  &lt;/select>\r\n \r\n  &lt;button type=\"submit\">Submit&lt;/button>\r\n&lt;/p>\r\n \r\n&lt;/form>\r\n \r\n&lt;p>\r\n  &lt;input &#91;(ngModel)]=\"country_name\">\r\n  &lt;button (click)=\"addCountry()\">Add&lt;/button>\r\n&lt;/p>\r\n \r\n \r\n&lt;p>\r\n  &lt;input &#91;(ngModel)]=\"set_country\">\r\n  &lt;button (click)=\"setCountry()\">Set Country&lt;/button>\r\n&lt;/p></code></pre>\n\n\n\n<p><code>app.component.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, ViewChild, OnInit } from '@angular/core';\r\nimport { NgForm, FormGroup, FormControl, FormBuilder } from '@angular/forms';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n \r\n  title = 'Angular Select Options Example';\r\n  contactForm: FormGroup;\r\n \r\n  constructor(private fb: FormBuilder) {\r\n  }\r\n \r\n  country_name=\"\";\r\n  set_country=\"\";\r\n \r\n  countries = &#91;\r\n    { id: 1, name: \"United States\" },\r\n    { id: 2, name: \"Australia\" },\r\n    { id: 3, name: \"Canada\" },\r\n    { id: 4, name: \"Brazil\" },\r\n    { id: 5, name: \"England\" }\r\n  ];\r\n \r\n \r\n  ngOnInit() {\r\n \r\n    this.contactForm = this.fb.group({\r\n      country: &#91;null]\r\n    });\r\n \r\n    this.setDefaults();\r\n \r\n    this.contactForm.get(\"country\").valueChanges\r\n      .subscribe(f => {\r\n        this.onCountryChanged(f);\r\n      })\r\n  }\r\n \r\n  submit() {\r\n    console.log(\"Form Submitted\")\r\n    console.log(this.contactForm.value)\r\n  }\r\n \r\n  setDefaults() {\r\n    this.contactForm.get(\"country\").patchValue(null);\r\n  }\r\n \r\n  onCountryChanged(value) {\r\n    console.log('onCountryChanged')\r\n    console.log(value)\r\n  }\r\n \r\n  addCountry() {\r\n    const country = this.countries.find(el => el.name === this.country_name);\r\n    if (!country) {\r\n      let id=Math.max.apply(Math, this.countries.map(function(o) { return o.id; }))\r\n      this.countries.push({id:id+1, name:this.country_name})\r\n      this.country_name=\"\";\r\n    }\r\n  }\r\n \r\n  setCountry() {\r\n    const country = this.countries.find(el => el.name === this.set_country);\r\n    if (country) {\r\n      this.contactForm.get(\"country\").patchValue(country.id);\r\n    }\r\n  }\r\n} </code></pre>\n\n\n\n<h2>Select Options in Template Driven Forms</h2>\n\n\n\n<p>The following is the code for the select options in&nbsp;Template Driven Forms. Also refer to the tutorial on how to&nbsp;set value in template driven forms.</p>\n\n\n\n<p>We get the reference to the&nbsp;<code>contactForm</code>&nbsp;using the&nbsp;<code>@ViewChild</code>.</p>\n\n\n\n<p>Use the&nbsp;<code>setTimeout()</code>&nbsp;to wait for a change detection cycle so that the&nbsp;<code>@ViewChild</code>&nbsp;updates the reference to the&nbsp;<code>contactForm</code>. Without it the&nbsp;<code>contactForm</code>&nbsp;will return null.</p>\n\n\n\n<p>To Listen to the change we use the&nbsp;<code>event binding</code>&nbsp;using the&nbsp;<code>(ngModelChange)=\"onCountryChanged($event)\"</code>. We can also use the&nbsp;<code>valueChanges</code></p>\n\n\n\n<p>Rest of the code is very similar to the Reactive forms.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, ViewChild, OnInit } from '@angular/core';\r\nimport { NgForm, FormGroup, FormControl, FormBuilder } from '@angular/forms';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n \r\n  title = 'Angular Select Options Example';\r\n  \r\n  @ViewChild(\"contactForm\",null) contactForm:NgForm;\r\n \r\n \r\n  constructor(private fb: FormBuilder) {\r\n  }\r\n \r\n  country_name=\"\";\r\n  set_country=\"\";\r\n \r\n  countries = &#91;\r\n    { id: 1, name: \"United States\" },\r\n    { id: 2, name: \"Australia\" },\r\n    { id: 3, name: \"Canada\" },\r\n    { id: 4, name: \"Brazil\" },\r\n    { id: 5, name: \"England\" }\r\n  ];\r\n \r\n \r\n  ngOnInit() {\r\n \r\n    setTimeout(() => { \r\n      this.setDefaults();\r\n \r\n    })\r\n \r\n  }\r\n \r\n  submit() {\r\n    console.log(\"Form Submitted\")\r\n    console.log(this.contactForm.value)\r\n  }\r\n \r\n  setDefaults() {\r\n    this.contactForm.form.get(\"country\").patchValue(null);\r\n  }\r\n \r\n  onCountryChanged(value) {\r\n    console.log('onCountryChanged')\r\n    console.log(value)\r\n  }\r\n \r\n \r\n  addCountry() {\r\n    const country = this.countries.find(el => el.name === this.country_name);\r\n    if (!country) {\r\n      let id=Math.max.apply(Math, this.countries.map(function(o) { return o.id; }))\r\n      this.countries.push({id:id+1, name:this.country_name})\r\n      this.country_name=\"\";\r\n    }\r\n  }\r\n \r\n  setCountry() {\r\n    const country = this.countries.find(el => el.name === this.set_country);\r\n    if (country) {\r\n      this.contactForm.form.get(\"country\").patchValue(country.id);\r\n    }\r\n  }\r\n \r\n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;h1> Angular Select Option Example&lt;/h1>\r\n \r\n&lt;form #contactForm=\"ngForm\" (ngSubmit)=\"submit()\">\r\n \r\n  &lt;p>\r\n  \r\n    &lt;select name=\"country\" ngModel (ngModelChange)=\"onCountryChanged($event)\">\r\n      &lt;option &#91;ngValue]=\"null\" disabled>Select Country&lt;/option>\r\n      &lt;option *ngFor=\"let country of countries\" &#91;ngValue]=\"country.id\">{{country.name}}&lt;/option>\r\n    &lt;/select>\r\n  \r\n    &lt;button type=\"submit\">Submit&lt;/button>\r\n  \r\n  &lt;/p>\r\n  \r\n  &lt;/form>\r\n \r\n&lt;p>\r\n  &lt;input &#91;(ngModel)]=\"country_name\">\r\n  &lt;button (click)=\"addCountry()\">Add&lt;/button>\r\n&lt;/p>\r\n \r\n \r\n&lt;p>\r\n  &lt;input &#91;(ngModel)]=\"set_country\">\r\n  &lt;button (click)=\"setCountry()\">Set Country&lt;/button>\r\n&lt;/p></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Select Options in Reactive Forms Create a&nbsp;contactForm&nbsp;using the&nbsp;Reactive Form&nbsp;as shown below. The&nbsp;Form&nbsp;has only one&nbsp;Formcontrol&nbsp;field i.e.&nbsp;country. The value for the&nbsp;country&nbsp;is going to come from the&nbsp;countries&nbsp;array. We will store the&nbsp;id&nbsp;in the&nbsp;country&nbsp;field The select option for the&nbsp;country&nbsp;is as shown below. The&nbsp;formControlName&nbsp;directive maps the&nbsp;select&nbsp;to the&nbsp;country&nbsp;field of the&nbsp;contactForm. (&nbsp;&lt;select formControlName=&#8221;country&#8221;&gt;) &lt;option [ngValue]=&#8221;null&#8221; disabled &gt;&nbsp;displays the&nbsp;Select Country&nbsp;when no value for&nbsp;country&nbsp;is selected [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [130],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3614" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3614"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3614/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3826,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3614/revisions/3826"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3614"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3614"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3614"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
