[
  {
    "id": 3953,
    "date": "2020-12-12T06:18:49",
    "date_gmt": "2020-12-12T06:18:49",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3953" },
    "modified": "2020-12-12T06:29:21",
    "modified_gmt": "2020-12-12T06:29:21",
    "slug": "how-to-create-angular-2-application-using-system-js",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/how-to-create-angular-2-application-using-system-js/",
    "title": {
      "rendered": "How to Create Angular 2 Application Using System.JS"
    },
    "content": {
      "rendered": "\n<h2>How to Create Angular 2 Application Using SystemJS</h2>\n\n\n\n<p>In this tutorial,&nbsp;we are going to build a simple application for an ABC Bank Ltd. which just displays “Hello &amp; Welcome to ABC Bank Ltd. “</p>\n\n\n\n<h4>Setting up an Angular 2 Application</h4>\n\n\n\n<p>The Setting up and angular 2 application requires the following steps</p>\n\n\n\n<ol><li>Create an Application folder</li><li>Create Configuration file</li><li>Install&nbsp;<strong>Angular 2</strong>&nbsp;,&nbsp;<strong>Typescript</strong>,&nbsp;<strong>System.JS</strong>&nbsp;and other dependencies</li><li>Create First Component</li><li>Create a root Angular module</li><li>Bootstrap our application</li><li>Create the index.html</li><li>Run the application</li></ol>\n\n\n\n<h3>1. Create an Application Folder</h3>\n\n\n\n<p>Open a command prompt and create a folder&nbsp;<strong>GettingStarted</strong>. Then open Visual Studio Code and open the folder</p>\n\n\n\n<h3>2. Create Configuration file</h3>\n\n\n\n<p>Before we start to code, we need to configure the npm, Typescript &amp; System.JS. We discussed these topics in our previous tutorial Installing and getting started in Angular2</p>\n\n\n\n<h4>NPM Configuration file ( Package.json )</h4>\n\n\n\n<p><strong>Package.json</strong>&nbsp;file contains the metadata about modules required for our Angular Application. It contains a&nbsp;list of external dependencies that are used in our application. The npm ( node package manager) uses these files to install the required dependencies.</p>\n\n\n\n<p>The Sample Package.json is listed below. Create file named <strong>Package.json</strong> in the <strong>root folder</strong> and copy the following content</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\r\n     \"name\": \"abc-bank-ltd\",\r\n     \"version\": \"1.0.0\",\r\n     \"scripts\": {\r\n         \"start\": \"tsc &amp;&amp; concurrently \\\"npm run tsc:w\\\" \\\"npm run lite\\\" \",\r\n         \"lite\": \"lite-server\",\r\n         \"postinstall\": \"typings install\",\r\n         \"tsc\": \"tsc\",\r\n         \"tsc:w\": \"tsc -w\",\r\n         \"typings\": \"typings\"\r\n     },\r\n     \"license\": \"ISC\",\r\n     \"dependencies\": {\r\n         \"@angular/common\": \"2.0.0\",\r\n         \"@angular/compiler\": \"2.0.0\",\r\n         \"@angular/core\": \"2.0.0\",\r\n         \"@angular/forms\": \"2.0.0\",\r\n         \"@angular/http\": \"2.0.0\",\r\n         \"@angular/platform-browser\": \"2.0.0\",\r\n         \"@angular/platform-browser-dynamic\": \"2.0.0\",\r\n         \"@angular/router\": \"3.0.0\",\r\n         \"@angular/upgrade\": \"2.0.0\",\r\n \r\n         \"core-js\": \"^2.4.1\",\r\n         \"reflect-metadata\": \"^0.1.3\",\r\n         \"rxjs\": \"5.0.0-beta.12\",\r\n         \"systemjs\": \"0.19.27\",\r\n         \"zone.js\": \"^0.6.23\",\r\n \r\n         \"angular2-in-memory-web-api\": \"0.0.20\",\r\n         \"bootstrap\": \"^3.3.6\"\r\n     },\r\n   \r\n     \"devDependencies\": {\r\n         \"concurrently\": \"^2.0.0\",\r\n         \"lite-server\": \"^2.2.2\",\r\n         \"typescript\": \"^2.0.2\",\r\n         \"typings\":\"^1.3.2\"\r\n     }\r\n}</code></pre>\n\n\n\n<h4>Typescript Configuration file</h4>\n\n\n\n<p><strong>Typescript</strong>&nbsp;requires two configuration files. One is&nbsp;<strong>tsconfig.json</strong>, which must be present in the root folder. The second file is<strong>&nbsp;typings.json</strong>&nbsp;which contains the Typescript definition file</p>\n\n\n\n<p>Goto to the <strong>root folder of the project</strong> and create the <strong>tsconfig.json file</strong>. Copy the following content</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\n{\r\n     \"compilerOptions\": {\r\n         \"target\": \"es5\",\r\n         \"module\": \"commonjs\",\r\n         \"moduleResolution\": \"node\",\r\n         \"sourceMap\": true,\r\n         \"emitDecoratorMetadata\": true,\r\n         \"experimentalDecorators\": true,\r\n         \"removeComments\": false,\r\n         \"noImplicitAny\": false\r\n     }\r\n}</code></pre>\n\n\n\n<p>Next, create the typings.json file and copy paste the following</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\r\n     \"globalDependencies\": {\r\n         \"core-js\": \"registry:dt/core-js#0.0.0+20160725163759\",\r\n         \"jasmine\": \"registry:dt/jasmine#2.2.0+20160621224255\",\r\n         \"node\": \"registry:dt/node#6.0.0+20160909174046\"\r\n     }\r\n}</code></pre>\n\n\n\n<h4>Systemjs.config.js (Module loader)</h4>\n\n\n\n<p>The Angular 2 Applications needs module loader to load the application &amp; associates modules dynamically. This is done using the SystemJs. The SystemJs has its own configuration file, which it uses to load the application</p>\n\n\n\n<p>Create <strong>Systemjs.config.js in the root folder</strong> of the application and copy the following.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/**\r\n * System configuration for Angular 2 samples\r\n * Adjust as necessary for your application needs.\r\n */\r\n(function (global) {\r\n   System.config({\r\n \r\n     // paths serve as alias\r\n     paths: {\r\n         'npm:': 'node_modules/'\r\n     },\r\n \r\n     // map tells the System loader where to look for things\r\n     map: {\r\n \r\n         // our app is within the app folder\r\n         app: 'app',\r\n \r\n         // angular bundles\r\n         '@angular/core': 'npm:@angular/core/bundles/core.umd.js',\r\n         '@angular/common': 'npm:@angular/common/bundles/common.umd.js',\r\n         '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.js',\r\n         '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.js',\r\n         '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js',\r\n         '@angular/http': 'npm:@angular/http/bundles/http.umd.js',\r\n         '@angular/router': 'npm:@angular/router/bundles/router.umd.js',\r\n         '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.js',\r\n \r\n         // other libraries\r\n         'rxjs': 'npm:rxjs',\r\n         'angular2-in-memory-web-api': 'npm:angular2-in-memory-web-api',\r\n     },\r\n \r\n     // packages tells the System loader how to load when no filename and/or no extension\r\n     packages: {\r\n         'app': { main: 'bank', defaultExtension: 'js' },\r\n         rxjs: { defaultExtension: 'js' },\r\n         'angular2-in-memory-web-api': { main: './index.js', defaultExtension: 'js'\r\n     }\r\n   }\r\n });\r\n})(this);</code></pre>\n\n\n\n<h3>3. Install the Angular2 libraries, Typescript &amp;&nbsp;SystemJs</h3>\n\n\n\n<p>The final step is to run the npm package manager to install the dependencies. Right click and select Open the Command prompt. You can also Open the command prompt directly and go to the root folder of the application</p>\n\n\n\n<p>Type the following command</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install </code></pre>\n\n\n\n<p>If the installation is successful, you will see the&nbsp;<strong>Node_modules</strong>&nbsp;&amp;&nbsp;<strong>typings folders</strong>&nbsp;under the root folder. You may see many warning &amp; errors ignore them. You can also run the npm installer again in case any issues.</p>\n\n\n\n<p>If the typings folder does not appear then just run the following command in npm shell</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm run typings install </code></pre>\n\n\n\n<p>If you still face problems in installing then run the following command in npm shell</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm cache clean </code></pre>\n\n\n\n<p>Then try running the npm install again</p>\n\n\n\n<h3>4. Create your first Component</h3>\n\n\n\n<p>The next step is to create a Component file. First Create an <strong>App Folder</strong> under the root folder. Create <strong>bank.component.ts</strong> inside the app directory. Copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\n \r\n@Component({\r\n    selector: 'bank-app',\r\n    template: '&lt;h1>Hello &amp; Welcome to ABC Bank Ltd. &lt;/h1>'\r\n})\r\nexport class BankComponent \r\n{\r\n}</code></pre>\n\n\n\n<p>The Component is the most important part of the angular 2. It controls the region of the screen or View. It consists of three main parts one is class, a class decorator, and an import statement</p>\n\n\n\n<h4>Component class</h4>\n\n\n\n<p>A component is a simple class. The class is defined using the Export keyword so that it can be used in other parts of the application</p>\n\n\n\n<pre class=\"wp-block-code\"><code> export class BankComponent { } </code></pre>\n\n\n\n<h4>@Component decorator</h4>\n\n\n\n<p>The BankComponent class is then, <strong>decorated with @Component decorator attribute</strong>. The class decorator provides Metadata about the component class. The Angular uses this Metadata to create the view</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Component({\r\n    selector: 'bank-app',\r\n    template: '&lt;h1>Hello &amp; Welcome to ABC Bank Ltd. &lt;/h1>'\r\n})</code></pre>\n\n\n\n<p>The Metadata above has two fields. The selector &amp; template.</p>\n\n\n\n<h5>Template</h5>\n\n\n\n<p>The template field is plain HTML that tells angular what to display. In the example, above it displays “<strong>Hello &amp;&nbsp;</strong>Welcome<strong>&nbsp;to ABC Bank Ltd</strong>” inside H1 tag</p>\n\n\n\n<h5>Selector</h5>\n\n\n\n<p>The selector tells angular, where to display. In the example above selector is “<strong>bank-app</strong>”. &nbsp;The selector (bank-app) is replaced by the HTML template, when Angular renders the view.</p>\n\n\n\n<h4>Import</h4>\n\n\n\n<p>Since we are using the @Component decorator, we need to tell the Angular , where to find it. The @component decorator is available in @angular/core module. Hence we need to refer it our class. This is done using the import method. As follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component } from '@angular/core'; </code></pre>\n\n\n\n<h3>5. Create the root Angular Module</h3>\n\n\n\n<p>The Angular 2 applications are modular. Each feature of the application must be developed using small packets based on a feature and are grouped into modules. The every angular application must have at least one module called as root Module.</p>\n\n\n\n<p>Create a file under the app folder with the name bank.module.ts. This is the main module of our application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\n \r\n@NgModule({\r\n    imports: &#91; BrowserModule ],\r\n    declarations: &#91; AppComponent ],\r\n    bootstrap: &#91; AppComponent ]\r\n})\r\nexport class BankModule{ }</code></pre>\n\n\n\n<p>First, create a BankModule class. Note that we are using the export keyword so that this module can be used in other modules. You can include any relevant codes in the class, but right now we leave it blank.</p>\n\n\n\n<h4>@NgModule</h4>\n\n\n\n<p>We need to tell angular that this class is an Angular Module. We can do this by decorating the class with @NgModule Decorator as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@NgModule({\r\n    imports: &#91; BrowserModule ],\r\n    declarations: &#91; BankComponent ],\r\n    bootstrap: &#91; BankComponent ]\r\n})</code></pre>\n\n\n\n<p><strong>@NgModule</strong>&nbsp;passes Metadata to angular by using the fields imports, declarations &amp; bootstrap.</p>\n\n\n\n<p><strong>Imports</strong>&nbsp;Metadata tells angular, the modules required by this module. The BankModule requires BrowserModule</p>\n\n\n\n<p><strong>Declaration</strong>&nbsp;Metadata lists the components, directives , services etc that are part of this module. We have only one component in our example, hence we list it here.</p>\n\n\n\n<p>Bootstrap Metadata identifies the root component for the module. Angular loads this component, when it loads the module. In our example, BankComponent must be loaded when the application is loaded. Hence that is listed here</p>\n\n\n\n<h3>6. Bootstrap our application</h3>\n\n\n\n<p>Now we need to tell angular to load our root module.This requires us to create another javascript module with the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { BankModule } from './bank.module';\r\nplatformBrowserDynamic().bootstrapModule(BankModule);\r\n </code></pre>\n\n\n\n<p>In the above code, we import platformBrowserDynamic . This function contains necessary methods to bootstrap the angular application. The bootstrapper must know the location of our BankModule. Hence in the next line, we import the BankModule.&nbsp;Finally, we invoke the bootstrapModule(BankModule) to start our BankModule Application</p>\n\n\n\n<h3>7. Create the Index.html</h3>\n\n\n\n<p>Finally, we need to create our root an HTML file, i.e. index.html. Create the index.html file in the root folder and copy the content.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n    &lt;head>\r\n       &lt;title>Angular 2 Tutorial from TekTutorialsHub.com - Getting Started&lt;/title>\r\n       &lt;meta charset=\"UTF-8\">\r\n       &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n \r\n       &lt;!-- 1. Load libraries -->\r\n       &lt;!-- Polyfill(s) for older browsers -->\r\n       &lt;script src=\"node_modules/core-js/client/shim.min.js\">&lt;/script>\r\n       &lt;script src=\"node_modules/zone.js/dist/zone.js\">&lt;/script>\r\n       &lt;script src=\"node_modules/reflect-metadata/Reflect.js\">&lt;/script>\r\n       &lt;script src=\"node_modules/systemjs/dist/system.src.js\">&lt;/script>\r\n \r\n       &lt;!-- 2. Bootstrap -->\r\n       &lt;link href=\"node_modules/bootstrap/dist/css/bootstrap.css\" rel=\"stylesheet\" />\r\n \r\n       &lt;!-- 3. Configure SystemJS -->\r\n       &lt;script src=\"systemjs.config.js\">&lt;/script>\r\n       &lt;script>\r\n            System.import('app').catch(function(err){ console.error(err); });\r\n        &lt;/script>\r\n    &lt;/head>\r\n \r\n    &lt;!-- 4. Display the application -->\r\n    &lt;body>\r\n        &lt;div class='container'>\r\n            &lt;bank-app>Loading...&lt;/bank-app>\r\n        &lt;/div>\r\n    &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<h4>bank-app CSS Selector</h4>\n\n\n\n<p>You will see that we have added bank-app CSS Selector inside the body tag of our index.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;bank-app>Loading...&lt;/bank-app> </code></pre>\n\n\n\n<p>This is where Angular 2 loads our application. Scroll back to and take a look at the <strong>bank.controller.ts</strong>. In the <strong>@Component decorator</strong>, we have used ‘bank-app’ in the selector field. The Html inside the template field is placed inside the ‘bank-app’ CSS selector inside the index.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Component({\r\n    selector: 'bank-app',\r\n    template: '&lt;h1>Hello &amp; Welcome to ABC Bank Ltd. &lt;/h1>'\r\n})\r\n </code></pre>\n\n\n\n<h4>System.js</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- 2. Configure SystemJS -->\r\n&lt;script src=\"systemjs.config.js\">&lt;/script>\r\n&lt;script>\r\n    System.import('app').catch(function(err){ console.error(err); });\r\n&lt;/script></code></pre>\n\n\n\n<p>Note that we have loaded the<strong>&nbsp;SystemJs javascript</strong>. SystemJs is responsible loading the required javascript file required by our angular Application. This is done by invoking the import method and bootstrapping the SystemJS.</p>\n\n\n\n<h3>8. Run and Application</h3>\n\n\n\n<p>Finally, we are ready to roll. Right click on and select <strong>Open the command Prompt</strong> and enter the following command</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Npm start </code></pre>\n\n\n\n<p>npm creates the instance of the&nbsp;lite<strong>&nbsp;server</strong>&nbsp;and loads the index.html in the browser. You will see “Hello &amp; Welcome to ABC Bank Ltd” displayed</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>How to Create Angular 2 Application Using SystemJS In this tutorial,&nbsp;we are going to build a simple application for an ABC Bank Ltd. which just displays “Hello &amp; Welcome to ABC Bank Ltd. “ Setting up an Angular 2 Application The Setting up and angular 2 application requires the following steps Create an Application folder [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [159],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3953" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3953"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3953/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3954,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3953/revisions/3954"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3953"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3953"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3953"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3955,
    "date": "2020-12-12T06:29:01",
    "date_gmt": "2020-12-12T06:29:01",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3955" },
    "modified": "2020-12-12T06:29:32",
    "modified_gmt": "2020-12-12T06:29:32",
    "slug": "angular-webpack-tutorial",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-webpack-tutorial/",
    "title": { "rendered": "Angular Webpack Tutorial" },
    "content": {
      "rendered": "\n<h2>What is Webpack</h2>\n\n\n\n<p>The dynamic web applications usually have lots of javascript files. These files are either created by you or it could be third party libraries like jquery/bootstrap etc. We include these in our&nbsp;<strong>index.html</strong>&nbsp;file using&nbsp;<em><strong>&lt;script&gt;</strong></em>&nbsp;tag. When a&nbsp;user sends requests to our application, the browser requests and loads these files one at a time. If you have lots of these files, then it will make your application slow. The solution to this problem is to merge all these files into a one or two files so that the browser can download the entire file in one request. This is where&nbsp;<strong>Webpack</strong>&nbsp;is used.</p>\n\n\n\n<p>Webpack is a powerful module bundler, which scans your web application looking for javascript files and merges them into one ( or more) big file. Webpack has the ability to bundle any kind of file like JavaScript, CSS, SASS, LESS, images, HTML, &amp; fonts etc. Webpack also comes with Development Server that supports hot module reloading.</p>\n\n\n\n<h2>Angular Webpack Tutorial</h2>\n\n\n\n<p>In this tutorial, we are going to build an example application which displays the “<strong>Hello and welcome to Angular</strong>” with the logo of Angular below it.</p>\n\n\n\n<p>This Tutorial follows the official Angular Webpack guide   We have used the codes found in that tutorial and made few changes where necessary. We also removed the Testing Framework to make it simpler.</p>\n\n\n\n<h3>Prerequisites</h3>\n\n\n\n<p>You need to install following before you proceed further with this tutorial</p>\n\n\n\n<ul><li>Visual Studio Code (or any other editor of your choice)</li><li>NPM Package Manager</li></ul>\n\n\n\n<p>You can read instruction on how to install from the tutorial Installing and getting started with Angular</p>\n\n\n\n<h2>Setting up an Angular Application</h2>\n\n\n\n<p>The Setting up and angular Application requires the following steps</p>\n\n\n\n<ol><li>Create an Application folder</li><li>Create package.json configuration file</li><li>Installing Dependencies</li><li>Create the Component</li><li>Create the root module</li><li>Bootstrap our application</li><li>Create the index.html</li><li>Configure our Application</li><li>Run the application</li></ol>\n\n\n\n<h2>Create an Application Folder</h2>\n\n\n\n<p>Open a command prompt and create the folder <strong><em>AngularWebpack</em></strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>md AngularWebpackcd AngularWebpack </code></pre>\n\n\n\n<h2>package.json Configuration file</h2>\n\n\n\n<p>A&nbsp;<strong>package.json</strong>&nbsp;file contains the metadata about our application. It includes the list of Javascript libraries that are used by our application. The NPM package manager reads this file to install/update the libraries.</p>\n\n\n\n<p>You can manually create the package.json file and run the command “npm install” to install the dependencies. In this tutorial, we will show it how to do it from the&nbsp;command prompt.</p>\n\n\n\n<p>Run the following command to create the package.json file</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm init -f </code></pre>\n\n\n\n<p>Open the Visual Studio code and you can see that the following package.json file in the root folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\r\n    \"name\": \"AngualrWebPack\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n        \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\r\n    },\r\n    \"keywords\": &#91;],\r\n    \"author\": \"\",\r\n    \"license\": \"ISC\"\r\n}</code></pre>\n\n\n\n<h2>Installing Dependencies</h2>\n\n\n\n<p>The next step is to download and install Angular &amp; other libraries. We will use NPM package manager to install them.</p>\n\n\n\n<h4>Installing Angular libraries</h4>\n\n\n\n<p>Run the following command from the command prompt to install the Angular components.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install \n@angular/common \n@angular/compiler \n@angular/core @angular/forms  \n@angular/http \n@angular/platform-browser \n@angular/platform-browser-dynamic  \n@angular/router --save\r\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>–save</strong>&nbsp;option ensures that these libraries are saved to package.json file</p>\n\n\n\n<h4>Installing third party libraries</h4>\n\n\n\n<p>The Angular requires you to install the following dependencies</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install core-js rxjs zone.js --save </code></pre>\n\n\n\n<p><strong>Rxjs or Reactive Extensions (Rx)</strong> is a library for composing asynchronous and event-based programs using observable sequences and LINQ-style query operators. Read the complete tutorial from here</p>\n\n\n\n<p><strong>Zone</strong> is used for change detection. For more read Zones in Angular</p>\n\n\n\n<p><strong>Core-js</strong> is a ES6 polyfill for typescript. You can read it from here</p>\n\n\n\n<h4>Installing Development Dependencies</h4>\n\n\n\n<p>The development dependencies are those libraries, which required only to develop the application. For Example, javascript libraries for unit tests, minification, module bundles are required only at the time of development of the application.</p>\n\n\n\n<p>Our Angular application needs Typescript. Webpack module, loaders, &nbsp;plugins, and tools for testing the app etc.</p>\n\n\n\n<h4>Typescript</h4>\n\n\n\n<p>Typescript is a superset of Javascript. It extends the Javascript and brings options like static typing, classes, interfaces. The Code written in typescript cannot be used directly in the web browser. It must be compiled to javascript before running in the web browser. This process is known as Transpiling. The Transpiling is done by Typescript compiler (tsc). Read Complete Typescript tutorial</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install typescript --save-dev </code></pre>\n\n\n\n<h4>Typings</h4>\n\n\n\n<p>Typescript forces you to define the types before using them. This has great advantages as any errors are detected at the compile time rather than at the run time.</p>\n\n\n\n<p>But our application is going to use a lot&nbsp;of Third Party Javascript libraries in our application. Being written in Javascript, they do not have types defined in them. The typescript compiler will throw an&nbsp;error as it does not recognize them.</p>\n\n\n\n<p>This where type definition files come into play. They provide the type information to these javascript libraries. We need to download type definition files for each of these libraries. That is done using the typings.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install @types/node @types/jasmine --save-dev </code></pre>\n\n\n\n<h4>Webpack</h4>\n\n\n\n<p>Webpack along with Webpack dev server can be installed using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install webpack webpack-dev-server webpack-merge --save-dev </code></pre>\n\n\n\n<p>The&nbsp;<strong>–save-dev</strong>&nbsp;option ensures that these are installed as development dependencies</p>\n\n\n\n<h4>Webpack loaders and plugins</h4>\n\n\n\n<p>Webpack supports custom loaders and plugins. A loader is a program that allows you to preprocess files as you “load” them. They extract the content of the file, transform them and then return the transformed content to Webpack for bundling. With the help of leaders, the Webpack can handle any type of files.</p>\n\n\n\n<p>You can read more about loaders from here</p>\n\n\n\n<p>Run the following command to install the required Webpack loaders</p>\n\n\n\n<h5>Webpack loaders</h5>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install angular2-template-loader awesome-typescript-loader css-loader file-loader html-loader null-loader raw-loader style-loader to-string-loader --save-dev\r\n</code></pre>\n\n\n\n<h5>Webpack plugins</h5>\n\n\n\n<p>A plugin is a program that changes the behaviour of Webpack</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install html-webpack-plugin webpack-merge extract-text-webpack-plugin --save-dev</code></pre>\n\n\n\n<h4>Others dependencies</h4>\n\n\n\n<pre class=\"wp-block-code\"><code> npm install rimraf --save-dev </code></pre>\n\n\n\n<h4>Testing tools</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\nimport '../assets/css/styles.css';\r\n \r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: &#91;'./app.component.css']\r\n})\r\n \r\nexport class AppComponent { }</code></pre>\n\n\n\n<h2>Creating the Component</h2>\n\n\n\n<p>So far we have installed all the required dependencies. The next step is to create our application. Under the root folder of our application create folder called&nbsp;<strong>src</strong>. Under src create a folder called&nbsp;<strong>app</strong>.</p>\n\n\n\n<h3>Component class</h3>\n\n\n\n<p>First, let us create an Angular Component. Create <strong>app.component.ts</strong> under the<strong> src/app folder</strong> and copy the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\nimport '../assets/css/styles.css';\r\n \r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: &#91;'./app.component.css']\r\n})\r\n \r\nexport class AppComponent { }</code></pre>\n\n\n\n<p>The Component is the most important part of the angular. It controls the region of the screen or View. It consists of three main parts one is class, a class decorator, and an import statement</p>\n\n\n\n<h4>Component class</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>export class AppComponent { } </code></pre>\n\n\n\n<p>A component is a simple class. The class is defined using the Export keyword so that it can be used in other parts of the application. Our component class does not have any methods and properties. The component in real life will have methods and properties, which supply logic to our view.</p>\n\n\n\n<h4>@Component decorator</h4>\n\n\n\n<p>The AppComponent class is then, decorated with @Component decorator attribute. The @Component (called class decorator) provides Metadata about the component class. The Angular uses this Metadata to create the view</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Component({\r\n    selector: 'my-app',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: &#91;'./app.component.css']\r\n})</code></pre>\n\n\n\n<p>The Metadata above has three fields. The&nbsp;<strong>selector</strong>,&nbsp;<strong>templateURL</strong>&nbsp;&amp;&nbsp;<strong>styleUrls</strong></p>\n\n\n\n<h5>templateUrl</h5>\n\n\n\n<p>The templateUrl contains the path to the HTML file. The Angular uses this HTML file to render the view. In the above example, it points to the app.component.html file. Hence we need to create it. Create <strong>app.component.html</strong> file under the <strong>src/app folder</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;main>\r\n    &lt;h1>Hello from Angular Application with Webpack&lt;/h1>\r\n    &lt;img src=\"../assets/images/angular.png\">\r\n&lt;/main></code></pre>\n\n\n\n<h5>styleUrls</h5>\n\n\n\n<p>The styleUrls is an array of Style Sheets that angular2 uses to style our HTML file. In the above example, it points towards to app.component.css style sheet. Create a file <strong>app.component.css</strong> under <strong>src/app folder</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>main {\r\n    padding: 1em;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n    text-align: center;\r\n    margin-top: 50px;\r\n    display: block;\r\n}</code></pre>\n\n\n\n<h5>Selector</h5>\n\n\n\n<p>The selector tells angular, where to display the template. In the example above selector is “’my-app’”. The angular &nbsp;whenever it encounters the above tag replaces it with the template</p>\n\n\n\n<h4>Import statement</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\nimport '../assets/css/styles.css';</code></pre>\n\n\n\n<p>The import statement is used to import all the libraries that are used in our component class. This statement is similar to C# using statement. The @Component decorator is available in @angular/core module. Hence we need to refer it in our class. This is done using the import method as shown above.</p>\n\n\n\n<h2>Root Module</h2>\n\n\n\n<p>The Angular follows the modular approach, the application development. Every Angular application must have one module known as root Module. We will name it as <strong>app.module.ts</strong>. Create the file with the name <strong>app.module.ts</strong> under the <strong>folder src/app</strong> and add the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\n@NgModule({\r\n    imports: &#91;\r\n        BrowserModule\r\n    ],\r\n    declarations: &#91;\r\n        AppComponent\r\n    ],\r\n    bootstrap: &#91; AppComponent ]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>The Angular module is similar to any other component class we created earlier. Like Component, it consists of three parts. A&nbsp;<strong>class</strong>&nbsp;,&nbsp;<strong>class decorator</strong>&nbsp;and&nbsp;<strong>import statement</strong></p>\n\n\n\n<h3>Module class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class AppModule { }</code></pre>\n\n\n\n<p>Similar to the component, the Module class is defined with the export keyword. Export class ensures that you can use this class in any other class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@NgModule decorator </code></pre>\n\n\n\n<p>We used a @component decorator to define our component. The modules require a @ngModule decorator. @ngModue decorator passed metadata about the module. &amp; bootstrap.&nbsp;The @ngModule Metadata above has three fields. declarations, imports &amp; bootstrap.</p>\n\n\n\n<p><strong>Imports Metadata</strong>&nbsp;tells the angular list of other modules used by this module.</p>\n\n\n\n<p><strong>Declaration Metadata</strong>&nbsp;lists the components, directives, services etc that are part of this module.</p>\n\n\n\n<p><strong>Bootstrap Metadata</strong>&nbsp;identifies the root component of the module. When Angular loads the appModule it looks for bootstrap Metadata and loads all the components listed here. We want our module to AppComponent , hence we have listed it here</p>\n\n\n\n<h2>Bootstrapping our root module</h2>\n\n\n\n<p>We have so far created AppComponent which is bound to the HTML template app.component.html. We have added the AppComponent to AppModule. In AppModule we indicated that the AppComponent is to be loaded when AppModule is loaded</p>\n\n\n\n<p>The Next step is to ask the Angular to load the AppModule when the application is loaded. To do need to create main.ts file</p>\n\n\n\n<p>Create <strong>main.ts</strong> in the <strong>src folder</strong> and copy the following content</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { enableProdMode } from '@angular/core';\r\n \r\nimport { AppModule } from './app/app.module';\r\n \r\nif (process.env.ENV === 'production') {\r\n  enableProdMode();\r\n}\r\n \r\nplatformBrowserDynamic().bootstrapModule(AppModule);</code></pre>\n\n\n\n<p>First, we import platformBrowserDynamic library. This library contains all the functions required to bootstrap the angular application. Next, we import our AppModule. Finally, we invoke bootstrapModule method of platformBrowserDynamic library to bootstrap our AppModule</p>\n\n\n\n<h2>Index page</h2>\n\n\n\n<p>We need a root page for our application. Create index.html under <strong>src folder</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;!DOCTYPE html>\r\n&lt;html>\r\n  &lt;head>\r\n    &lt;base href=\"/\">\r\n    &lt;title>Angular With Webpack&lt;/title>\r\n    &lt;meta charset=\"UTF-8\">\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n  &lt;/head>\r\n  &lt;body>\r\n    &lt;my-app>Loading...&lt;/my-app>\r\n  &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<h3>Assets</h3>\n\n\n\n<p>We have imported styles.css and used “angular.png” image in our AppComponent.</p>\n\n\n\n<p>Create the folder <strong>src/assets/css</strong> and copy the <strong>styles.css</strong> to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> body {\r\n    background: #0147A7;\r\n    color: #fff;\r\n}</code></pre>\n\n\n\n<p>Similarly, create the folder <strong>assets/images</strong> under src. Download Angular Icon Icon and copy it there.</p>\n\n\n\n<h2>Configuring Our Application</h2>\n\n\n\n<p>We have successfully built our application. The next step is to run the application. But before that, we need to configure Typescript, Typings and Webpack libraries</p>\n\n\n\n<h3>Typescript</h3>\n\n\n\n<p>Create the file <strong>tsconfig.json</strong> in the<strong> src folder</strong> our project and copy the following</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\r\n  \"compilerOptions\": {\r\n    \"target\": \"es5\",\r\n    \"module\": \"commonjs\",\r\n    \"moduleResolution\": \"node\",\r\n    \"sourceMap\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"lib\": &#91; \"es2015\", \"dom\" ],\r\n    \"noImplicitAny\": true,\r\n    \"suppressImplicitAnyIndexErrors\": true,\r\n    \"typeRoots\": &#91;\r\n      \"../node_modules/@types/\"\r\n    ]\r\n  },\r\n  \"compileOnSave\": true,\r\n  \"exclude\": &#91;\r\n    \"node_modules/*\",\r\n    \"**/*-aot.ts\"\r\n  ]\r\n}\r\n </code></pre>\n\n\n\n<p>You can read https://www.typescriptlang.org/docs/handbook/tsconfig-json.html to learn about each of those compiler options.</p>\n\n\n\n<h3>Webpack Bundle</h3>\n\n\n\n<p>The next step is to configure the Webpack. Webpack allows us to bundle all our javascript files into a one or more files. Let us create three bundles in our application</p>\n\n\n\n<p>In the first bundle, we add all our application code like components, service, modules etc. We call it as an app. We do not have to create a separate file to that. Our&nbsp;<strong>main.ts</strong>&nbsp;file will be the starting point for this bundle.</p>\n\n\n\n<p>We put all the external libraries like Rxjs, Zone etc into a separate bundle. This includes Angular libraries also. Let us call it as the vendor. To do that we need to create the <strong>vendor.ts</strong> and import required libraries. Create the file called the vendor.ts under <strong>src folder</strong> and copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n// Angular\r\nimport '@angular/platform-browser';\r\nimport '@angular/platform-browser-dynamic';\r\nimport '@angular/core';\r\nimport '@angular/common';\r\nimport '@angular/http';\r\nimport '@angular/router';\r\n \r\n// RxJS\r\nimport 'rxjs';\r\n \r\n// Other vendors for example jQuery, Lodash or Bootstrap\r\n// You can import js, ts, css, sass, ...</code></pre>\n\n\n\n<p>In the third bundle, we include the polyfills we require to run Angular applications in most modern browsers. Create a file called <strong>polyfills.ts</strong> under the <strong>src folder</strong> and copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'core-js/es6';\r\nimport 'core-js/es7/reflect';\r\nrequire('zone.js/dist/zone');\r\n \r\nif (process.env.ENV === 'production') {\r\n  // Production\r\n} else {\r\n  // Development and test\r\n  Error&#91;'stackTraceLimit'] = Infinity;\r\n  require('zone.js/dist/long-stack-trace-zone');\r\n}\r\n </code></pre>\n\n\n\n<h3>Webpack configuration</h3>\n\n\n\n<p>The next step is to configure the Webpack.</p>\n\n\n\n<p>The Webpack by convention uses the <strong>webpack.config.js</strong> file to read the configuration information. Create the <strong>webpack.config.js</strong> in the <strong>root folder</strong> of our project. Add the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code> module.exports = require('./config/webpack.dev.js'); </code></pre>\n\n\n\n<p>The above code tells the Webpack to read the configuration file&nbsp;<strong>webpack.dev.js</strong>&nbsp;from the config folder.</p>\n\n\n\n<p>The Webpack can be setup so that you can have a separate configuration option for testing, development, and production. What you need to do is to create separate config files for development. testing and production and then switch between this config file in the main configuration file (webpack.config.js)</p>\n\n\n\n<p>Create the folder&nbsp;<strong>“config”</strong>&nbsp;in the root of our project. This is where we are going to put all over Webpack related configuration option</p>\n\n\n\n<h4>Helper functions</h4>\n\n\n\n<p>Create the file <strong>helpers.js</strong> under the <strong>folder config </strong>and copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var path = require('path');\r\n \r\nvar _root = path.resolve(__dirname, '..');\r\n \r\nfunction root(args) {\r\n  args = Array.prototype.slice.call(arguments, 0);\r\n  return path.join.apply(path, &#91;_root].concat(args));\r\n}\r\n \r\nexports.root = root;</code></pre>\n\n\n\n<h4>Common Configurations</h4>\n\n\n\n<p>Create the file <strong>webpack.common.js</strong> under the <strong>folder config</strong> and copy the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var webpack = require('webpack');\r\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\r\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nvar helpers = require('./helpers');\r\n \r\nmodule.exports = {\r\n  entry: {\r\n    'polyfills': './src/polyfills.ts',\r\n    'vendor': './src/vendor.ts',\r\n    'app': './src/main.ts'\r\n  },\r\n \r\n  resolve: {\r\n    extensions: &#91;'.ts', '.js']\r\n  },\r\n \r\n  module: {\r\n    rules: &#91;\r\n      {\r\n        test: /\\.ts$/,\r\n        loaders: &#91;\r\n          {\r\n            loader: 'awesome-typescript-loader',\r\n            options: { configFileName: helpers.root('src', 'tsconfig.json') }\r\n          } , 'angular2-template-loader'\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.html$/,\r\n        loader: 'html-loader'\r\n      },\r\n      {\r\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\r\n        loader: 'file-loader?name=assets/&#91;name].&#91;hash].&#91;ext]'\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        exclude: helpers.root('src', 'app'),\r\n        loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap' })\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        include: helpers.root('src', 'app'),\r\n        loader: 'raw-loader'\r\n      }\r\n    ]\r\n  },\r\n \r\n  plugins: &#91;\r\n    // Workaround for angular/angular#11580\r\n    new webpack.ContextReplacementPlugin(\r\n      // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\r\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\r\n      helpers.root('./src'), // location of your src\r\n      {} // a map of your routes\r\n    ),\r\n \r\n    new webpack.optimize.CommonsChunkPlugin({\r\n      name: &#91;'app', 'vendor', 'polyfills']\r\n    }),\r\n \r\n    new HtmlWebpackPlugin({\r\n      template: 'src/index.html'\r\n    })\r\n  ]\r\n};\r\n </code></pre>\n\n\n\n<p>The webpack.common.js config will contain all the configuration settings, which are common to development, testing, and production builds.</p>\n\n\n\n<p>Now let us look at each part</p>\n\n\n\n<pre class=\"wp-block-code\"><code>entry: {\r\n    'polyfills': './src/polyfills.ts',\r\n    'vendor': './src/vendor.ts',\r\n    'app': './src/main.ts'\r\n},</code></pre>\n\n\n\n<p>First, we let Webpack know our entry points. Remember that we have decided to create three bundles of our application. Our three entry points are&nbsp;<strong>polyfills.ts</strong>&nbsp;,&nbsp;<strong>vendor.ts</strong>,&nbsp;and&nbsp;<strong>main.ts</strong>&nbsp;all located in the src folder.</p>\n\n\n\n<p>The Webpack starts from these files and traverses through it to find dependencies and merges all of them one bundle per each entry.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> module: {\r\n    rules: &#91;\r\n      {\r\n        test: /\\.ts$/,\r\n        loaders: &#91;\r\n          {\r\n            loader: 'awesome-typescript-loader',\r\n            options: { configFileName: helpers.root('src', 'tsconfig.json') }\r\n          } , 'angular2-template-loader'\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.html$/,\r\n        loader: 'html-loader'\r\n      },\r\n      {\r\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\r\n        loader: 'file-loader?name=assets/&#91;name].&#91;hash].&#91;ext]'\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        exclude: helpers.root('src', 'app'),\r\n        loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap' })\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        include: helpers.root('src', 'app'),\r\n        loader: 'raw-loader'\r\n      }\r\n    ]\r\n  },</code></pre>\n\n\n\n<p>Webpack then uses <strong>leaders</strong> to transform our files. For example, the Typescript files (ts extension) are passed through “angular2-template-loade” and then to “awesome-typescript-loader” (Right to left)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nplugins: &#91;\r\n    // Workaround for angular/angular#11580\r\n    new webpack.ContextReplacementPlugin(\r\n      // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\r\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\r\n      helpers.root('./src'), // location of your src\r\n      {} // a map of your routes\r\n    ),\r\n \r\n    new webpack.optimize.CommonsChunkPlugin({\r\n      name: &#91;'app', 'vendor', 'polyfills']\r\n    }),\r\n \r\n    new HtmlWebpackPlugin({\r\n      template: 'src/index.html'\r\n    })\r\n  ]</code></pre>\n\n\n\n<p>The&nbsp;<em>CommonsChunkPlugin</em>&nbsp;removes all the multiple used chunks of code and uses it only once.</p>\n\n\n\n<p>The&nbsp;<em>HtmlWebpackPlugin</em>&nbsp;adds a script tag to our index.html for the each of the bundle created.</p>\n\n\n\n<h4>Development specific configuration</h4>\n\n\n\n<p>Create <strong>webpack.dev.js</strong> under the <strong>config folder</strong> and add the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var webpackMerge = require('webpack-merge');\r\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\r\nvar commonConfig = require('./webpack.common.js');\r\nvar helpers = require('./helpers');\r\n \r\nmodule.exports = webpackMerge(commonConfig, {\r\n  devtool: 'cheap-module-eval-source-map',\r\n \r\n  output: {\r\n    path: helpers.root('dist'),\r\n    publicPath: '/',\r\n    filename: '&#91;name].js',\r\n    chunkFilename: '&#91;id].chunk.js'\r\n  },\r\n \r\n  plugins: &#91;\r\n    new ExtractTextPlugin('&#91;name].css')\r\n  ],\r\n \r\n  devServer: {\r\n    historyApiFallback: true,\r\n    stats: 'minimal'\r\n  }\r\n});\r\n </code></pre>\n\n\n\n<p>The <strong>webpack.dev.js</strong> file imports the <strong>webpack.common.js</strong> and uses additional configuration options required only for the development</p>\n\n\n\n<pre class=\"wp-block-code\"><code>devtool: 'cheap-module-eval-source-map', </code></pre>\n\n\n\n<p>The devtool defines how the source map is created. The source maps help in debugging our applications in the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>output: {\r\n    path: path.resolve(rootDir, 'dist'),\r\n    publicPath: 'http://localhost:8080/',\r\n    filename: '&#91;name].js',\r\n    chunkFilename: '&#91;id].chunk.js'\r\n},</code></pre>\n\n\n\n<p>Output configuration has options that affect the output of the Webpack compilation. You can configure location on disk where the compiled files are written to (path), the name of the bundle (filename), the name of the chunk file (chunkfilename) and public URL path (publicPath) etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> plugins: &#91;    new ExtractTextPlugin('&#91;name].css')], </code></pre>\n\n\n\n<p>You call any development environment specific plugin here. The <strong><em>extract-text-</em></strong>webpack<strong><em>-plugin</em></strong> removes the compiled CSS from the bundle and emits is as a separate file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>devServer: {    historyApiFallback: true,    stats: 'minimal'} </code></pre>\n\n\n\n<p>The devServer is used to configure the behavior of web pack-dev-server</p>\n\n\n\n<h2>Package.json</h2>\n\n\n\n<p>Finally, Open the package.json and replace the scripts options with the code below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"scripts\": {\r\n     \"start\": \"webpack-dev-server --inline --progress --port 8080\"\r\n  },</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Webpack The dynamic web applications usually have lots of javascript files. These files are either created by you or it could be third party libraries like jquery/bootstrap etc. We include these in our&nbsp;index.html&nbsp;file using&nbsp;&lt;script&gt;&nbsp;tag. When a&nbsp;user sends requests to our application, the browser requests and loads these files one at a time. If [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [159],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3955" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3955"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3955/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3956,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3955/revisions/3956"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3955"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3955"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3955"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
