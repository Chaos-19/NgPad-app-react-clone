[
  {
    "id": 3497,
    "date": "2020-11-30T06:45:07",
    "date_gmt": "2020-11-30T06:45:07",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3497"
    },
    "modified": "2020-12-12T06:51:32",
    "modified_gmt": "2020-12-12T06:51:32",
    "slug": "angular-directives",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-directives/",
    "title": {
      "rendered": "Angular Directives"
    },
    "content": {
      "rendered": "\n<h2>What is Angular Directive</h2>\n\n\n\n<p>The Angular directive helps us to manipulate the DOM. You can change the appearance, behavior, or layout of a DOM element using the Directives. They help&nbsp;you to extend HTML</p>\n\n\n\n<p>There are three kinds of directives in Angular:</p>\n\n\n\n<ol><li>Component Directive</li><li>Structural directives</li><li>Attribute directives</li></ol>\n\n\n\n<h2>Component Directive</h2>\n\n\n\n<p>Components are special directives in Angular. They are the directive with a template (view) We covered how to create Components in Angular tutorial.</p>\n\n\n\n<h2>Structural Directives</h2>\n\n\n\n<p>Structural directives can change the DOM layout by adding and removing DOM elements. All structural Directives are preceded by Asterix symbol</p>\n\n\n\n<h3>Commonly used structural directives</h3>\n\n\n\n<h4>ngFor</h4>\n\n\n\n<p>The ngFor is an Angular structural directive, which repeats a portion of the HTML template once per each item from an iterable list (Collection). The ngFor is similar to ngRepeat in AngularJS</p>\n\n\n\n<h5>Example of ngFor</h5>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tr *ngFor=\"let customer of customers;\"&gt;\n    &lt;td&gt;{{customer.customerNo}}&lt;/td&gt;\n    &lt;td&gt;{{customer.name}}&lt;/td&gt;\n    &lt;td&gt;{{customer.address}}&lt;/td&gt;\n    &lt;td&gt;{{customer.city}}&lt;/td&gt;\n    &lt;td&gt;{{customer.state}}&lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n\n\n\n<p>You can read more about the Angular ngFor Directive tutorial.</p>\n\n\n\n<h4>ngSwitch</h4>\n\n\n\n<p>The ngSwitch directive lets you add/remove HTML elements depending on a match expression. ngSwitch directive used along with ngSwitchCase and ngSwitchDefault</p>\n\n\n\n<h5>The example of ngSwitch</h5>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngSwitch]=\"Switch_Expression\"&gt; \n    &lt;div *ngSwitchCase=\"MatchExpression1”&gt; First Template&lt;/div&gt;\n    &lt;div *ngSwitchCase=\"MatchExpression2\"&gt;Second template&lt;/div&gt; \n    &lt;div *ngSwitchCase=\"MatchExpression3\"&gt;Third Template&lt;/div&gt; \n    &lt;div *ngSwitchCase=\"MatchExpression4\"&gt;Third Template&lt;/div&gt; \n    &lt;div *ngSwitchDefault?&gt;Default Template&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n\n<p>You can read more about the Angular ngSwitch Directive tutorial.</p>\n\n\n\n<h4>ngIf</h4>\n\n\n\n<p>The ngIf Directives is used to add or remove HTML elements based on an expression. The expression must return a boolean value. If the expression is false then the element is removed, else the element is inserted</p>\n\n\n\n<h5>Example of ngIf</h5>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngIf=\"condition\"&gt; \n    This is shown if condition is true\n&lt;/div&gt;</code></pre>\n\n\n\n<p>You can read more about Angular ngIf Directive tutorial.</p>\n\n\n\n<h2>Attribute Directives</h2>\n\n\n\n<p>An Attribute or style directive can change the appearance or behavior of an element.</p>\n\n\n\n<h3>Commonly used Attribute directives</h3>\n\n\n\n<h4>ngModel</h4>\n\n\n\n<p>The ngModel directive is used the achieve the two-way data binding. We have covered <code>ngModel</code> directive in Data Binding in Angular Tutorial</p>\n\n\n\n<h4>ngClass</h4>\n\n\n\n<p>The <code>ngClass</code> is used to add or remove the CSS classes from an HTML element. Using the <code>ngClass</code> one can create dynamic styles in HTML pages</p>\n\n\n\n<h5>Example of ngClass</h5>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngClass]=\"'first second'\"&gt;...&lt;/div&gt;\n</code></pre>\n\n\n\n<h4>ngStyle</h4>\n\n\n\n<p>ngStyle is used to change the multiple style properties of our HTML elements. We can also bind these properties to values that can be updated by the user or our components.</p>\n\n\n\n<h5>Example of ngStyle</h5>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngStyle]=\"{'color': 'blue', 'font-size': '24px', 'font-weight': 'bold'}\"&gt;\n    some text\n&lt;/div&gt;</code></pre>\n\n\n\n<h2>Building Custom Directives</h2>\n\n\n\n<p>You can also build custom directives in Angular. The Process is to create a JavaScript class and apply the&nbsp;<strong>@Directive</strong>&nbsp;attribute to that class. You can write the desired behavior in the class.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Angular Directive The Angular directive helps us to manipulate the DOM. You can change the appearance, behavior, or layout of a DOM element using the Directives. They help&nbsp;you to extend HTML There are three kinds of directives in Angular: Component Directive Structural directives Attribute directives Component Directive Components are special directives in Angular. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3497"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3497"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3497/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3961,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3497/revisions/3961"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3497"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3497"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3497"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3498,
    "date": "2020-11-30T06:53:12",
    "date_gmt": "2020-11-30T06:53:12",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3498"
    },
    "modified": "2020-11-30T06:54:46",
    "modified_gmt": "2020-11-30T06:54:46",
    "slug": "angular-ngfor-directive",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-ngfor-directive/",
    "title": {
      "rendered": "Angular ngFor Directive"
    },
    "content": {
      "rendered": "\n<h2>Syntax of ngFor</h2>\n\n\n\n<p>The syntax for the <code>ngFor</code> is as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html-element ngFor=\"let &lt;item> of &lt;items>;”> \r\n     &lt;html-Template>&lt;/html-Template>\r\n&lt;/html-element></code></pre>\n\n\n\n<p><code>&lt;html-element&gt;</code>:<br>is the element on which we apply&nbsp;<code>ngFor</code>&nbsp;directive. it repeats the&nbsp;<code>&lt;html-element&gt; .. &lt;/html-element&gt;</code>&nbsp;for each item of the collection.</p>\n\n\n\n<p><code>*ngFor</code>&nbsp;:<br>The syntax starts with&nbsp;<code>*ngFor</code>. The&nbsp;<code>*</code>&nbsp;here represents the Angular Template Syntax.</p>\n\n\n\n<p><code>let &lt;item&gt; of &lt;items&gt;;</code><br><code>item</code>&nbsp;is the&nbsp;<em>Template input variable</em>. It represents the currently iterated item from the&nbsp;<code>&lt;items&gt;</code>.&nbsp;<code>&lt;items&gt;</code>&nbsp;is a&nbsp;collection, which we need to show it to the user. It is usually a property on your component class and can be anything that you can iterate over. (Usually an array)</p>\n\n\n\n<p>The scope of the&nbsp;<code>item</code>&nbsp;is within the&nbsp;<code>&lt;html-element&gt;..&lt;/html-element&gt;</code>. You can access it anywhere within that, but not outside of it.</p>\n\n\n\n<h2>ngFor Example</h2>\n\n\n\n<p>Now let use see how to use&nbsp;<code>ngFor</code>&nbsp;using a example.</p>\n\n\n\n<p>Create a new angular Application. If you are new to angular, then you should read <a href=\"https://www.tektutorialshub.com/angular/angular-create-first-application/\">Angular create new project</a>. We are using <a href=\"https://getbootstrap.com/\">bootstrap 4</a> to style our application. Hence you can add the following line to <code>index.html</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\">\r\n</code></pre>\n\n\n\n<p>Open the <code>app.component.ts</code> and add the following code. The code contains a list of Top 10 movies. Let us build a template to display the movies using <code>ngFor</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title: string =\"Top 5 Movies\" ;\r\n \r\n \r\n  movies: Movie&#91;] =&#91;\r\n \r\n  {title:'Zootopia',director:'Byron Howard, Rich Moore',cast:'Idris Elba, Ginnifer Goodwin, Jason Bateman',releaseDate:'March 4, 2016'},\r\n  {title:'Batman v Superman: Dawn of Justice',director:'Zack Snyder',cast:'Ben Affleck, Henry Cavill, Amy Adams',releaseDate:'March 25, 2016'},\r\n  {title:'Captain American: Civil War',director:'Anthony Russo, Joe Russo',cast:'Scarlett Johansson, Elizabeth Olsen, Chris Evans',releaseDate:'May 6, 2016'},\r\n  {title:'X-Men: Apocalypse',director:'Bryan Singer',cast:'Jennifer Lawrence, Olivia Munn, Oscar Isaac',releaseDate:'May 27, 2016'},\r\n  {title:'Warcraft',director:'Duncan Jones',cast:'Travis Fimmel, Robert Kazinsky, Ben Foster',releaseDate:'June 10, 2016'},\r\n]\r\n \r\nCompositeKey (index,item){\r\n    return item.title + item.director ; \r\n   }\r\n}\r\n \r\nclass Movie {\r\n  title : string;\r\n  director : string;\r\n  cast : string;\r\n  releaseDate : string;\r\n}\r\n</code></pre>\n\n\n\n<h3>Using ngFor</h3>\n\n\n\n<p>To use&nbsp;<code>ngFor</code>,</p>\n\n\n\n<ol><li>Create a block of HTML elements, which can display a&nbsp;single movie.</li><li>Use the ngFor to repeat the block for each movie in the movies.</li></ol>\n\n\n\n<p>Open the <code>app.component.html</code> and add the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1> {{title}} &lt;/h1>\r\n \r\n  &lt;ul>\r\n    &lt;li *ngFor=\"let movie of movies\">\r\n      {{ movie.title }} - {{movie.director}}\r\n    &lt;/li>\r\n  &lt;/ul></code></pre>\n\n\n\n<p>We use the&nbsp;<code>ul</code>&nbsp;to display the movies. The&nbsp;<code>li</code>&nbsp;element displays a single movie. We need to repeat the&nbsp;<code>li</code>&nbsp;for each movie. Hence we apply the&nbsp;<code>ngFor</code>&nbsp;on the&nbsp;<code>li</code>&nbsp;element.</p>\n\n\n\n<p><code>let movie of movies</code>&nbsp;will iterate over the&nbsp;<code>movies</code>&nbsp;collection, which is a property on the component class.&nbsp;<code>movie</code>&nbsp;is the&nbsp;<em>Template input variable</em>, which represents the currently iterated movie from the collection. We use the&nbsp;<a href=\"https://www.tektutorialshub.com/angular/interpolation-in-angular/\">Angular Interpolation</a>&nbsp;to display the movie title &amp; name of the director</p>\n\n\n\n<p>Here is the output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/ngFor-Example-Top-5-Movies.png\" alt=\"\" class=\"wp-image-18397\"/></figure>\n\n\n\n<p>The Angular generates the following code. You can see <code>li</code> element for every movie.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul _ngcontent-gop-c0=\"\">\r\n  &lt;li _ngcontent-gop-c0=\"\"> Zootopia - Byron Howard, Rich Moore &lt;/li>\r\n  &lt;li _ngcontent-gop-c0=\"\"> Batman v Superman: Dawn of Justice - Zack Snyder &lt;/li>\r\n  &lt;li _ngcontent-gop-c0=\"\"> Captain American: Civil War - Anthony Russo, Joe Russo &lt;/li>\r\n  &lt;li _ngcontent-gop-c0=\"\"> X-Men: Apocalypse - Bryan Singer &lt;/li>\r\n  &lt;li _ngcontent-gop-c0=\"\"> Warcraft - Duncan Jones &lt;/li>\r\n&lt;/ul></code></pre>\n\n\n\n<p>Similarly, you can use the <code>table</code> element to display the movies as shown below. Here we need to repeat the <code>tr</code> element for each movie. Hence apply the directive on <code>tr</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='panel panel-primary'>\r\n    &lt;div class='panel-heading'>\r\n        {{title}}\r\n    &lt;/div>\r\n \r\n    &lt;div class='panel-body'>\r\n        &lt;div class='table-responsive'>\r\n            &lt;table class='table'>\r\n                &lt;thead>\r\n                    &lt;tr>\r\n                        &lt;th>Title&lt;/th>\r\n                        &lt;th>Director&lt;/th>\r\n                        &lt;th>Cast&lt;/th>\r\n                        &lt;th>Release Date&lt;/th>\r\n                    &lt;/tr>\r\n                &lt;/thead>\r\n                &lt;tbody>\r\n                    &lt;tr *ngFor=\"let movie of movies;\">\r\n                        &lt;td>{{movie.title}}&lt;/td>\r\n                        &lt;td>{{movie.director}}&lt;/td>\r\n                        &lt;td>{{movie.cast}}&lt;/td>\r\n                        &lt;td>{{movie.releaseDate}}&lt;/td>\r\n                    &lt;/tr>\r\n                &lt;/tbody>\r\n            &lt;/table>\r\n        &lt;/div>\r\n    &lt;/div>\r\n&lt;/div></code></pre>\n\n\n\n<p>Here is the output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/ngFor-Example-Top-5-Movies-in-Table-format.png\" alt=\"ngFor Example Top 5 Movies in Table format\" class=\"wp-image-18402\"/></figure>\n\n\n\n<h2>Nested Array</h2>\n\n\n\n<p>The following example shows how to use the <code>ngFor</code> in a nested array. The <code>employees</code> array has nested <code>skills</code> array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>employees = &#91;\r\n    {\r\n      name: \"Rahul\", email: \"rahul@gmail.com\",\r\n      skills: &#91;{ skill: 'Angular', exp: '2' },{ skill: 'Javascript', exp: '7' },{ skill: 'TypeScript', exp: '3' }\r\n      ]\r\n    },\r\n    {\r\n      name: \"Sachin\", email: \"sachin@gmail.com\",\r\n      skills: &#91;{ skill: 'Angular', exp: '1' },{ skill: 'Android', exp: '3' },{ skill: 'React', exp: '2' }\r\n      ]\r\n    },\r\n    {\r\n      name: \"Laxmna\", email: \"laxman@gmail.com\",\r\n      skills: &#91;{ skill: 'HTML', exp: '2' },{ skill: 'CSS', exp: '2' },{ skill: 'Javascript', exp: '1' }\r\n      ]\r\n    }\r\n  ]</code></pre>\n\n\n\n<p>Inside the main loop, use the local variable <code>employee</code> to get the list of <code>skills</code> and loop through it using <code>*ngFor=\"let skill of employee.skills;\"</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'>\r\n  &lt;div class='card-header'>\r\n    &lt;p>Nested Array&lt;/p>\r\n  &lt;/div>\r\n \r\n  &lt;div class='table-responsive'>\r\n    &lt;table class='table table-bordered table-sm '>\r\n      &lt;thead class=\"thead-dark\">\r\n        &lt;tr>\r\n          &lt;th>Name&lt;/th>\r\n          &lt;th>Mail&lt;/th>\r\n          &lt;th>Skills&lt;/th>\r\n        &lt;/tr>\r\n      &lt;/thead>\r\n      &lt;tbody>\r\n        &lt;tr *ngFor=\"let employee of employees;\">\r\n          &lt;td>{{employee.name}}&lt;/td>\r\n          &lt;td>{{employee.email}}&lt;/td>\r\n          &lt;td>\r\n            &lt;table class='table table-sm '>\r\n              &lt;tbody>\r\n                &lt;tr *ngFor=\"let skill of employee.skills;\">\r\n                  &lt;td>{{skill.skill}}&lt;/td>\r\n                  &lt;td>{{skill.exp}}&lt;/td>\r\n                &lt;/tr>\r\n              &lt;/tbody>\r\n            &lt;/table>\r\n \r\n          &lt;/td>\r\n        &lt;/tr>\r\n      &lt;/tbody>\r\n    &lt;/table>\r\n  &lt;/div>\r\n&lt;/div></code></pre>\n\n\n\n<p><br><a href=\"https://www.tektutorialshub.com/angular/angular-best-books/\">BEST ANGULAR BOOKS</a><br><strong>The Top 8&nbsp;<a href=\"https://www.tektutorialshub.com/angular/angular-best-books/\">Best Angular Books</a>, which helps you to get started with Angular&nbsp;</strong>&nbsp;</p>\n\n\n\n<h2>Local Variables</h2>\n\n\n\n<p><code>ngFor</code>&nbsp;exposes several values, which help us to fine-tune display. We assign these values to the local variable and use it in our template</p>\n\n\n\n<p>The list of exported values provided by&nbsp;<code>ngFor</code>&nbsp;directive</p>\n\n\n\n<ul><li><code>index: number</code>: The zero-based index of the current element in the collection.</li><li><code>count: number</code>: The total no of items in the collection</li><li><code>first: boolean</code>:&nbsp;<code>True</code>&nbsp;when the item is the first item in the collection.</li><li><code>last: boolean</code>: Is set to&nbsp;<code>True</code>, when the item is the last item in the collection.</li><li><code>even: boolean</code>:&nbsp;<code>True</code>&nbsp;when the item has an even index in the collection.</li><li><code>odd: boolean</code>: is set to&nbsp;<code>True</code>&nbsp;when the item has an odd index in the collection.</li></ul>\n\n\n\n<h2>Finding the Index</h2>\n\n\n\n<p>To Find the index, we create another local variable <code>i</code> and use the <code>let</code> to make it equal to <code>index</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let i=index;\r\n</code></pre>\n\n\n\n<p>The following code shows the list of movies along with the index.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tr *ngFor=\"let movie of movies; let i=index;\">\r\n    &lt;td> {{i}} &lt;/td>\r\n    &lt;td>{{movie.title}}&lt;/td>\r\n    &lt;td>{{movie.director}}&lt;/td>\r\n    &lt;td>{{movie.cast}}&lt;/td>\r\n    &lt;td>{{movie.releaseDate}}&lt;/td>\r\n&lt;/tr>\r\n</code></pre>\n\n\n\n<h2>Formatting odd &amp; even rows</h2>\n\n\n\n<p>We can use the odd &amp; even values to format the odd &amp; even rows alternatively. To do that create two local variables <code>o</code> &amp; <code>e</code>. Assign the values of odd &amp; even values to these variables using the <code>let</code> statement. Then use the<a href=\"https://www.tektutorialshub.com/angular/angular-ngclass-directive/\"> ngClass</a> to change the class name to either odd or even. The example code is shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tr *ngFor=\"let movie of movies; let i=index; let o= odd; let e=even;\"\r\n&#91;ngClass]=\"{ odd: o, even: e }\">\r\n    &lt;td> {{i}} &lt;/td>\r\n    &lt;td>{{movie.title}}&lt;/td>\r\n    &lt;td>{{movie.director}}&lt;/td>\r\n    &lt;td>{{movie.cast}}&lt;/td>\r\n    &lt;td>{{movie.releaseDate}}&lt;/td>\r\n&lt;/tr>\r\n</code></pre>\n\n\n\n<p>Add the appropriate background color to the <code>odd</code> and <code>even</code> classes as shown below in <code>app.component.css</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.even { background-color: azure; }\r\n.odd { background-color: floralwhite; }\r\n</code></pre>\n\n\n\n<h2>First and the Last element of a list</h2>\n\n\n\n<p>Similarly, you can use the <code>first</code> &amp; <code>last</code> values to style the first &amp; last element. The code below will add a CSS classes <code>first</code> &amp; <code>last</code> to the first and last movie using the <a href=\"https://www.tektutorialshub.com/angular/angular-ngclass-directive/\">ngClass</a>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='table-responsive'>\r\n  &lt;table class='table table-bordered table-sm '>\r\n    &lt;thead class=\"thead-dark\">\r\n      &lt;tr>\r\n        &lt;th>Index&lt;/th>\r\n        &lt;th>Title&lt;/th>\r\n        &lt;th>Director&lt;/th>\r\n        &lt;th>Cast&lt;/th>\r\n        &lt;th>Release Date&lt;/th>\r\n      &lt;/tr>\r\n    &lt;/thead>\r\n    &lt;tbody>\r\n      &lt;tr *ngFor=\"let movie of movies; let i=index; let first= first; let last=last;\" &#91;ngClass]=\"{ first: first, last: last }\">\r\n        &lt;td> {{i}} &lt;/td>\r\n        &lt;td>{{movie.title}}&lt;/td>\r\n        &lt;td>{{movie.director}}&lt;/td>\r\n        &lt;td>{{movie.cast}}&lt;/td>\r\n        &lt;td>{{movie.releaseDate}}&lt;/td>\r\n      &lt;/tr>\r\n    &lt;/tbody>\r\n  &lt;/table>\r\n&lt;/div></code></pre>\n\n\n\n<p>Remember to add the CSS classes to <code>app.component.css</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.first { background-color: azure; }\r\n.last { background-color: floralwhite; }\r\n</code></pre>\n\n\n\n<h2>Track By</h2>\n\n\n\n<p>The angular includes Track By clause, just like AngularJS did. Track By clause allows you to specify your own key to identify objects.</p>\n\n\n\n<p>Angular uses the<em>&nbsp;object identity</em>&nbsp;to compare the elements in the collection to the DOM nodes. Hence when you add an item or remove an item, the Angular will track it and update only the modified items in the DOM. It does not render the entire list.</p>\n\n\n\n<p>But this fails if we update the list from the back end server. That is because the retrieved objects cannot be compared with the existing objects in the list as the reference has changed. The Angular to simply remove these elements from DOM and recreates the new elements from the new data. This has&nbsp;a huge performance implication.</p>\n\n\n\n<p><a href=\"https://www.tektutorialshub.com/angular/angular-track-by-to-improve-ngfor-performance/\">Angular trackBy&nbsp;</a>clause eliminates this problem, by telling angular how to identify the similar elements. The Angular will use&nbsp;the value returned by the trackBy function to match the elements returned by the database and updates the DOM Elements without recreating them.</p>\n\n\n\n<p>We should always specify the primary key or unique key as the&nbsp;<code>trackBy</code>&nbsp;clause.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In our movie list example, let us make the title of the movie as the identifier.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tr *ngFor=\"let movie of movies; trackBy:trackByFn;\">\r\n    &lt;td>{{movie.title}}&lt;/td>\r\n    &lt;td>{{movie.director}}&lt;/td>\r\n    &lt;td>{{movie.cast}}&lt;/td>\r\n    &lt;td>{{movie.releaseDate}}&lt;/td>\r\n&lt;/tr></code></pre>\n\n\n\n<p>In the component class create a <code>trackByFn</code>. It gets index and the current item as its argument. It should return the unique id</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  trackByFn(index, item) {\r\n    return item.title;\r\n  }\r\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Syntax of ngFor The syntax for the ngFor is as shown below &lt;html-element&gt;:is the element on which we apply&nbsp;ngFor&nbsp;directive. it repeats the&nbsp;&lt;html-element&gt; .. &lt;/html-element&gt;&nbsp;for each item of the collection. *ngFor&nbsp;:The syntax starts with&nbsp;*ngFor. The&nbsp;*&nbsp;here represents the Angular Template Syntax. let &lt;item&gt; of &lt;items&gt;;item&nbsp;is the&nbsp;Template input variable. It represents the currently iterated item from the&nbsp;&lt;items&gt;.&nbsp;&lt;items&gt;&nbsp;is a&nbsp;collection, which we [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3498"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3498"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3498/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3506,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3498/revisions/3506"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3498"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3498"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3498"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3507,
    "date": "2020-11-30T07:00:12",
    "date_gmt": "2020-11-30T07:00:12",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3507"
    },
    "modified": "2020-12-12T06:52:28",
    "modified_gmt": "2020-12-12T06:52:28",
    "slug": "ngswitch-ngswitchcase-ngswitchdefault-angular-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/ngswitch-ngswitchcase-ngswitchdefault-angular-example/",
    "title": {
      "rendered": "ngSwitch, ngSwitchcase, ngSwitchDefault Angular Example"
    },
    "content": {
      "rendered": "\n<h2>Angular ngSwitch Directive</h2>\n\n\n\n<p>The <code>ngSwitch</code> is an Angular directive, which allows us to display one or more DOM elements based on some pre-defined condition.</p>\n\n\n\n<p>The following is the syntax of&nbsp;<code>ngSwitch</code>. It contains three separate directives.&nbsp;<code>ngSwitch</code>,&nbsp;<code>ngSwitchCase</code>&nbsp;&amp;&nbsp;<code>ngSwitchDefault</code>.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;container_element &#91;ngSwitch]=\"switch_expression\"&gt;\n    &lt;inner_element *ngSwitchCase=\"match_expresson_1\"&gt;...&lt;/inner_element&gt;\n    &lt;inner_element *ngSwitchCase=\"match_expresson_2\"&gt;...&lt;/inner_element&gt;\n    &lt;inner_element *ngSwitchCase=\"match_expresson_3\"&gt;...&lt;/inner_element&gt;\n    &lt;inner_element *ngSwitchDefault&gt;...&lt;/element&gt;\n&lt;/container_element&gt;</code></pre>\n\n\n\n<h3>ngSwitch</h3>\n\n\n\n<p><code>ngSwitch</code> is bound to <code>container_element</code> like <code>div</code> etc. We assign a <code>switch-expression</code> to the <code>ngSwitch</code> via property binding syntax. Angular evaluates the <code>switch_expression</code> at runtime and based on its value displays or removes the elements from the DOM.</p>\n\n\n\n<h3>ngSwitchCase</h3>\n\n\n\n<p><code>ngSwitchCase</code> is bound to an <code>inner_element</code>, which we must place inside the <code>container_element</code>. We use <code>*</code> (Asterix symbol), because it is a structural directive. We also assign a <code>match_expression</code>, which Angular evaluates at runtime. The Angular displays the <code>inner_element</code> only when the value of the <code>match_expression</code> matches the value of the <code>switch_expression</code> else it is removed from the DOM.</p>\n\n\n\n<p>If there is more than one match, then it displays all of them.</p>\n\n\n\n<p>Note that the&nbsp;<code>ngSwitchCase</code>&nbsp;does not hide the element, but removes them from the DOM.</p>\n\n\n\n<h3>ngSwitchDefault</h3>\n\n\n\n<p><code>ngSwitchDefault</code>&nbsp;is also bound to an&nbsp;<code>inner_element</code>, which we must place inside the&nbsp;<code>container_element</code>. But it does not have any&nbsp;<code>match_expression</code>. If none of the&nbsp;<code>ngSwitchCase</code>&nbsp;<code>match_expression</code>&nbsp;matches the&nbsp;<code>switch_expression</code>, then the angular displays the element attached to the&nbsp;<code>ngSwitchDefault</code></p>\n\n\n\n<p>You can place&nbsp;<code>ngSwitchDefault</code>&nbsp;anywhere inside the container element and not necessarily at the bottom.</p>\n\n\n\n<p>You are free to add more than one&nbsp;<code>ngSwitchDefault</code>&nbsp;directive. Angular displays all of them.</p>\n\n\n\n<h3>Important Points</h3>\n\n\n\n<ul><li>You must place&nbsp;<code>ngSwitchCase</code>&nbsp;&amp;&nbsp;<code>ngSwitchDefault</code>&nbsp;inside the&nbsp;<code>ngSwitch</code>&nbsp;directive</li><li>Angular displays every element, that matches the&nbsp;<code>switch_expression</code></li><li>If there are no matches, angular displays all the elements, which has&nbsp;<code>ngSwitchDefault</code>&nbsp;directive</li><li>You can place one or more than one&nbsp;<code>ngSwitchDefault</code>&nbsp;anywhere inside the container element and not necessarily at the bottom.</li><li>Any element within the&nbsp;<code>ngSwitch</code>&nbsp;statement but outside of any&nbsp;<code>NgSwitchCase</code>&nbsp;or&nbsp;<code>ngSwitchDefault</code>&nbsp;directive is displayed as it is.</li><li>The elements are not hidden but removed from the DOM.</li><li>Angular uses loose equality checks to compare the&nbsp;<code>ngSwitchCase</code>&nbsp;expression with the&nbsp;<code>ngSwitch</code>&nbsp;expression. This means that the empty string&nbsp;<code>\"\"</code>&nbsp;matches 0.</li><li>You can share the template between multiple&nbsp;<code>ngSwitchCase</code>&nbsp;using the&nbsp;<code>ngTemplateOutlet</code></li></ul>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8 Best Angular Books, which helps you to get started with Angular </strong> </p>\n\n\n\n<h2>ngSwitch Example</h2>\n\n\n\n<p>Create a new Angular project. Add the bootstrap CSS to the project by adding the following in the <code>index.html</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"&gt;\n</code></pre>\n\n\n\n<h3>Component Class</h3>\n\n\n\n<p>Create a variable <code>num</code> in your Angular Component class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>num: number= 0;\n</code></pre>\n\n\n\n<p>Template</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'&gt;\n  &lt;div class='card-header'&gt;\n    ngSwitch Example\n  &lt;/div&gt;\n  &lt;div class=\"card-body\"&gt;\n    Input string : &lt;input type='text' &#91;(ngModel)]=\"num\" /&gt;\n \n    &lt;div &#91;ngSwitch]=\"num\"&gt;\n      &lt;div *ngSwitchCase=\"'1'\"&gt;One&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"'2'\"&gt;Two&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"'3'\"&gt;Three&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"'4'\"&gt;Four&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"'5'\"&gt;Five&lt;/div&gt;\n      &lt;div *ngSwitchDefault&gt;This is Default&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n\n<p>Now let us examine the code in detail</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Input string : &lt;input type='text' &#91;(ngModel)] =\"num\"/&gt;\n</code></pre>\n\n\n\n<p>We bind the num variable to the input box.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngSwitch]=\"num\"&gt;\n</code></pre>\n\n\n\n<p>We attach the&nbsp;<code>ngSwitch</code>&nbsp;directive to the&nbsp;<code>div</code>&nbsp;element, then bind it to the expression&nbsp;<code>num</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngSwitchCase=\"'1'\"&gt;One&lt;/div&gt;\n</code></pre>\n\n\n\n<p>Next, we have a few&nbsp;<code>ngSwitchCase</code>&nbsp;directives attached to the&nbsp;<code>div</code>&nbsp;element with matching expressions “1”,”2” etc. Whenever the num matches these expressions, the ngSwitchCase displays the element attached to it else it removes it from DOM.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngSwitchDefault&gt;This is Default&lt;/div&gt;\n</code></pre>\n\n\n\n<p>The&nbsp;<code>ngSwithcDefault</code>&nbsp;does not take any expression, but it is displays only when all other&nbsp;<code>ngSwitchCase</code>&nbsp;match expressions fail.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/ngSwitchCase-Example.gif\" alt=\"  ngSwitchCase Example\" class=\"wp-image-18443\"/></figure>\n\n\n\n<h2>More Examples</h2>\n\n\n\n<p>The following uses the array of objects instead of a variable.</p>\n\n\n\n<h3>Component class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class item {\n    name: string;\n    val: number;\n}\n \nexport class AppComponent\n{\n    items: item&#91;] = &#91;{name: 'One', val: 1}, {name: 'Two', val: 2}, {name: 'Three', val: 3}, {name: 'Four', val: 3}, {name: 'Five', val: 3}];\n    selectedValue1: string= 'One';\n    selectedValue2: string= 'One';\n    selectedValue3: string= 'One';\n    selectedValue4: string= 'One';\n}</code></pre>\n\n\n\n<h3>Template</h3>\n\n\n\n<p>Note that we have two matches for&nbsp;<code>*ngSwitchCase=\"'Two'\"</code>.&nbsp;<code>ngSwitchcase</code>&nbsp;renders both.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'&gt;\n  &lt;div class='card-header'&gt;\n    Multiple ngSwitchCase with same condition\n  &lt;/div&gt;\n \n  &lt;div class=\"card-body\"&gt;\n    &lt;select &#91;(ngModel)]=\"selectedValue1\"&gt;\n      &lt;option *ngFor=\"let item of items;\" &#91;value]=\"item.name\"&gt;{{item.name}}&lt;/option&gt;\n    &lt;/select&gt;\n \n    &lt;div &#91;ngSwitch]=\"selectedValue1\"&gt;\n      &lt;p *ngSwitchCase=\"'One'\"&gt;One is Selected&lt;/p&gt;\n      &lt;p *ngSwitchCase=\"'Two'\"&gt;Two is Selected&lt;/p&gt;\n      &lt;p *ngSwitchCase=\"'Two'\"&gt;Two Again used in another element&lt;/p&gt;\n      &lt;p *ngSwitchDefault&gt;This is Default&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n \n&lt;/div&gt;</code></pre>\n\n\n\n<p>You can also make use of&nbsp;<code>ng-template</code>&nbsp;directly instead of&nbsp;<code>*ngSwitchCase</code>. In fact&nbsp;<code>*ngSwitchCase=\"'One'\"</code>&nbsp;is a shortcut to&nbsp;<code>ng-template [ngSwitchCase]=\"'One'\"</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'&gt;\n  &lt;div class='card-header'&gt;\n    ngSwitch using ng-template\n  &lt;/div&gt;\n \n  &lt;div class=\"card-body\"&gt;\n \n    &lt;select &#91;(ngModel)]=\"selectedValue2\"&gt;\n      &lt;option *ngFor=\"let item of items;\" &#91;value]=\"item.name\"&gt;{{item.name}}&lt;/option&gt;\n    &lt;/select&gt;\n \n    &lt;div &#91;ngSwitch]=\"selectedValue2\"&gt;\n      &lt;ng-template &#91;ngSwitchCase]=\"'One'\"&gt;One is Selected&lt;/ng-template&gt;\n      &lt;ng-template &#91;ngSwitchCase]=\"'Two'\"&gt;Two is Selected&lt;/ng-template&gt;\n      &lt;ng-template ngSwitchDefault&gt;This is Default&lt;/ng-template&gt;\n    &lt;/div&gt;\n \n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n\n<p>More than one&nbsp;<code>ngSwitchDefault</code>. Works perfectly ok.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'&gt;\n  &lt;div class='card-header'&gt;\n    Multiple ngSwitchDefault Directives\n  &lt;/div&gt;\n \n  &lt;div class=\"card-body\"&gt;\n    &lt;select &#91;(ngModel)]=\"selectedValue3\"&gt;\n      &lt;option *ngFor=\"let item of items;\" &#91;value]=\"item.name\"&gt;{{item.name}}&lt;/option&gt;\n    &lt;/select&gt;\n \n \n    &lt;div &#91;ngSwitch]=\"selectedValue3\"&gt;\n      &lt;div *ngSwitchCase=\"'One'\"&gt;One is Selected&lt;/div&gt;\n      &lt;div *ngSwitchDefault&gt;This is Default 1&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"'Two'\"&gt;Two is Selected&lt;/div&gt;\n      &lt;div *ngSwitchDefault&gt;This is Default 2&lt;/div&gt;\n    &lt;/div&gt;\n \n \n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n\n<h2>Loose Equality Checks</h2>\n\n\n\n<p>Angular uses loose equality checks to compare the&nbsp;<code>ngSwitchCase</code>&nbsp;expression with the&nbsp;<code>ngSwitch</code>&nbsp;expression. This means that the empty string&nbsp;<code>\"\"</code>&nbsp;matches 0.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'&gt;\n  &lt;div class='card-header'&gt;\n    loose equality Empty string, \"\" matches 0\n  &lt;/div&gt;\n \n  &lt;div class=\"card-body\"&gt;\n \n    Input string : &lt;input type='text' &#91;(ngModel)]=\"num\" /&gt;\n \n    &lt;div &#91;ngSwitch]=\"num\"&gt;\n      &lt;div *ngSwitchCase=\"0\"&gt;Zero is Selected&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"1\"&gt;One is Selected&lt;/div&gt;\n      &lt;div *ngSwitchCase=\"2\"&gt;Two is Selected&lt;/div&gt;\n      &lt;div *ngSwitchDefault&gt;This is Default 2&lt;/div&gt;\n    &lt;/div&gt;\n \n \n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/ngSwitchCase-Loose-Equality-Checks-example.gif\" alt=\"ngSwitchCase Loose Equality Checks example\" class=\"wp-image-18448\"/></figure>\n\n\n\n<h2>Multiple / Sharing ngSwitchCase</h2>\n\n\n\n<p>You may also want to share the template between two values. For Example One Template for the values&nbsp;<code>One</code>&nbsp;&amp;&nbsp;<code>Two</code>&nbsp;&amp; another template for values&nbsp;<code>Three</code>&nbsp;&amp;&nbsp;<code>Four</code>. One option is to repeat the template under each switch case. Or you can also make use of the&nbsp;<code>ngTemplateOutlet</code>&nbsp;to share the template as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class='card'&gt;\n  &lt;div class='card-header'&gt;\n    Sharing Templates\n  &lt;/div&gt;\n \n  &lt;div class=\"card-body\"&gt;\n \n    &lt;select &#91;(ngModel)]=\"selectedValue4\"&gt;\n      &lt;option *ngFor=\"let item of items;\" &#91;value]=\"item.name\"&gt;{{item.name}}&lt;/option&gt;\n    &lt;/select&gt;\n    \n \n    &lt;ng-container &#91;ngSwitch]=\"selectedValue4\"&gt;\n \n      &lt;ng-container *ngSwitchCase=\"'One'\"&gt;\n        &lt;ng-container *ngTemplateOutlet=\"sharedTemplate12\"&gt;&lt;/ng-container&gt;\n      &lt;/ng-container&gt;\n      &lt;ng-container *ngSwitchCase=\"'Two'\"&gt;\n        &lt;ng-container *ngTemplateOutlet=\"sharedTemplate12\"&gt;&lt;/ng-container&gt;\n      &lt;/ng-container&gt;\n \n      &lt;ng-container *ngSwitchCase=\"'Three'\"&gt;\n        &lt;ng-container *ngTemplateOutlet=\"sharedTemplate34\"&gt;&lt;/ng-container&gt;\n      &lt;/ng-container&gt;\n \n      &lt;ng-container *ngSwitchCase=\"'Four'\"&gt;\n        &lt;ng-container *ngTemplateOutlet=\"sharedTemplate34\"&gt;&lt;/ng-container&gt;\n      &lt;/ng-container&gt;\n \n      &lt;ng-template #sharedTemplate12&gt;Shared between 1,2&lt;/ng-template&gt;\n      &lt;ng-template #sharedTemplate34&gt;Shared between 3,4&lt;/ng-template&gt;\n      &lt;ng-container *ngSwitchDefault&gt;Default Template&lt;/ng-container&gt;\n \n    &lt;/ng-container&gt;\n \n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n\n\n\n<h2>Source Code</h2>\n\n\n\n<p>You can download the source code from GitHub</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Angular ngSwitch Directive The ngSwitch is an Angular directive, which allows us to display one or more DOM elements based on some pre-defined condition. The following is the syntax of&nbsp;ngSwitch. It contains three separate directives.&nbsp;ngSwitch,&nbsp;ngSwitchCase&nbsp;&amp;&nbsp;ngSwitchDefault. Syntax ngSwitch ngSwitch is bound to container_element like div etc. We assign a switch-expression to the ngSwitch via property binding syntax. Angular evaluates the switch_expression at runtime and based on its value displays or removes the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3507"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3507"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3507/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3962,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3507/revisions/3962"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3507"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3507"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3507"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3511,
    "date": "2020-11-30T07:06:50",
    "date_gmt": "2020-11-30T07:06:50",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3511"
    },
    "modified": "2020-12-12T06:53:17",
    "modified_gmt": "2020-12-12T06:53:17",
    "slug": "how-to-use-ngif-else-then-in-angular-by-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/how-to-use-ngif-else-then-in-angular-by-example/",
    "title": {
      "rendered": "How to use ngIf, else, then in Angular By example"
    },
    "content": {
      "rendered": "\n<h4>ngIf Syntax</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p *ngIf=\"condition\"&gt;\n    content to render, when the condition is true \n&lt;/p&gt;\n</code></pre>\n\n\n\n<p>The <code>ngIf</code> is attached to a DOM element ( p element in the above example). <code>ngIf</code> is a structural directive, which means that you can add it to any element like <code>div</code>, <code>p</code>, <code>h1</code>, component selector, etc. Like all structural directive, it is prefixed with <code>*</code> asterisk</p>\n\n\n\n<p>We bind the&nbsp;<code>*ngIf</code>&nbsp;to an expression (a condition in the above example). The expression is then evaluated by the&nbsp;<code>ngIf</code>&nbsp;directive. The expression must return either true or false.</p>\n\n\n\n<p>If the expression evaluates to false then the Angular removes the entire element from the DOM. If true it will insert the element into the DOM.</p>\n\n\n\n<h3>Hidden attribute Vs ngIf</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p &#91;hidden]=\"condition\"&gt;\n    content to render, when the condition is true \n&lt;/p&gt;\n</code></pre>\n\n\n\n<p>The above achieves the same thing, with one vital difference.</p>\n\n\n\n<p><code>ngIf</code>&nbsp;does not hide the DOM element. It removes the entire element along with its subtree from the DOM. It also removes the corresponding state freeing up the resources attached to the element.<br><br><code>hidden</code>&nbsp;attribute does not remove the element from the DOM. But just hides it.</p>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8 Best Angular Books, which helps you to get started with Angular </strong> </p>\n\n\n\n<p>The difference between&nbsp;<code>[hidden]='false'</code>&nbsp;and&nbsp;<code>*ngIf='false'</code>&nbsp;is that the first method simply hides the element. The second method with&nbsp;<code>ngIf</code>&nbsp;removes the element completely from the DOM.</p>\n\n\n\n<p>By using the&nbsp;<strong>Logical NOT</strong>&nbsp;(!), you can mimic the else condition as shown here.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p *ngIf=\"!condition\"&gt;\n    content to render, when the condition is false\n&lt;/p&gt;\n</code></pre>\n\n\n\n<p>The better solution is to use the optional&nbsp;<code>else</code>&nbsp;block as shown in the next paragraph.</p>\n\n\n\n<h3>Condition</h3>\n\n\n\n<p>The condition can be anything. It can be a property of the component class. It can be a method in the component class. But it must evaluate to true/false. The&nbsp;<code>ngIf</code>&nbsp;directive tries to coerce the value to Boolean.</p>\n\n\n\n<h2>ngIf else</h2>\n\n\n\n<p>The&nbsp;<code>ngIf</code>&nbsp;allows us to define optional&nbsp;<code>else</code>&nbsp;block using the&nbsp;<code>ng-template</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngIf=\"condition; else elseBlock\"&gt;\n    content to render, when the condition is true \n&lt;/div&gt;\n \n&lt;ng-template #elseBlock&gt;\n    content to render, when the condition is false \n&lt;/ng-template&gt;\n</code></pre>\n\n\n\n<p>The expression starts with a condition followed by a semicolon.</p>\n\n\n\n<p>Next, we have&nbsp;<code>else</code>&nbsp;clause bound to a template named&nbsp;<code>elseBlock</code>. The template can be defined anywhere using the&nbsp;<code>ng-template</code>. Place it right after ngIf for readability.</p>\n\n\n\n<p>When the condition evaluates to false, then the&nbsp;<code>ng-template</code>&nbsp;with the name&nbsp;<code>#elseBlock</code>&nbsp;is rendered by the&nbsp;<code>ngIf</code>&nbsp;Directive.</p>\n\n\n\n<h2>ngIf then else</h2>\n\n\n\n<p>You can also define&nbsp;<code>then</code>&nbsp;<code>else</code>&nbsp;block using the&nbsp;<code>ng-template</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngIf=\"condition; then thenBlock else elseBlock\"&gt; \n    This content is not shown\n&lt;/div&gt;\n \n&lt;ng-template #thenBlock&gt;\n    content to render when the condition is true.\n&lt;/ng-template&gt;\n \n&lt;ng-template #elseBlock&gt;\n    content to render when condition is false.\n&lt;/ng-template&gt;</code></pre>\n\n\n\n<p>Here, we have&nbsp;<code>then</code>&nbsp;clause followed by a template named&nbsp;<code>thenBlock</code>.</p>\n\n\n\n<p>When the condition is true, the template&nbsp;<code>thenBlock</code>&nbsp;is rendered. If false, then the template&nbsp;<code>elseBlock</code>&nbsp;is rendered</p>\n\n\n\n<h2>ngIf Example</h2>\n\n\n\n<p>Create a new Angular project by running the command&nbsp;<code>ng new ngIf</code></p>\n\n\n\n<h3>Component Class</h3>\n\n\n\n<p>Create a boolean variable&nbsp;<code>showMe</code>&nbsp;in your&nbsp;<code>app.component.ts</code>&nbsp;class as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: &#91;'./app.component.css']\n})\nexport class AppComponent {\n  title: string = 'ngIf Example' ;\n  showMe: boolean;\n}</code></pre>\n\n\n\n<h3>Template</h3>\n\n\n\n<p>Copy the following code to the&nbsp;<code>app.component.html</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1&gt;Simple example of ngIf &lt;/h1&gt;\n \n \n&lt;div class=\"row\"&gt;\n  Show &lt;input type=\"checkbox\" &#91;(ngModel)]=\"showMe\" /&gt;\n&lt;/div&gt;\n \n&lt;h1&gt;ngIf &lt;/h1&gt;\n \n&lt;p *ngIf=\"showMe\"&gt;\n  ShowMe is checked\n&lt;/p&gt;\n&lt;p *ngIf=\"!showMe\"&gt;\n  ShowMe is unchecked\n&lt;/p&gt;\n \n&lt;h1&gt;ngIf Else&lt;/h1&gt;\n \n&lt;p *ngIf=\"showMe; else elseBlock1\"&gt;\n  ShowMe is checked\n&lt;/p&gt;\n \n&lt;ng-template #elseBlock1&gt;\n  &lt;p&gt;ShowMe is unchecked Using elseBlock&lt;/p&gt;\n&lt;/ng-template&gt;\n \n&lt;h1&gt;ngIf then else&lt;/h1&gt;\n \n&lt;p *ngIf=\"showMe; then thenBlock2 else elseBlock2\"&gt;\n  This is not rendered\n&lt;/p&gt;\n \n&lt;ng-template #thenBlock2&gt;\n  &lt;p&gt;ShowMe is checked Using thenblock&lt;/p&gt;\n&lt;/ng-template&gt;\n \n&lt;ng-template #elseBlock2&gt;\n  &lt;p&gt;ShowMe is unchecked Using elseBlock&lt;/p&gt;\n&lt;/ng-template&gt;\n \n&lt;h1&gt;using hidden &lt;/h1&gt;\n \n&lt;p &#91;hidden]=\"showMe\"&gt;\n    content to render, when the condition is true  using hidden property binding\n&lt;/p&gt;\n \n&lt;p &#91;hidden]=\"!showMe\"&gt;\n    content to render, when the condition is false. using hidden property binding\n&lt;/p&gt;</code></pre>\n\n\n\n<p>Now let us examine the code in detail</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Show &lt;input type=\"checkbox\" &#91;(ngModel)] =\"showMe\"/&gt;\n</code></pre>\n\n\n\n<p>This is a simple checkbox bound to&nbsp;<code>showMe</code>&nbsp;variable in the component</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div *ngIf=\"showMe\"&gt;\n    ShowMe is checked\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>The&nbsp;<code>ngIf</code>&nbsp;directive is attached to the&nbsp;<code>div</code>&nbsp;element. It is then bound to the expression&nbsp;<code>“showMe”</code>. The expression is evaluated and if it is&nbsp;<code>true</code>, then the&nbsp;<code>div</code>&nbsp;element is added to the DOM else it is removed from the DOM.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p *ngIf=\"showMe; else elseBlock1\"&gt;\n  ShowMe is checked\n&lt;/p&gt;\n \n&lt;ng-template #elseBlock1&gt;\n  &lt;p&gt;ShowMe is checked Using elseBlock&lt;/p&gt;\n&lt;/ng-template&gt;\n</code></pre>\n\n\n\n<p>If else example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p *ngIf=\"showMe; then thenBlock2 else elseBlock2\"&gt;\n  This is not rendered\n&lt;/p&gt;\n \n&lt;ng-template #thenBlock2&gt;\n  &lt;p&gt;ShowMe is checked Using thenblock&lt;/p&gt;\n&lt;/ng-template&gt;\n \n&lt;ng-template #elseBlock2&gt;\n  &lt;p&gt;ShowMe is unchecked Using elseBlock&lt;/p&gt;\n&lt;/ng-template&gt;\n</code></pre>\n\n\n\n<p>If then else example. Note that the content of&nbsp;<code>p</code>&nbsp;element, to which&nbsp;<code>ngIf</code>&nbsp;is attached is never rendered</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1&gt;using hidden &lt;/h1&gt;\n \n&lt;p &#91;hidden]=\"showMe\"&gt;\n    content to render, when the condition is true  using hidden property binding\n&lt;/p&gt;\n \n&lt;p &#91;hidden]=\"!showMe\"&gt;\n    content to render, when the condition is false. using hidden property binding\n&lt;/p&gt;</code></pre>\n\n\n\n<p>The property binding on the hidden attribute. You can open the developer console and see that both the Angular renders both the elements. But mark one of them as visible and the other one as hidden.</p>\n\n\n\n<h3>Module</h3>\n\n\n\n<p>Import FormsModule in app.module.ts as we are using ngModal directive</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n \nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n \n@NgModule({\n  declarations: &#91;\n    AppComponent\n  ],\n  imports: &#91;\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule\n  ],\n  providers: &#91;],\n  bootstrap: &#91;AppComponent]\n})\nexport class AppModule { }\n </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/08/Angular-ngIf-then-else-Example.gif\" alt=\"\" class=\"wp-image-12641\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ngIf Syntax The ngIf is attached to a DOM element ( p element in the above example). ngIf is a structural directive, which means that you can add it to any element like div, p, h1, component selector, etc. Like all structural directive, it is prefixed with * asterisk We bind the&nbsp;*ngIf&nbsp;to an expression (a condition in the above example). The expression is then evaluated by [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3511"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3511"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3511/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3963,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3511/revisions/3963"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3511"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3511"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3511"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3509,
    "date": "2020-11-30T07:12:47",
    "date_gmt": "2020-11-30T07:12:47",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3509"
    },
    "modified": "2020-12-12T06:53:32",
    "modified_gmt": "2020-12-12T06:53:32",
    "slug": "angular-ngclass-directive",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-ngclass-directive/",
    "title": {
      "rendered": "Angular NgClass Directive"
    },
    "content": {
      "rendered": "\n<h2>NgClass</h2>\n\n\n\n<p>The&nbsp;<code>ngClass</code>&nbsp;directive adds and removes CSS classes on an HTML element. The syntax of the&nbsp;<code>ngClass</code>&nbsp;is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;element &#91;ngClass]=\"expression\"&gt;...&lt;/element&gt;\n</code></pre>\n\n\n\n<p>Where</p>\n\n\n\n<p><code><strong>element</strong></code>&nbsp;is the DOM element to which class is being applied</p>\n\n\n\n<p><code><strong>expression</strong></code>&nbsp;is evaluated and the resulting classes are added/removed from the element. The&nbsp;<code>expression</code>&nbsp;can be in various formats like string, array or an object. Let us explore all of them with example</p>\n\n\n\n<h2>NgClass with a String</h2>\n\n\n\n<p>You can use the String as expression and bind it to directly to the&nbsp;<code>ngClass</code>&nbsp;attribute. If you want to assign multiple classes, then separate each class with space as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;element &#91;ngClass]=\"'cssClass1 cssClass2'\"&gt;...&lt;/element&gt;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Add the following classes to the&nbsp;<code>app.component.css</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.red { color: red; }\n.size20 { font-size: 20px; }\n</code></pre>\n\n\n\n<p>Add the following to the&nbsp;<code>app.template.html</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngClass]=\"'red size20'\"&gt; Red Text with Size 20px &lt;/div&gt;\n</code></pre>\n\n\n\n<p>The above example code adds the two CSS Classes&nbsp;<code>red</code>&nbsp;&amp;&nbsp;<code>size20</code>&nbsp;to the&nbsp;<code>div</code>&nbsp;element.</p>\n\n\n\n<p>You can also use the&nbsp;<code>ngClass</code>&nbsp;without a&nbsp;square bracket. In that case, the expression is not evaluated but assigned directly to the class attribute. We also need to remove the double quote around the expression as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \n&lt;div class=\"row\"&gt;     \n    &lt;div ngClass='red size20'&gt;Red Text with Size 20px &lt;/div&gt; \n&lt;/div&gt;</code></pre>\n\n\n\n<h2>NgClass with Array</h2>\n\n\n\n<p>You can achieve the same result by using an array instead of a string as shown below. The syntax for&nbsp;<code>ngClass</code>&nbsp;array syntax is as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;element &#91;ngClass]=\"&#91;'cssClass1', 'cssClass2']\"&gt;...&lt;/element&gt;\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>All you need to change the template as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngClass]=\"&#91;'red','size20']\"&gt;Red Text with Size 20px &lt;/div&gt;\n</code></pre>\n\n\n\n<h2>NgClass with Object</h2>\n\n\n\n<p>You can also bind the&nbsp;<code>ngClass</code>&nbsp;to an object. Each property name of the object acts as a class name and is applied to the element if it is true. The syntax is as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;element &#91;ngClass]=\"{'cssClass1': true, 'cssClass2': true}\"&gt;...&lt;/element&gt;\n</code></pre>\n\n\n\n<p>Example of objects as CSS Classes</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"row\"&gt;     \n  &lt;div &#91;ngClass]=\"{'red':true,'size20':true}\"&gt;Red Text with Size 20px&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>In the above example, an object is bound to the&nbsp;<code>ngClass</code>. The object has two properties&nbsp;<code>red</code>&nbsp;and&nbsp;<code>size20</code>. The property name is assigned to the&nbsp;<code>div</code>&nbsp;element as a class name.</p>\n\n\n\n<h2>Dynamically updating Class names</h2>\n\n\n\n<p>We can dynamically change the CSS Classes from the component.</p>\n\n\n\n<h3>Using strings</h3>\n\n\n\n<p>To do that first create a string variable&nbsp;<code>cssStringVar</code>&nbsp;in your component code and assign the class names to it as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cssStringVar: string= 'red size20';\n</code></pre>\n\n\n\n<p>You can refer to the&nbsp;<code>cssStringVar</code>&nbsp;in your template as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"row\"&gt;     \n   &lt;div &#91;ngClass]=\"cssStringVar\"&gt;Red Text with Size 20px : from component     &lt;/div&gt; \n&lt;/div&gt;\n</code></pre>\n\n\n\n<h3>Using arrays</h3>\n\n\n\n<p>Instead of string variable, you can create a&nbsp;<strong>array of string</strong>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cssArray:string&#91;]=&#91;'red','size20']; \n</code></pre>\n\n\n\n<p>And, then use it in&nbsp;<code>ngClass</code>&nbsp;directive</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"row\"&gt;\n  &lt;div &#91;ngClass]=\"cssArray\"&gt;\n    Red Text with Size 20px  : from CSS Array\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n\n<h3>Using JavaScript object</h3>\n\n\n\n<p>Create a class as shown below in your component</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class CssClass {\n  red: boolean= true;\n  size20: boolean= true; \n}\n</code></pre>\n\n\n\n<p>Next, create the instance of the CssClass in the component as shown below. You can change the value of the property true as false dynamically</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cssClass: CssClass = new CssClass();\n</code></pre>\n\n\n\n<p>And then refer to the cssClass in your template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"row\"&gt;     \n  &lt;div &#91;ngClass]=\"cssClass\"&gt; Red Text with Size 20px : from component as object&lt;/div&gt; \n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>You can download the source code from GitHub</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>NgClass The&nbsp;ngClass&nbsp;directive adds and removes CSS classes on an HTML element. The syntax of the&nbsp;ngClass&nbsp;is as shown below. Where element&nbsp;is the DOM element to which class is being applied expression&nbsp;is evaluated and the resulting classes are added/removed from the element. The&nbsp;expression&nbsp;can be in various formats like string, array or an object. Let us explore all [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3509"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3509"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3509/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3964,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3509/revisions/3964"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3509"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3509"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3509"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3510,
    "date": "2020-11-30T07:16:42",
    "date_gmt": "2020-11-30T07:16:42",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3510"
    },
    "modified": "2020-12-12T06:54:00",
    "modified_gmt": "2020-12-12T06:54:00",
    "slug": "angular-ngstyle-directive",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-ngstyle-directive/",
    "title": {
      "rendered": "Angular ngStyle Directive"
    },
    "content": {
      "rendered": "\n<p>ngStyle Syntax</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;element &#91;ngStyle]=\"{'styleNames': styleExp}\"&gt;...&lt;/element&gt;\n</code></pre>\n\n\n\n<p><strong>Where</strong></p>\n\n\n\n<p><code>element</code>&nbsp;is the DOM element to which style is being applied</p>\n\n\n\n<p><code>styleNames</code>&nbsp;are style names ( ex: ‘font-size’, ‘color’ etc). with an optional suffix (ex: ‘top.px’, ‘font-style.em’),</p>\n\n\n\n<p><code>styleExp</code>&nbsp;is the expression, which is evaluated and assigned to the&nbsp;<code>styleNames</code></p>\n\n\n\n<p>We can add more than one key value pairs&nbsp;<code>'styleNames': styleExp</code>&nbsp;each separated by comma.</p>\n\n\n\n<p>In the following example,&nbsp;<code>some-element</code>&nbsp;gets the style of&nbsp;<code>font-size</code>&nbsp;of&nbsp;<code>20px</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;some-element &#91;ngStyle]=\"{'font-size': '20px'}\"&gt;Set Font size to 20px&lt;/some-element&gt;\n</code></pre>\n\n\n\n<p>The units (for example&nbsp;<code>px</code>,&nbsp;<code>em</code>) are prefixed to the&nbsp;<code>styleName</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \nSyntax:\n&lt;element &#91;ngStyle]=\"{'styleName.unit': widthExp}\"&gt;...&lt;/element&gt;\n \nExample:\n&lt;some-element&#91;ngStyle]=\"{'font-size.em': '3'}\"&gt;...&lt;/some-element&gt;\n</code></pre>\n\n\n\n<h2>ngStyle Example</h2>\n\n\n\n<h3>Change Style Dynamically</h3>\n\n\n\n<p>Initialize a variable&nbsp;<code>color</code>&nbsp;and add it to your component</p>\n\n\n\n<pre class=\"wp-block-code\"><code>color: string= 'red';\n</code></pre>\n\n\n\n<p>And in your template, add the following</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input &#91;(ngModel)]=\"color\" /&gt; \n&lt;div &#91;ngStyle]=\"{'color': color}\"&gt;Change my color&lt;/div&gt;\n</code></pre>\n\n\n\n<p>In the above example, we apply&nbsp;<code>ngStyle</code>&nbsp;directive to the&nbsp;<code>div</code>&nbsp;element. We assign JavaScript object&nbsp;<code>{'color': color}</code>&nbsp;to the&nbsp;<code>ngStyle</code>directive. The variable&nbsp;<code>color</code>&nbsp;is dynamically changed by the user input and it is applied instantly to the&nbsp;<code>div</code>&nbsp;element</p>\n\n\n\n<p>The&nbsp;following code uses the&nbsp;ternary operator to&nbsp;set the&nbsp;background color to&nbsp;<strong>red</strong>&nbsp;if the&nbsp;<code>status</code>&nbsp;variables indicator is set to “error” else&nbsp;<strong>blue</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>div &#91;ngStyle]=\"{'background-color':status === 'error' ? 'red' : 'blue' }\"&gt;&lt;/&lt;div&gt;\n</code></pre>\n\n\n\n<h3>ngStyle multiple attributes</h3>\n\n\n\n<p>We can change multiple style as shown in the following example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p &#91;ngStyle]=\"{'color': 'purple',\n               'font-size': '20px',\n               'font-weight': 'bold'}\"&gt;\n     Multiple styles\n&lt;/p&gt;\n</code></pre>\n\n\n\n<p>The JavaScript object is assigned to the&nbsp;<code>ngStyle</code>directive containing multiple properties. Each property name of the object acts as a class name. The value of the property is the value of the style.</p>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8 Best Angular Books, which helps you to get started with Angular </strong> </p>\n\n\n\n<h3>Specifying CSS Units in ngStyle</h3>\n\n\n\n<p>CSS has several units for expressing a length, size etc. The units can be&nbsp;<code>em</code>,&nbsp;<code>ex</code>,&nbsp;<code>%</code>,&nbsp;<code>px</code>,&nbsp;<code>cm</code>,&nbsp;<code>mm</code>,&nbsp;<code>in</code>,&nbsp;<code>pt</code>,&nbsp;<code>PC</code>&nbsp;etc. We prefix the units to the&nbsp;<code>StyleName</code>&nbsp;as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input &#91;(ngModel)]=\"size\" /&gt; \n&lt;div &#91;ngStyle]=\"{'font-size.px': size}\"&gt;Change my size&lt;/div&gt;\n \n</code></pre>\n\n\n\n<h3>Using object from Controller</h3>\n\n\n\n<p>Create a class as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StyleClass {\n   'color': string= 'blue';\n   'font-size.px': number= 20;\n   'font-weight': string= 'bold'; \n}</code></pre>\n\n\n\n<p>And in controller initialize the class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>styleClass: StyleClass = new StyleClass();\n</code></pre>\n\n\n\n<p>Then you can refer it in your template as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div &#91;ngStyle]=\"styleClass\"&gt;size &amp; Color&lt;/div&gt;\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>ngStyle Syntax Where element&nbsp;is the DOM element to which style is being applied styleNames&nbsp;are style names ( ex: ‘font-size’, ‘color’ etc). with an optional suffix (ex: ‘top.px’, ‘font-style.em’), styleExp&nbsp;is the expression, which is evaluated and assigned to the&nbsp;styleNames We can add more than one key value pairs&nbsp;&#8216;styleNames&#8217;: styleExp&nbsp;each separated by comma. In the following example,&nbsp;some-element&nbsp;gets [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3510"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3510"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3510/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3965,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3510/revisions/3965"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3510"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3510"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3510"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3517,
    "date": "2020-11-30T07:20:04",
    "date_gmt": "2020-11-30T07:20:04",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3517"
    },
    "modified": "2020-12-12T06:54:26",
    "modified_gmt": "2020-12-12T06:54:26",
    "slug": "angular-trackby-to-improve-ngfor-performance",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-trackby-to-improve-ngfor-performance/",
    "title": {
      "rendered": "Angular Trackby to improve ngFor Performance"
    },
    "content": {
      "rendered": "\n<h2>Trackby in ngFor</h2>\n\n\n\n<p>We use<code>ngFor</code>&nbsp;to display a iterable items like array in a list or tabular format. For Example the following code iterates over the&nbsp;<code>movies</code>&nbsp;collection and displays each&nbsp;<code>movie</code>&nbsp;inside an&nbsp;<code>ul</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul&gt;\n    &lt;li *ngFor=\"let movie of movies\"&gt;\n      {{ movie.title }} - {{movie.director}}\n    &lt;/li&gt;\n  &lt;/ul&gt;</code></pre>\n\n\n\n<p>The Angular creates a&nbsp;<code>li</code>&nbsp;element for each movie. So if there are&nbsp;<code>n</code>&nbsp;number of movies, the angular inserts the&nbsp;<code>n</code>&nbsp;number of&nbsp;<code>li</code>&nbsp;nodes into the DOM</p>\n\n\n\n<p>But the data will not remain constant. The user will add a new movie, delete a movie, sort the list in a different order, or simply refresh the movie from the back end. This will force the angular to render the template again.</p>\n\n\n\n<p>The easiest way to achieve that is to remove the entire list and render the DOM again. But this is inefficient and if the list is large it is a very expensive process.</p>\n\n\n\n<p>To avoid that the Angular uses the<em>&nbsp;object identity</em>&nbsp;to track the elements in the collection to the DOM nodes. Hence when you add an item or remove an item, the Angular will track it and update only the modified items in the DOM.</p>\n\n\n\n<p>But if you refresh the entire list from the back end, it will replace the objects in the movie collection with the new objects. Even if the movies are the same, Angular will not be able to detect as the object references have changed. Hence it considers them new and renders them again after destroying the old ones.</p>\n\n\n\n<p>The following example shows what happens when we refresh the entire list. The App displays the list of movies. it has option to add a movie, remove a movie and refresh the entire movie.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: &#91;'./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title: string = \"Top 5 Movies\";\n  \n  movies=&#91;];\n \n  mTitle:string=\"\";\n  mDirector:string=\"\";\n \n  ngOnInit() {\n    this.Refresh();\n  }\n \n  remove(i) {\n    this.movies.splice(i,1);\n  }\n \n  addMovie() {\n    this.movies.push({ title: this.mTitle, director: this.mDirector})\n    this.mTitle=\"\"\n    this.mDirector=\"\"\n  }\n \n  Refresh() {\n    console.log(\"refresh\")\n    this.movies = &#91;\n      { title: 'Zootopia', director: 'Byron Howard, Rich Moore'},\n      { title: 'Batman v Superman: Dawn of Justice', director: 'Zack Snyder'},\n      { title: 'Captain American: Civil War', director: 'Anthony Russo, Joe Russo'},\n      { title: 'X-Men: Apocalypse', director: 'Bryan Singer'},\n      { title: 'Warcraft', director: 'Duncan Jones'},\n    ]\n  }\n}\n \nclass Movie {\n  title: string;\n  director: string;\n}\n </code></pre>\n\n\n\n<p><br>BEST ANGULAR BOOKS<br><strong>The Top 8 Best Angular Books, which helps you to get started with Angular </strong> </p>\n\n\n\n<pre class=\"wp-block-code\"><code> \n&lt;h1&gt; {{title}} &lt;/h1&gt;\n \n&lt;ul&gt;\n  &lt;li *ngFor=\"let movie of movies; let i=index;trackBy: trackByFn;\"&gt;\n    {{i}}. {{ movie.title }} - {{movie.director}} &lt;button (click)=\"remove(i)\"&gt;remove&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;button (click)=\"Refresh()\"&gt;Refresh&lt;/button&gt; &lt;br&gt;\n \nTitle     : &lt;input type=\"text\" &#91;(ngModel)]=\"mTitle\"&gt; \nDirector  : &lt;input type=\"text\" &#91;(ngModel)]=\"mDirector\"&gt; \n&lt;button  (click)=\"addMovie()\"&gt;Add&lt;/button&gt;</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Angular-Track-by-renders-the-view-on-refresh.gif\" alt=\"Angular Track by renders the view on refresh\" class=\"wp-image-18421\"/></figure>\n\n\n\n<p>You can see from the above example, that Angular renders the entire DOM every time we click on refresh.</p>\n\n\n\n<h2>Trackby</h2>\n\n\n\n<p>We can solve this problem by providing a function to the&nbsp;<code>trackBy</code>&nbsp;option that returns a unique id for each item. The&nbsp;<code>ngFor</code>&nbsp;will use the unique id returned by the&nbsp;<code>trackBy</code>&nbsp;function to track the items. Hence even if we refresh the data from the back end, the unique id will remain the same and the list will not be rendered again.</p>\n\n\n\n<p>The&nbsp;<code>trackBy</code>&nbsp;takes a function that has two arguments:&nbsp;<code>index</code>&nbsp;and the current&nbsp;<code>item</code>. It must return a&nbsp;<code>id</code>&nbsp;that uniquely identifies the item. The following example returns the&nbsp;<code>title</code>&nbsp;as the unique id.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> trackByFn(index, item) {\n    return item.title;\n  }\n </code></pre>\n\n\n\n<p>In the template assign the newly created&nbsp;<code>trackByFn</code>&nbsp;to&nbsp;<code>trackBy</code>&nbsp;option in the&nbsp;<code>ngFor</code>&nbsp;statement.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;li *ngFor=\"let movie of movies; let i=index;trackBy: trackByFn;\"&gt;\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Using-Track-by-function-helps-the-ngFor-to-efficiently-render-the-list.gif\" alt=\"\" class=\"wp-image-18425\"/></figure>\n\n\n\n<h2>Trackby multiple fields</h2>\n\n\n\n<p>You can also trackby multiple fields as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;li *ngFor=\"let movie of movies; let i=index;trackBy: trackByFnMultipleFields;\"&gt;\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>  trackByFnMultipleFields(index, item) {\n    return item.title + item.director;\n  }\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Trackby in ngFor We usengFor&nbsp;to display a iterable items like array in a list or tabular format. For Example the following code iterates over the&nbsp;movies&nbsp;collection and displays each&nbsp;movie&nbsp;inside an&nbsp;ul The Angular creates a&nbsp;li&nbsp;element for each movie. So if there are&nbsp;n&nbsp;number of movies, the angular inserts the&nbsp;n&nbsp;number of&nbsp;li&nbsp;nodes into the DOM But the data will not [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3517"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3517"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3517/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3966,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3517/revisions/3966"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3517"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3517"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3517"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3518,
    "date": "2020-11-30T07:30:54",
    "date_gmt": "2020-11-30T07:30:54",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=3518"
    },
    "modified": "2020-12-12T06:55:21",
    "modified_gmt": "2020-12-12T06:55:21",
    "slug": "how-to-create-use-custom-directive-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/how-to-create-use-custom-directive-in-angular/",
    "title": {
      "rendered": "How to Create &#038; Use Custom Directive In Angular"
    },
    "content": {
      "rendered": "\n<h2>Angular Directives</h2>\n\n\n\n<p>The Angular has three types of directives.</p>\n\n\n\n<ol><li>Components</li><li>Structural Directives</li><li>Attribute Directives</li></ol>\n\n\n\n<p>Components are directives with Template (or view). We know how to build Angular Components. Structural &amp; Attribute directives do not have an associated view.</p>\n\n\n\n<p>Structural directives change the DOM layout by adding and removing DOM elements. All structural Directives are preceded by the Asterix (<code>*</code>) symbol.</p>\n\n\n\n<p>The Attribute directives can change the appearance or behavior of an element.</p>\n\n\n\n<h2>Creating Custom Attribute Directive</h2>\n\n\n\n<p>The Angular has several built-in attribute directives. Let us create a <code>ttClass</code> directive, which allows us to add class to an element. Similar to the Angular ngClass directive.</p>\n\n\n\n<p>Create a new file and name it as&nbsp;<code>tt-class.directive.ts</code>. import the necessary libraries that we need.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive, ElementRef, Input, OnInit } from '@angular/core'\n</code></pre>\n\n\n\n<p>Decorate the class with&nbsp;<code>@Directive</code>. Here we need to choose a selector (<code>ttClass</code>) for our directive. We name our directive as&nbsp;<code>ttClassDirective</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \n@Directive({\n  selector: '&#91;ttClass]',\n})\nexport class ttClassDirective implements OnInit {</code></pre>\n\n\n\n<p>Our directive needs to take the class name as the input. The <code>Input</code> decorator marks the property <code>ttClass</code> as the input property. It can receive the class name from the parent component.</p>\n\n\n\n<p>We use the same name same as the select name <code>ttClass</code>. This will enable us to use the property binding syntax <code>&lt;button [ttClass]=\"'blue'\"></code> in the component.</p>\n\n\n\n<p>You can also create more than <code>@Input</code> properties.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Input() ttClass: string;\n</code></pre>\n\n\n\n<p>We attach the attribute directive to an element, which we call the parent element. To change the properties of the parent element, we need to get the reference. Angular injects the parent element when we ask for the instance of the <code>ElementRef</code> in its constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>constructor(private el: ElementRef) {\n}\n</code></pre>\n\n\n\n<p><code>ElementRef</code> is a wrapper for the Parent DOM element. We can access the DOM element via the property <code>nativeElement</code>. The <code>classList</code> method allows us to add the class to the element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ngOnInit() {\n  this.el.nativeElement.classList.add(this.ttClass);\n}\n</code></pre>\n\n\n\n<p>The complete code is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive, ElementRef, Input, OnInit } from '@angular/core'\n \n@Directive({\n  selector: '&#91;ttClass]',\n})\nexport class ttClassDirective implements OnInit {\n \n  @Input() ttClass: string;\n \n  constructor(private el: ElementRef) {\n  }\n \n  ngOnInit() {\n    this.el.nativeElement.classList.add(this.ttClass);\n  }\n \n}</code></pre>\n\n\n\n<p>BEST ANGULAR BOOKS<br><strong>The Top 8 Best Angular Books, which helps you to get started with Angular </strong> </p>\n\n\n\n<p>In the&nbsp;<code>app.component.css</code>&nbsp;and the CSS class&nbsp;<code>blue</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \n.blue {\n  background-color: lightblue;\n}</code></pre>\n\n\n\n<p>Finally in the component template attach our customer directive&nbsp;<code>ttClass</code>&nbsp;to the&nbsp;<code>button</code>&nbsp;element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button &#91;ttClass]=\"'blue'\"&gt;Click Me&lt;/button&gt;\n</code></pre>\n\n\n\n<p>You can see from the image below, that&nbsp;<code>class='blue'</code>&nbsp;is inserted by Our Custom Directive.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Custom-Directive-Example-in-Angular.png\" alt=\"Custom Directive Example in Angular\" class=\"wp-image-18503\"/><figcaption>Custom Directive Example in Angular</figcaption></figure>\n\n\n\n<p>The above is a simple imitation of ngClass. Have a look at the source code of ngClass</p>\n\n\n\n<h2>Creating Custom Structural Directive</h2>\n\n\n\n<p>Now, let us build a Custom Structural directive. Let us mimic the <code>ngIf</code> and create a custom directive, which we name it as <code>ttIf</code>. There is hardly any difference in creating a Attribute or structural directive.</p>\n\n\n\n<p>We start of with creating a&nbsp;<code>tt-if.directive.ts</code>&nbsp;file and import the relevant modules.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive, ViewContainerRef, TemplateRef, Input } from '@angular/core';\n</code></pre>\n\n\n\n<p>Decorate the class with&nbsp;<code>@Directive</code>&nbsp;with the selector as (<code>ttIf</code>). We name our directive as&nbsp;<code>ttIfDirective</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Directive({ \n  selector: '&#91;ttIf]' \n})\nexport class ttIfDirective  {</code></pre>\n\n\n\n<p>A variable to hold our if condition.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>_ttif: boolean;\n</code></pre>\n\n\n\n<p>Since, we are manipulating the DOM, we need&nbsp;<code>ViewContainerRef</code>&nbsp;and&nbsp;<code>TemplateRef</code>&nbsp;instances.&nbsp;&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>constructor(private _viewContainer: ViewContainerRef,            private templateRef: TemplateRef&lt;any&gt;) {  }</code></pre>\n\n\n\n<p>Our directive needs to take the if condition as the input. The <code>Input</code> decorator marks the property <code>ttIf</code> as the input property. Note that we are using setter function, because we want the add or remove the content whenever the if condition changes.</p>\n\n\n\n<p>We use the same name same as the select name <code>ttIf</code>. This will enable us to use the property binding syntax <code>&lt;div *ttIf=\"show\"></code> in the template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  @Input()\n  set ttIf(condition) {\n    this._ttif = condition\n    this._updateView();\n  }\n</code></pre>\n\n\n\n<p>This is where all the magic happens. We use the&nbsp;<code>createEmbeddedView</code>&nbsp;method of the&nbsp;<code>ViewContainerRef</code>&nbsp;to insert the template if the condition is&nbsp;<code>true</code>. The&nbsp;<code>clear</code>&nbsp;removes the template from the DOM.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>_updateView() {\n    if (this._ttif) {\n      this._viewContainer.createEmbeddedView(this.templateRef);\n    }\n    else {\n      this._viewContainer.clear();\n    }</code></pre>\n\n\n\n<p>That it. Remember to&nbsp;<code>ttIfDirective</code>&nbsp;in the declaration array of the&nbsp;<code>app.module.ts</code>. The complete code is as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive, ViewContainerRef, TemplateRef, Input } from '@angular/core';\n \n@Directive({ \n  selector: '&#91;ttIf]' \n})\nexport class ttIfDirective  {\n \n  _ttif: boolean;\n \n  constructor(private _viewContainer: ViewContainerRef,\n            private templateRef: TemplateRef&lt;any&gt;) {\n  }\n \n \n  @Input()\n  set ttIf(condition) {\n    this._ttif = condition\n    this._updateView();\n  }\n \n  _updateView() {\n    if (this._ttif) {\n      this._viewContainer.createEmbeddedView(this.templateRef);\n    }\n    else {\n      this._viewContainer.clear();\n    }\n  }\n \n}</code></pre>\n\n\n\n<p>Component class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: &#91;'./app.component.css']\n})\nexport class AppComponent {\n  title: string = \"Custom Directives in Angular\";\n  show=true;\n}</code></pre>\n\n\n\n<p>Template</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1&gt; {{title}} &lt;/h1&gt;\n \nShow Me\n&lt;input type=\"checkbox\" &#91;(ngModel)]=\"show\"&gt;\n \n&lt;div *ttIf=\"show\"&gt;\n  Using the ttIf directive\n&lt;/div&gt;\n \n&lt;div *ngIf=\"show\"&gt;\n  Using the ngIf directive\n&lt;/div&gt;</code></pre>\n\n\n\n<p>Run the app and compare the&nbsp;<code>ngIf</code>&nbsp;&amp; our custom directive&nbsp;<code>ttIf</code>&nbsp;side by side.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Angular-Custom-Directive-ngIf-Clone.gif\" alt=\"Angular Custom Directive ngIf Clone\" class=\"wp-image-18495\"/></figure>\n\n\n\n<h3>Why you need to specify *</h3>\n\n\n\n<p>Remove the * from our newly created&nbsp;<code>ttIf</code>&nbsp;directive. And you will get the error message</p>\n\n\n\n<p>ERROR NullInjectorError: StaticInjectorError(AppModule)[NgIf -&gt; TemplateRef]:<br>StaticInjectorError(Platform: core)[NgIf -&gt; TemplateRef]:<br>NullInjectorError: No provider for TemplateRef!</p>\n\n\n\n<p>We use the&nbsp;<code>*</code>notation to tell Angular that we have a structural directive and we will be manipulating the DOM. It basically tells angular to inject the&nbsp;<code>TemplateRef</code>. To inject the&nbsp;<code>templateRef</code>, the Angular needs to locate the template. The&nbsp;<code>*</code>&nbsp;tells the Angular to locate the template and inject its reference as&nbsp;<code>templateRef</code></p>\n\n\n\n<h2>Custom Directive Examples</h2>\n\n\n\n<p>The following two more Custom Directive Examples.&nbsp;<code>Toggle</code>&nbsp;&amp;&nbsp;<code>Tooltip</code>&nbsp;directives</p>\n\n\n\n<h3>Toggle Directive</h3>\n\n\n\n<p>The following directive adds or removes the CSS class&nbsp;<code>toggle</code>&nbsp;from the Parent element. We do that by listening to the click event on the host element or parent element.</p>\n\n\n\n<p>Angular makes this easy to listen to the events from the parent or host element using the<code>@HostListener</code> function decorator. We use it to decorate the function (<code>onClick</code> method in the example). It accepts the name of the event as the argument and invokes the decorated method whenever the user raises the event.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> @HostListener('click')\n private onClick() {\n</code></pre>\n\n\n\n<p>The complete code of the&nbsp;<code>ttToggleDirective</code>&nbsp;is as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive, ElementRef, Renderer2, Input, HostListener, HostBinding } from '@angular/core'\n \n@Directive({\n  selector: '&#91;ttToggle]',\n})\nexport class ttToggleDirective {\n \n  private elementSelected = false;\n \n  constructor(private el: ElementRef) {\n  }\n \n  ngOnInit() {\n  }\n \n  @HostListener('click')\n  private onClick() {\n    this.elementSelected = !this.elementSelected;\n    if (this.elementSelected) {\n      this.el.nativeElement.classList.add('toggle')\n    } else {\n      this.el.nativeElement.classList.remove('toggle')\n    }\n  }\n \n}\n </code></pre>\n\n\n\n<p>Add the following CSS Class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.toggle {\n  background-color: yellow\n}\n</code></pre>\n\n\n\n<p>Use it as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button ttToggle&gt;Click To Toggle&lt;/button&gt;\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Toggle-Directive-Example.gif\" alt=\"Toggle Directive Example\" class=\"wp-image-18499\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Tooltip Directive</h3>\n\n\n\n<p>The tooltip directive shows the tip whenever the user hovers over it. The directive uses the <code>HostListener</code> to listen to the <code>mouseenter</code> and <code>mouseleave</code> events.</p>\n\n\n\n<p>The&nbsp;<code>showHint</code>&nbsp;method adds a&nbsp;<code>span</code>&nbsp;element into the DOM and sets its top &amp; left position just below the host element. The&nbsp;<code>removeHint</code>&nbsp;removes it from the DOM.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Directive, ElementRef, Renderer2, Input, HostListener } from '@angular/core'\n \n@Directive({\n  selector: '&#91;ttToolTip]',\n})\nexport class ttTooltipDirective {\n \n  @Input() toolTip: string;\n \n  elToolTip: any;\n \n  constructor(private elementRef: ElementRef,\n            private renderer: Renderer2) {\n  }\n \n  @HostListener('mouseenter') \n  onMouseEnter() {\n    if (!this.elToolTip) { this.showHint(); }\n  }\n \n  @HostListener('mouseleave') \n  onMouseLeave() {\n    if (this.elToolTip) { this.removeHint(); }\n  }\n \n  ngOnInit() {\n  }\n \n  removeHint() {\n    this.renderer.removeClass(this.elToolTip, 'tooltip');\n    this.renderer.removeChild(document.body, this.elToolTip);\n    this.elToolTip = null;\n  }\n \n  showHint() {\n \n    this.elToolTip = this.renderer.createElement('span');\n    const text = this.renderer.createText(this.toolTip);\n    this.renderer.appendChild(this.elToolTip, text);\n \n    this.renderer.appendChild(document.body, this.elToolTip);\n    this.renderer.addClass(this.elToolTip, 'tooltip');\n    \n    let hostPos = this.elementRef.nativeElement.getBoundingClientRect();\n    let tooltipPos= this.elToolTip.getBoundingClientRect();\n \n    let top = hostPos.bottom+10 ; \n    let left = hostPos.left;\n \n    this.renderer.setStyle(this.elToolTip, 'top', `${top}px`);\n    this.renderer.setStyle(this.elToolTip, 'left', `${left}px`);\n  }\n}\n </code></pre>\n\n\n\n<p>Add the following CSS Class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.tooltip {\n  display: inline-block;\n  border-bottom: 1px dotted black; \n  position: absolute;\n}</code></pre>\n\n\n\n<p>Use it as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button ttToolTip toolTip=\"Tip of the day\"&gt;Show Tip&lt;/button&gt; \n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2020/05/Tootip-Directive-Example.gif\" alt=\"Tootip Directive Example\" class=\"wp-image-18501\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Angular Directives The Angular has three types of directives. Components Structural Directives Attribute Directives Components are directives with Template (or view). We know how to build Angular Components. Structural &amp; Attribute directives do not have an associated view. Structural directives change the DOM layout by adding and removing DOM elements. All structural Directives are preceded by [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [126],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3518"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3518"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3518/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3967,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3518/revisions/3967"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3518"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3518"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3518"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]
