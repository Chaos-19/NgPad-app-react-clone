[
  {
    "id": 3710,
    "date": "2020-12-08T06:03:24",
    "date_gmt": "2020-12-08T06:03:24",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3710" },
    "modified": "2020-12-09T07:36:53",
    "modified_gmt": "2020-12-09T07:36:53",
    "slug": "introduction-to-angular-modules",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/introduction-to-angular-modules/",
    "title": { "rendered": "Introduction to Angular Modules" },
    "content": {
      "rendered": "\n<h4>What is Angular Module</h4>\n\n\n\n<p>The Angular module must implement a specific feature. The Components, Directives, Services which implement such a feature, will become part of that Module.&nbsp;</p>\n\n\n\n<p>The Modular design helps to keep the Separation of concerns. Keep the features together. Makes it easy to maintain the code. Makes it easier to reuse the code.</p>\n\n\n\n<p>The Angular itself is built on the concept of Modules.The&nbsp;<code>@angular/core</code>&nbsp;is the main Angular module, which implements the Angularâ€™s core functionality, low-level services, and utilities.</p>\n\n\n\n<p>The Features like Forms, HTTP and Routing are implemented as separate Feature modules such as <code>FormsModule</code>, <code>HttpClientModule</code>, and <code>RouterModule</code>. There are Many third-party libraries built around Angular such as such as Material Design, Ionic, etc.</p>\n\n\n\n<p>Angular Applications are assembled from the modules. The module exports Component, directive, service, pipe, etc, which can be then imported in another module</p>\n\n\n\n<h2>JavaScript Modules vs. NgModules</h2>\n\n\n\n<h3>JavaScript Modules</h3>\n\n\n\n<p>The JavaScript Modules , which also goes by the name JS modules or ES modules or ECMAScript modules are part of the JavaScript Language. The JS Modules are stored in a file. There is exactly one module per file and one file per module. These modules contain small units of independent, reusable code. They export a value, which can be imported and used in some other module.</p>\n\n\n\n<p>The following is a Javascript Module which exports the <code>SomeComponent</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { SomeComponent } from './some.component';\r\n \r\nexport class SomeOtherComponent { \r\n   /do some other thing\r\n}</code></pre>\n\n\n\n<p>The <code>SomeOtherComponent</code> is another JavaScript Module, which imports and uses the <code>SomeComponent</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { SomeComponent } from './some.component';\r\n \r\nexport class SomeOtherComponent { \r\n   /do some other thing\r\n}</code></pre>\n\n\n\n<h3>How to Create an Angular Module</h3>\n\n\n\n<p>The Angular Module must declare the Components, Pipes, and Directives it manages. We Create the Angular Modules by decorating it with the ngModule decorator.</p>\n\n\n\n<h2>ngModule</h2>\n\n\n\n<p>The NgModule() decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n@NgModule({\r\n  declarations: &#91;  ],\r\n  imports:      &#91;  ],\r\n  providers:    &#91;  ],\r\n  exports:      &#91;  ],\r\n  bootstrap:    &#91;  ],\r\n  entrycomponents: &#91; ]\r\n})\r\n </code></pre>\n\n\n\n<h3>Declarations array</h3>\n\n\n\n<p>This is where components, directives, and pipes that belong to this NgModule are declared.</p>\n\n\n\n<h3>Imports array</h3>\n\n\n\n<p>If you want this ngModule require any feature or functionality, then those modules need to be imported here. Any components, directives, and pipes that are defined and exported in that module can be used in this module.</p>\n\n\n\n<h3>Exports array</h3>\n\n\n\n<p>If you want other modules to use the component, pipes, directives of this NgModule, then those must be specified here.</p>\n\n\n\n<h3>Bootstrap</h3>\n\n\n\n<p>The main component of this module, which needs to be loaded when the module is loaded is specified here.</p>\n\n\n\n<h3>EntryComponents</h3>\n\n\n\n<p>The components that are dynamically loaded needs to be declared here.</p>\n\n\n\n<p>The components are loaded when angular</p>\n\n\n\n<ul><li>Finds the Component Selector in the HTML</li><li>Declared in the bootstrap array</li><li>Declared in the root definition</li></ul>\n\n\n\n<p>If your component is not listed any of the above, then it needs to be declared in&nbsp;<code>EntryComponent</code>&nbsp;so that it Angular knows where to find them and compile.</p>\n\n\n\n<p>The following image should make it clear, how the&nbsp;ngModule&nbsp;metadata works</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/11/Angular-Module-or-ngModule-Decorator.png\" alt=\"\" class=\"wp-image-9479\"/></figure>\n\n\n\n<h2>Angular Module Example</h2>\n\n\n\n<p>Let us create an example application with multiple modules to demonstrate the use of the Angular Modules.&nbsp;</p>\n\n\n\n<h3>Create the application</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>ng new --routing  --style css ModuleDemo</code></pre>\n\n\n\n<p>Use <code>npm start</code> to run the program and test everything is ok.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cd ModuleDemo\r\nnpm start</code></pre>\n\n\n\n<p>The App Contains two Modules. i.e.&nbsp;<code>AppModule</code>&nbsp;&amp;&nbsp;<code>AppRoutingModule</code></p>\n\n\n\n<h3>Routing Module</h3>\n\n\n\n<p>The <code>AppRoutingModule</code> is an Angular Module, which specifically defines the application <code>Routes</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nconst routes: Routes = &#91;];\r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forRoot(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { }</code></pre>\n\n\n\n<p>This module does not contain any components, pipes or directives. Hence it does not need to declare anything in the&nbsp;<code>declaration</code>&nbsp;array</p>\n\n\n\n<p>No services are part of this Module, Hence providers array is also not needed.</p>\n\n\n\n<p>The Angular <code>RouterModule</code> is needed for the routing to work, Hence it is imported. The <code>Routermodule</code> requires the routes to work, hence it is passed to the <code>RouterModule</code> in the <code>forRoot</code> method.</p>\n\n\n\n<h3>Root Module</h3>\n\n\n\n<p>The first module that gets loaded in called <strong>Root Module</strong>, which is conventionally named as <code>AppModule</code> and is automatically created by the Angular CLI.</p>\n\n\n\n<p>The following is the auto-generated code of the <code>AppModule</code>. The class is decorated with the <code>@NgModule</code> decorator</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>The&nbsp;<code>AppModule</code>&nbsp;has only one component i.e&nbsp;<code>AppComponent</code>&nbsp;and it does not have any pipes or directives.&nbsp;Hence the&nbsp;<code>declaration</code>&nbsp;array contains only&nbsp;<code>AppComponent</code></p>\n\n\n\n<p>The&nbsp;<code>imports</code>&nbsp;metadata should contain the other modules that is being used by this module. Hence it imports the&nbsp;<code>BrowserModule</code>, which is an Angular Library. It also requires Routes, hence we are importing&nbsp;<code>AppRoutingModule</code></p>\n\n\n\n<p>The&nbsp;<code>AppModule</code>&nbsp;does not define any services. Hence the&nbsp;<code>providers</code>&nbsp;array is empty</p>\n\n\n\n<p>Finally, we need to load the&nbsp;<code>AppComponent</code>&nbsp;when the App starts, hence we define it in&nbsp;<code>bootstrap</code>&nbsp;array</p>\n\n\n\n<h3>Creating a Module</h3>\n\n\n\n<p>Let us add another Module to our above application.</p>\n\n\n\n<p>Create a folder&nbsp;<code>home</code>&nbsp;under&nbsp;<code>src/app</code>&nbsp;folder</p>\n\n\n\n<h4>Components</h4>\n\n\n\n<p>Let us add three components.&nbsp;<code>HomeComponent</code>,&nbsp;<code>AboutUsComponent</code>,&nbsp;<code>ContactUsComponent</code>.</p>\n\n\n\n<p>Create a folder called&nbsp;<code>pages</code>&nbsp;under the&nbsp;<code>home</code>&nbsp;folder. Create a three folder under pages&nbsp;<code>aboutus</code>,&nbsp;<code>contactus</code>&nbsp;&amp;&nbsp;<code>home</code>.</p>\n\n\n\n<p><strong>home/pages/aboutus/about-us.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n    templateUrl: './about-us.component.html',\r\n})\r\nexport class AboutUsComponent\r\n{\r\n}</code></pre>\n\n\n\n<p><strong>home/pages/aboutus/about-us.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1> About Us Page&lt;/h1></code></pre>\n\n\n\n<p><strong>home/pages/contactus/contact-us.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n    templateUrl: './contact-us.component.html',\r\n})\r\nexport class ContactUsComponent\r\n{\r\n}</code></pre>\n\n\n\n<p><strong>home/pages/contactus/contact-us.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1> Contact Us&lt;/h1></code></pre>\n\n\n\n<p><strong>home/pages/home/home.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\n \r\n@Component({\r\n    templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent\r\n{\r\n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1> Welcome To Module Demo&lt;/h1></code></pre>\n\n\n\n<p></p>\n\n\n\n<p><strong>home/pages/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nexport * from './aboutus/about-us.component';\r\nexport * from './contactus/contact-us.component';\r\nexport * from './home/home.component';</code></pre>\n\n\n\n<h4>Home Module</h4>\n\n\n\n<p>Now, our components are ready, we can now create the HomeModule</p>\n\n\n\n<p>Create the <code>home.module.ts</code> under the <code>home</code> folder</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\n \r\nimport { AboutUsComponent,ContactUsComponent,HomeComponent } from './pages';\r\n \r\nconst routes: Routes = &#91;\r\n  {   path: '',   component: HomeComponent   },\r\n  {   path: 'home',   component: HomeComponent   },\r\n  {   path: 'contactus',   component: ContactUsComponent   },\r\n  {   path: 'aboutus',   component: AboutUsComponent   },\r\n];\r\n \r\n@NgModule({\r\n  declarations: &#91;AboutUsComponent,ContactUsComponent,HomeComponent],\r\n  imports: &#91;\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class HomeModule { }</code></pre>\n\n\n\n<p>We decorate the&nbsp;<code>HomeModule</code>&nbsp;class with&nbsp;<code>@NgModule</code>&nbsp;to let Angular know that it is a Angular Module</p>\n\n\n\n<p>Next, use the&nbsp;<code>declarations</code>&nbsp;array to declare the three components that we have created.</p>\n\n\n\n<p>The&nbsp;<code>HomeModule</code>&nbsp;do not expose any services, hence we keep the&nbsp;<code>providers</code>&nbsp;array empty</p>\n\n\n\n<p>We are keeping the&nbsp;<code>Routes</code>&nbsp;in the module itself. You can create the separate routing module similar to the&nbsp;<code>AppRoutingModule</code>. That will help to keep the&nbsp;<code>HomeModule</code>&nbsp;code clean.</p>\n\n\n\n<p><code>HomeModule</code>&nbsp;requires&nbsp;<code>CommonModule</code>&nbsp;hence it is added to the&nbsp;<code>imports</code>&nbsp;array. The&nbsp;<code>RouterModule</code>&nbsp;module is imported and routes are registered with the call to&nbsp;<code>forChild(routes)</code>.&nbsp;<code>forChild</code>&nbsp;registered the routes but does not registers any services.</p>\n\n\n\n<p><strong>home/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './pages';\r\nexport * from './home.module';</code></pre>\n\n\n\n<h3>Using HomeModule in AppModule</h3>\n\n\n\n<p>Next step is to import the <code>HomeModule</code> in the <code>AppModule</code>. First import the <code>HomeModule</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { HomeModule} from './home';</code></pre>\n\n\n\n<p>Next, add <code>HomeModule</code> to the imports metadata of the <code>@ngModule</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HomeModule\r\n  ],</code></pre>\n\n\n\n<p>Next, we need to use the Components of the <code>HomeModule</code>. Open the <code>app.component.ts</code> and add the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\r\n  &lt;li>\r\n    &lt;a class=\"navbar-brand\" routerLink=\"/\">Home&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/aboutus\">About&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n    &lt;a class=\"navbar-brand\" routerLink=\"/contactus\">Contact&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul>\r\n \r\n&lt;router-outlet>&lt;/router-outlet></code></pre>\n\n\n\n<p>All we have done is to use them <code>routerLink</code> to create a menu item. </p>\n\n\n\n<p>Copy the following CSS to app.component.css</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nul {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    background-color: #333333;\r\n}\r\n \r\nli {\r\n    float: left;\r\n}\r\n \r\nli a {\r\n    display: block;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 16px;\r\n    text-decoration: none;\r\n}\r\n \r\nli a:hover {\r\n    background-color: #111111;\r\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Angular Module The Angular module must implement a specific feature. The Components, Directives, Services which implement such a feature, will become part of that Module.&nbsp; The Modular design helps to keep the Separation of concerns. Keep the features together. Makes it easy to maintain the code. Makes it easier to reuse the code. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [135],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3710" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3710"
        }
      ],
      "version-history": [
        {
          "count": 4,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3710/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3863,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3710/revisions/3863"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3710"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3710"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3710"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3713,
    "date": "2020-12-08T06:11:44",
    "date_gmt": "2020-12-08T06:11:44",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3713" },
    "modified": "2020-12-09T07:39:45",
    "modified_gmt": "2020-12-09T07:39:45",
    "slug": "angular-routing-between-modules",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-routing-between-modules/",
    "title": { "rendered": "Angular Routing between modules" },
    "content": {
      "rendered": "\n<h2>Routing : A recap</h2>\n\n\n\n<p>Let us briefly how routing is configured in the root module of the application.</p>\n\n\n\n<h3>Defining the routes</h3>\n\n\n\n<p>The routes are defined in a constant as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const appRoutes={ path: 'home',   component: HomeComponent } </code></pre>\n\n\n\n<p>Where&nbsp;<code>path</code>&nbsp;is the URL segment and&nbsp;<code>component</code>&nbsp;is the component to be loaded. This route tells angular to render&nbsp;<code>HomeComponent</code>&nbsp;when the user navigates to the URL&nbsp;</p>\n\n\n\n<h3>Register the Routes</h3>\n\n\n\n<p>Next, we register the routes with&nbsp; the&nbsp;<code>RouterModule</code>&nbsp;in our&nbsp;<code>AppModule</code>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code> imports: &#91;RouterModule.forRoot(routes)], </code></pre>\n\n\n\n<h3>Display the Component</h3>\n\n\n\n<p>Next, we will use the&nbsp;<code>RouterLink</code>&nbsp;directive to bind the click event to&nbsp;<code>Route</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;li>&lt;a &#91;routerLink]=\"&#91;'home']\">Home&lt;/a>&lt;/li> </code></pre>\n\n\n\n<p>We, then display the component using the&nbsp;<code>router-outlet</code>&nbsp;directive as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;router-outlet>&lt;/router-outlet> </code></pre>\n\n\n\n<h2>Routing in Feature Module</h2>\n\n\n\n<p>The Routing in Feature Module or sub module follows the same pattern except for how we register the routes with the&nbsp;<code>RouterModule</code></p>\n\n\n\n<p>In the Root module we will use the&nbsp;<code>forRoot</code>&nbsp;(<code>RouterModule.forRoot(routes)</code>) method , while in feature modules we will use the&nbsp;<code>forChild</code>&nbsp;method (<code>RouterModule.forChild(routes)</code>)</p>\n\n\n\n<h2>forRoot vs forChild</h2>\n\n\n\n<p>The&nbsp;RouterModule contans several components. it also includes the several Services.</p>\n\n\n\n<p>The services provided in the Root Module or in any of the&nbsp;<em>eagerly loaded feature modules</em>&nbsp; are app-scoped. i.e they are available for injection in every component in the app.</p>\n\n\n\n<p>This rule does not apply to the&nbsp;<em>lazy loaded modules</em>. The lazy loaded modules gets their own injector and providers. The services provided in the lazy loaded modules are available only in the lazy loaded module only.</p>\n\n\n\n<p>Now, consider the case where&nbsp;<code>RouterModule</code>&nbsp;is imported in a lazy loaded module. This will create the separate instance of the Router service in the lazy loaded module. This will have untended bugs as there should only a single instance of the Router service in the app.&nbsp;&nbsp;</p>\n\n\n\n<p>We need to register the services only in the&nbsp;<code>AppModule</code>&nbsp;and not in the&nbsp;<em>Lazy loaded module</em>. The&nbsp;<code>forRoot</code>&nbsp;method imports&nbsp;<code>RouterModule</code>&nbsp;and registers all its services. Hence it is used in the&nbsp;<em>root module</em>. The&nbsp;<code>forChild</code>&nbsp;method imports&nbsp;<code>RouterModule</code>&nbsp;but does not registers its services. Hence it should be all other modules.</p>\n\n\n\n<h2>Example App</h2>\n\n\n\n<p>Create an Angular App using&nbsp;Angular CLI&nbsp;command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> ng new --routing  --style css ModuleDemo </code></pre>\n\n\n\n<h3>Creating the Feature Module</h3>\n\n\n\n<p>Lets create a feature module named&nbsp;<code>AdminModule</code>.&nbsp;First, Create a folder called&nbsp;<code>admin</code>&nbsp;under&nbsp;<code>app</code>&nbsp;folder.</p>\n\n\n\n<p><strong>user.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\n \r\n@Component({\r\n  template: '&lt;h1>User Component&lt;/h1>',\r\n})\r\nexport class UserComponent {\r\n  title = '';\r\n}</code></pre>\n\n\n\n<p><strong>user.component.ts</strong></p>\n\n\n\n<p><strong>rights.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component } from '@angular/core'; @Component({  template: '&lt;h1>Rights Component&lt;/h1>',})export class RightsComponent {  title = '';} </code></pre>\n\n\n\n<p><strong>dashboard.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n  template: '&lt;h1>Dashboard Component&lt;/h1>',\r\n})\r\nexport class DashboardComponent {\r\n  title = '';\r\n}</code></pre>\n\n\n\n<h4>Routing Module</h4>\n\n\n\n<p>The next step is to create the routing module for the above components.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { UserComponent } from './user.component';\r\nimport { RightsComponent } from './rights.component';\r\nimport { DashboardComponent } from './dashboard.component';\r\n \r\nconst routes: Routes = &#91;\r\n    {   path: 'user',   component: UserComponent   },\r\n    {   path: 'rights',   component: RightsComponent   },\r\n    {   path: 'dashboard',   component: DashboardComponent   },\r\n  ];\r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forChild(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AdminRoutingModule { }</code></pre>\n\n\n\n<p>The routes are defined as&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const routes: Routes = &#91;\r\n    {   path: 'user',   component: UserComponent   },\r\n    {   path: 'rights',   component: RightsComponent   },\r\n    {   path: 'dashboard',   component: DashboardComponent   },\r\n  ];</code></pre>\n\n\n\n<p>and&nbsp;<code>RouterModule</code>&nbsp;is imported with the&nbsp;<code>RouterModule.forChild(routes)</code>, which registers the routes with the router but does not create the router service&nbsp;</p>\n\n\n\n<h4>Root Module</h4>\n\n\n\n<p><strong>admin.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n \r\nimport { AdminRoutingModule } from './admin.routing.module';\r\n \r\nimport { UserComponent } from './user.component';\r\nimport { RightsComponent } from './rights.component';\r\nimport { DashboardComponent } from './dashboard.component';\r\n \r\n@NgModule({\r\n  declarations: &#91;UserComponent,RightsComponent,DashboardComponent],\r\n  imports: &#91;\r\n    CommonModule,\r\n    AdminRoutingModule,\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class AdminModule { }</code></pre>\n\n\n\n<p><strong>app.module.ts</strong></p>\n\n\n\n<p>Finally, we need to import the&nbsp;<code>AdminModule</code>&nbsp;in the&nbsp;<code>AppModule</code>&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\nimport { AdminModule} from './admin/admin.module';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    AdminModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p><strong>app-routing.module.ts</strong></p>\n\n\n\n<p>The&nbsp;<code>AppRoutingModule</code>&nbsp;contains the routing information for the&nbsp;<code>AppModule</code>, which in the example is empty. The Routs are registered with the&nbsp;<code>forRoot</code>&nbsp;method, which registers the&nbsp;<code>routes</code>&nbsp;and also registers the routing related services.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nconst routes: Routes = &#91;];\r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forRoot(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n </code></pre>\n\n\n\n<p>Finally, the&nbsp;<code>AppRoutingModule</code>&nbsp;is imported in the&nbsp;<code>AppModule</code></p>\n\n\n\n<p>Add the following CSS styles to&nbsp;<code>app.component.css</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> ul {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    background-color: #333333;\r\n}\r\n \r\nli {  float: left; }\r\n \r\nli a {\r\n    display: block;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 16px;\r\n    text-decoration: none;\r\n}\r\n \r\nli a:hover { background-color: #111111; }</code></pre>\n\n\n\n<h3>Child Routes</h3>\n\n\n\n<p>In the above example , the URL looks like&nbsp;&nbsp;<code>/user</code>,&nbsp;<code>/dashboard</code>&nbsp;&amp;&nbsp;<code>/rights</code>. You can change the URL to&nbsp;<code>admin/dashboard</code>,&nbsp;<code>admin/user</code>,&nbsp;<code>admin/rights</code>&nbsp;by using the following routes</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const routes: Routes = &#91;\r\n    {   path: 'admin',   component: DashboardComponent,\r\n        children :&#91;\r\n            { path: 'dashboard', component: DashboardComponent},\r\n            { path: 'user', component: UserComponent},\r\n            { path: 'rights', component: RightsComponent},\r\n        ]\r\n    },\r\n];</code></pre>\n\n\n\n<p>In the above example both&nbsp;<code>/admin</code>&nbsp; &amp;&nbsp;<code>/admin/dashboard</code>&nbsp;points to the&nbsp;<code>DashboardComponent</code></p>\n\n\n\n<p>You need to make appropriate changes in the&nbsp;<code>app.component.html</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;ul>\r\n  &lt;li>\r\n    &lt;a routerLink=\"/admin/dashboard\">Dashboard&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n      &lt;a routerLink=\"/admin/user\">User&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n    &lt;a routerLink=\"/admin/rights\">Rights&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul>\r\n \r\n&lt;router-outlet>&lt;/router-outlet></code></pre>\n\n\n\n<h3>Menu in&nbsp; Feature Module</h3>\n\n\n\n<p>Change the routes to&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const routes: Routes = &#91;\r\n    {  path: 'admin', component: DashboardComponent,\r\n       children :&#91;\r\n           { path: 'user', component: UserComponent},\r\n           { path: 'rights', component: RightsComponent},\r\n       ]\r\n    },\r\n];</code></pre>\n\n\n\n<p>Add the Menu in DashboardComponent</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nimport { Component } from '@angular/core';\r\n \r\n@Component({\r\n  template: `&lt;h1>Dashboard Component&lt;/h1>\r\n   \r\n  &lt;ul>\r\n    &lt;li>&lt;a routerLink=\"user\">User&lt;/a>&lt;/li>\r\n    &lt;li> &lt;a routerLink=\"rights\">Rights&lt;/a>&lt;/li>\r\n  &lt;/ul>\r\n  &lt;router-outlet>&lt;/router-outlet>\r\n  `,\r\n})\r\nexport class DashboardComponent {\r\n  title = '';\r\n}\r\n </code></pre>\n\n\n\n<p>And remove it from&nbsp;app.component.html</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\n&lt;ul>\r\n  &lt;li>\r\n    &lt;a routerLink=\"/admin\">Admin&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul>\r\n \r\n&lt;router-outlet>&lt;/router-outlet></code></pre>\n\n\n\n<h2>Wild card route</h2>\n\n\n\n<p>The (<code>**</code>)&nbsp;wild card route&nbsp;is matches by every URL and&nbsp;<em>must be placed last.</em>. This is used to display the&nbsp;<em>Page not found</em>&nbsp;error message, when the URL does not match any routes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> { path: '**', component: NotFoundComponent } </code></pre>\n\n\n\n<p>Open the&nbsp;<code>AppModule</code>&nbsp;and add a new component&nbsp;<code>not-found.component.ts</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\n \r\n@Component({\r\n  template: '&lt;h1>Not Found&lt;/h1>',\r\n})\r\nexport class NotFoundComponent {\r\n  title = '';\r\n}</code></pre>\n\n\n\n<p>Add the&nbsp;<code>AppRoutingModule</code>&nbsp;to include the&nbsp;<code>NotFoundComponent</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { NotFoundComponent } from './not-found.component';\r\n \r\nconst routes: Routes = &#91;\r\n  { path: '**', component: NotFoundComponent }\r\n];\r\n \r\n@NgModule({\r\n  declarations:&#91;NotFoundComponent],\r\n  imports: &#91;RouterModule.forRoot(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { } </code></pre>\n\n\n\n<p>And&nbsp;<code>AppModule</code>, move the&nbsp;<code>AppRoutingModule</code>&nbsp;to last in the imports. This will ensure that the wild card route is always at the last place.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n \r\nimport { AdminModule} from './admin/admin.module';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent\r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AdminModule,\r\n \r\n    AppRoutingModule,   //this must be called last\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Routing : A recap Let us briefly how routing is configured in the root module of the application. Defining the routes The routes are defined in a constant as shown below Where&nbsp;path&nbsp;is the URL segment and&nbsp;component&nbsp;is the component to be loaded. This route tells angular to render&nbsp;HomeComponent&nbsp;when the user navigates to the URL&nbsp; Register the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [135],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3713" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3713"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3713/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3864,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3713/revisions/3864"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3713"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3713"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3713"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3719,
    "date": "2020-12-08T06:24:34",
    "date_gmt": "2020-12-08T06:24:34",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3719" },
    "modified": "2020-12-08T11:37:08",
    "modified_gmt": "2020-12-08T11:37:08",
    "slug": "angular-folder-structure-best-practices",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-folder-structure-best-practices/",
    "title": { "rendered": "Angular Folder Structure Best Practices" },
    "content": {
      "rendered": "\n<h2>Folder for each Angular Module</h2>\n\n\n\n<p>The Angular uses the concept of&nbsp;Angular Modules&nbsp;to group together the related features. This gives us a nice starting point to organize the folder structure. Each Module should get&nbsp;its own folder named after the Module Name.</p>\n\n\n\n<p>The Angular does not make any distinction between the Modules. but based on how we make use of modules, we can classify our modules into the following four categories</p>\n\n\n\n<ol><li>Root Module</li><li>Feature Module</li><li>Shared Module</li><li>Core Module</li></ol>\n\n\n\n<h3>Root Module</h3>\n\n\n\n<p>The Angular requires one module to be loaded as the application starts. We call this as root module. The&nbsp;<em>root module</em>&nbsp;loads the root component and all other modules</p>\n\n\n\n<p>&nbsp;The&nbsp;<em>root module</em>&nbsp;is conventionally called as&nbsp;<code>AppModule</code>&nbsp;and created under the&nbsp;&nbsp;<code>/src/app</code>.folder</p>\n\n\n\n<h3>Feature Modules</h3>\n\n\n\n<p>The Features module implements a specific&nbsp;feature of the Application. All the components, pipes &amp; directives which implement the feature become part of the module.</p>\n\n\n\n<p><em>Further Reading</em>&nbsp;on Angular Modules</p>\n\n\n\n<ul><li><strong>Angular Modules</strong></li></ul>\n\n\n\n<p>All the components belonging to Feature&nbsp;Modules&nbsp;must be placed inside a directory named after the module. For Example&nbsp;<code>/src/app/&lt;ModuleName&gt;</code>.&nbsp; By doing so, we make it easy to search a component belonging to the module</p>\n\n\n\n<p>You can create subfolders for directives, pipes under the module folder</p>\n\n\n\n<p>You can create a&nbsp;<em>components</em>&nbsp;folder and put all your&nbsp;<em>components</em>&nbsp;there. Or create a subfolder for each&nbsp;<em>component</em>&nbsp;under the&nbsp;<em>components</em>&nbsp;folder</p>\n\n\n\n<p>Another option to create a&nbsp;<code>pages</code>&nbsp;folder. Each route is a page. The folder is named after the route path. The route might contain more than one component. All of them placed under that page folder. The shared components can be placed under the separate components folder.</p>\n\n\n\n<p>The idea of pages is borrowed from&nbsp;this article on Medium</p>\n\n\n\n<pre class=\"wp-block-code\"><code>â”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ app\nâ”‚   â”‚   â”œâ”€â”€ admin \nâ”‚   â”‚   â”‚   â”œâ”€â”€ components\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ shared.component.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ directives\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ first.directive.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ another.directive.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pages\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ dashboard\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ dashboard.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ rights\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ rights.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ user\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ user.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ admin.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ admin.component.html\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ admin.component.css\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pipes\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ first.pipe.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ another.pipe.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.routing.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\n </code></pre>\n\n\n\n<h3>Shared Module</h3>\n\n\n\n<p>There are many components, directives &amp; pipes, which we may like to share across various modules. All these components should go into the shared module.&nbsp;</p>\n\n\n\n<p>The shared module and must declare the components, pipes, and directives using the&nbsp;<code>declarations</code>&nbsp;metadata and export it using the&nbsp;<code>exports</code>&nbsp;metadata</p>\n\n\n\n<p>Other Modules can import the shared modules and use the&nbsp;<em>exported</em>&nbsp;components, directives &amp; pipes</p>\n\n\n\n<p>The Services must not be defined here. Since the shared modules are imported everywhere, it may create a new instance of the service if it is imported in the&nbsp;<em>lazy loaded modules</em>.</p>\n\n\n\n<p>The Shared module must be created under the folder&nbsp;<code>/src/app/shared</code>&nbsp;folder.</p>\n\n\n\n<p>The Shared module should not have any dependency on any of the other modules in the application.</p>\n\n\n\n<p>The commonly required angular modules like ( CommonModule, FormsModule, etc) or third party modules can be imported here and re-exported. The other module importing the shared module does not have to import those modules.</p>\n\n\n\n<p>You can follow the following folder structure, where each shared feature is created in its own own folder.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>â”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ app\nâ”‚   â”‚   â”œâ”€â”€ shared\nâ”‚   â”‚   â”‚   â”œâ”€â”€ layout\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer.component.html\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header.component.html\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\n </code></pre>\n\n\n\n<p>Or you can create folders like components, pipes, directives as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>â”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ app\nâ”‚   â”‚   â”œâ”€â”€ shared\nâ”‚   â”‚   â”‚   â”œâ”€â”€ components\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer.component.html\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header.component.html\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pipes\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ pipe1\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ pipe1.pipe.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\n </code></pre>\n\n\n\n<h3>Core Module</h3>\n\n\n\n<p>The Services shared across the application must become part of the&nbsp;<code>CoreModule</code>. The user authentication services, services that fetch data are examples of such services.</p>\n\n\n\n<p>The Services usually needs to be Singleton, Only one instance of the Service must exist. Providing it in&nbsp;<code>CoreModule</code>&nbsp;ensures that the&nbsp;services remain singleton</p>\n\n\n\n<p>The core module must be imported only in the root module. Other modules must not import the core modules. You can use the following code to stop the other modules from importing the core module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@NgModule({})\nexport class CoreModule { \n \n  constructor(@Optional() @SkipSelf() core:CoreModule ){\n    if (core) {\n        throw new Error(\"You should import core module only in the root module\")\n    }\n  }\n}</code></pre>\n\n\n\n<p>The&nbsp;<code>CoreModule</code>&nbsp;must be created under the folder&nbsp;<code>/src/app/core</code>&nbsp;folder.</p>\n\n\n\n<p>Under the core folder, you can create&nbsp;<strong>subfolders for each service</strong>&nbsp;under the services folder.</p>\n\n\n\n<h2>Folder Structure Example&nbsp;</h2>\n\n\n\n<p>Let us build a simple with shared, core and feature module</p>\n\n\n\n<p>Create a new application using ng new</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ng new --routing  --style css ModuleDemo </code></pre>\n\n\n\n<h3>Feature Modules</h3>\n\n\n\n<p>Now let us create three feature modules&nbsp;<code>AdminModule</code>,&nbsp;<code>GthubModule</code>&nbsp;&amp;&nbsp;<code>HomeModule</code></p>\n\n\n\n<h4>Admin Module</h4>\n\n\n\n<p>Create the&nbsp;<code>admin</code>&nbsp;folder under&nbsp;<code>/src/app</code>&nbsp;folder</p>\n\n\n\n<p>Under the&nbsp;<code>/src/app/admin</code>&nbsp;folder create the&nbsp;<strong>admin.module.ts</strong>&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \nimport { NgModule } from '@angular/core';\nimport { AdminRoutingModule } from './admin.routing.module';\nimport { UserComponent,RightsComponent,DashboardComponent, AdminComponent } from './pages';\n \n@NgModule({\n  declarations: &#91;UserComponent,RightsComponent,DashboardComponent,AdminComponent],\n  imports: &#91;\n    AdminRoutingModule,\n  ],\n  providers: &#91;],\n})\nexport class AdminModule { }</code></pre>\n\n\n\n<p><strong>/app/src/admin/admin.routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n \nimport { UserComponent , RightsComponent ,DashboardComponent, AdminComponent } from './pages';\n \nconst routes: Routes = &#91;\n    {   path: 'admin', component: AdminComponent,\n        children :&#91;\n            { path: 'dashboard', component: DashboardComponent},\n            { path: 'user', component: UserComponent},\n            { path: 'rights', component: RightsComponent},\n        ]\n    },\n];\n \n@NgModule({\n  imports: &#91;RouterModule.forChild(routes)],\n  exports: &#91;RouterModule]\n})\nexport class AdminRoutingModule { }\n </code></pre>\n\n\n\n<p><code>AdminModule</code>&nbsp;has four pages. A&nbsp;<code>admin</code>&nbsp;page is the root page. You can create it under the&nbsp;<code>pages</code>&nbsp;folder.</p>\n\n\n\n<p><strong>/app/src/admin/pages/admin.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component} from '@angular/core';\n \n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: &#91;'./admin.component.css']\n})\nexport class AdminComponent  {\n}\n </code></pre>\n\n\n\n<p><strong>/app/src/admin/pages/admin.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n  &lt;li>&lt;a routerLink=\"dashboard\">dashboard&lt;/a>&lt;/li>\n  &lt;li>&lt;a routerLink=\"user\">User&lt;/a>&lt;/li>\n  &lt;li>&lt;a routerLink=\"rights\">Rights&lt;/a>&lt;/li>\n&lt;/ul>\n&lt;router-outlet>&lt;/router-outlet></code></pre>\n\n\n\n<p>The admin page has three pages under it.&nbsp;dashboard,&nbsp;rights&nbsp;&amp;&nbsp;user. Hence create a subfolder for all these under the&nbsp;<code>pages</code>&nbsp;folder.</p>\n\n\n\n<p><strong>/app/src/admin/pages/dashboard/dashboard.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  import { Component } from '@angular/core';\n \n  @Component({\n    template: `&lt;h1>Dashboard Component&lt;/h1>`,\n  })\n  export class DashboardComponent {\n    title = '';\n  }\n </code></pre>\n\n\n\n<p><strong>/app/src/admin/pages/rights/rights.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n  template: '&lt;h1>Rights Component&lt;/h1>',\n})\nexport class RightsComponent {\n  title = '';\n}</code></pre>\n\n\n\n<p><strong>/app/src/admin/pages/user/user.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n  template: '&lt;h1>User Component&lt;/h1>',\n})\nexport class UserComponent {\n  title = '';\n}</code></pre>\n\n\n\n<p><strong>/app/src/admin/pages/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './dashboard/dashboard.component';\nexport * from './rights/rights.component';\nexport * from './user/user.component';\nexport * from './admin.component';</code></pre>\n\n\n\n<p><strong>/app/src/admin/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './pages';\nexport * from './github.module';</code></pre>\n\n\n\n<h4>Github Module</h4>\n\n\n\n<p>The&nbsp;<code>GithubModule</code>&nbsp;retrieves the list of repos from the GitHub repository for a given user. The module is created under the folder&nbsp;<code>github</code>. The components is created under the the&nbsp;<code>pages</code>&nbsp;folder.</p>\n\n\n\n<p><strong>/app/src/github/pages/list/repo-list.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\n \nimport { GitHubService } from '../../../core';\nimport { repos} from '../../../core';\n \n@Component({\n    templateUrl: './repo-list.component.html',\n})\nexport class RepoListComponent\n{\n    userName: string =\"angular\"\n    repos: repos&#91;];\n \n    loading: boolean=false;\n    errorMessage;\n \n    constructor(private githubService: GitHubService) {\n    }\n \n    public getRepos() {\n        this.loading=true;\n        this.errorMessage=\"\";\n        this.githubService.getRepos(this.userName)\n            .subscribe((response) => {this.repos=response;},\n            (error) => {this.errorMessage=error; this.loading=false; },\n            () => {this.loading=false;})\n    }\n}</code></pre>\n\n\n\n<p><strong>/app/src/github/pages/list/repo-list.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \n&lt;h1 class=\"heading\">&lt;strong>HTTP &lt;/strong>Demo&lt;/h1>\n \n&lt;div class=\"form-group\">\n    &lt;label for=\"userName\">GitHub User Name&lt;/label>\n    &lt;input type=\"text\" class=\"form-control\" name=\"userName\" &#91;(ngModel)]=\"userName\">\n&lt;/div>\n \n&lt;div class=\"form-group\">\n    &lt;button type=\"button\" (click)=\"getRepos()\">Get Repos&lt;/button>\n&lt;/div>\n \n&lt;div *ngIf=\"loading\">loading...&lt;/div>\n \n&lt;div *ngIf=\"errorMessage\" class=\"alert alert-warning\">\n    &lt;strong>Warning!&lt;/strong> {{errorMessage}}\n&lt;/div>\n \n&lt;div class='table-responsive'>\n    &lt;table class='table'>\n    &lt;thead>\n    &lt;tr>\n        &lt;th>ID&lt;/th>\n        &lt;th>Name&lt;/th>\n        &lt;th>HTML Url&lt;/th>\n        &lt;th>description&lt;/th>\n    &lt;/tr>\n&lt;/thead>\n&lt;tbody>\n    &lt;tr *ngFor=\"let repo of repos;\">\n        &lt;td>{{repo.id}}&lt;/td>\n        &lt;td>{{repo.name}}&lt;/td>\n        &lt;td>{{repo.html_url}}&lt;/td>\n        &lt;td>{{repo.description}}&lt;/td>\n    &lt;/tr>\n&lt;/tbody>\n&lt;/table>\n&lt;/div>\n </code></pre>\n\n\n\n<p><strong>/app/src/github/pages/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './repolist/repo-list.component'; </code></pre>\n\n\n\n<p><strong>/app/src/github/github-routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { RepoListComponent } from './pages';\n \nconst routes: Routes = &#91;\n  {   path: 'github',  component: RepoListComponent,\n        children :&#91;\n          { path: 'list', component: RepoListComponent},\n        ]\n  }\n];\n \n@NgModule({\n  imports: &#91;RouterModule.forChild(routes)],\n  exports: &#91;RouterModule]\n})\nexport class GithubRoutingModule {}</code></pre>\n\n\n\n<p><strong>/app/src/github/github.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\nimport { GithubRoutingModule } from './github-routing.module';\n \nimport { RepoListComponent } from './pages';\n \nimport { SharedModule } from '../shared';\n \n@NgModule({\n  imports: &#91;\n    GithubRoutingModule,SharedModule\n  ],\n  providers: &#91;\n  ],\n  declarations: &#91;RepoListComponent]\n})\nexport class GithubModule { }\n \n </code></pre>\n\n\n\n<p><strong>/app/src/github/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './pages';\nexport * from './github.module';\n </code></pre>\n\n\n\n<h4>Home Module</h4>\n\n\n\n<p>This module contains three components,&nbsp;<code>HomeComponent</code>,&nbsp;<code>ContactUsComponent</code>&nbsp;and&nbsp;<code>AboutUsComponent</code></p>\n\n\n\n<p><strong>src/app/home/pages/about-us.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n    template: `Anout Us`,\n})\nexport class AboutUsComponent\n{\n}</code></pre>\n\n\n\n<p><strong>src/app/home/pages/contact-us.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n    template: `Contact Us`,\n})\nexport class ContactUsComponent\n{\n}</code></pre>\n\n\n\n<p><strong>src/app/home/pages/home.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n    template: `&lt;h1> Welcome To Module Demo&lt;/h1>`,\n})\nexport class HomeComponent\n{\n}</code></pre>\n\n\n\n<p><strong>src/app/home/pages/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './aboutus/about-us.component';\nexport * from './contactus/contact-us.component';\nexport * from './home/home.component';</code></pre>\n\n\n\n<p><strong>src/app/home/home-routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AboutUsComponent,ContactUsComponent,HomeComponent } from './pages';\n \nconst routes: Routes = &#91;\n  { path: '',   component: HomeComponent},\n  { path: 'contactus', component: ContactUsComponent},\n  { path: 'aboutus', component: AboutUsComponent},\n];\n \n \n@NgModule({\n  imports: &#91;RouterModule.forChild(routes)],\n  exports: &#91;RouterModule]\n})\nexport class HomeRoutingModule {}</code></pre>\n\n\n\n<p><strong>src/app/home/home.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\nimport { HomeRoutingModule } from './home-routing.module';\n \nimport { AboutUsComponent,ContactUsComponent,HomeComponent } from './pages';\n \nimport { SharedModule } from '../shared';\n \n@NgModule({\n  imports: &#91;\n    HomeRoutingModule,SharedModule\n  ],\n  providers: &#91;\n  ],\n  declarations: &#91;AboutUsComponent,ContactUsComponent,HomeComponent]\n})\nexport class HomeModule { \n \n}\n </code></pre>\n\n\n\n<p><strong>src/app/home/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './pages';\nexport * from './home.module';\n</code></pre>\n\n\n\n<h3>Core Module</h3>\n\n\n\n<p>The&nbsp;<code>CoreModule</code>&nbsp;contains application-wide singleton services. In this example app, it contains a&nbsp;<code>GitHubService</code>&nbsp;which retrieves the list of repositories of a given user.The&nbsp;<code>CoreModule</code>&nbsp;is created under the folder&nbsp;<code>src/app/core</code>.</p>\n\n\n\n<p>All services are created under the&nbsp;<code>src/app/core/services</code>&nbsp;folder. You may also create subfolder for each service.</p>\n\n\n\n<p><strong>src/app/core/models/repos.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class repos {\n    id: string;\n    name: string;\n    html_url: string;\n    description: string;\n}</code></pre>\n\n\n\n<p><strong>src/app/core/models/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './repos'; </code></pre>\n\n\n\n<p><strong>src/app/core/models/services/github.service.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n \nimport { repos} from '../models';\n \n@Injectable()\nexport class GitHubService { \n   baseURL:string=\"https://api.github.com/\";\n \n   constructor(private http:HttpClient){\n   }\n \n   getRepos(userName:string): Observable&lt;repos&#91;]> {\n        return this.http.get&lt;repos&#91;]>(this.baseURL + 'users/' + userName + '/repos')\n   }\n}\n </code></pre>\n\n\n\n<p><strong>src/app/core/models/services/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> export * from './github.service'; </code></pre>\n\n\n\n<p><strong>src/app/core/models/core.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport {  GitHubService  } from './services/github.service';\n \n@NgModule({\n  imports: &#91;\n  ],\n  providers: &#91;\n    GitHubService\n  ],\n  declarations: &#91;]\n})\nexport class CoreModule { \n \n  constructor(@Optional() @SkipSelf() core:CoreModule ){\n    if (core) {\n        throw new Error(\"You should import core module only in the root module\")\n    }\n  }\n}</code></pre>\n\n\n\n<p><strong>src/app/core/models/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './core.module';\nexport * from './services';\nexport * from './models';</code></pre>\n\n\n\n<h3>Shared Module</h3>\n\n\n\n<p>Our Shared Module contains&nbsp;<code>HeaderComponent</code>&nbsp;&amp;&nbsp;<code>FooterComponent</code>, which is used by the root module.</p>\n\n\n\n<p><strong>/src/app/shared/layout/footer/footer.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>(c) All Rights Reserved&lt;/p> </code></pre>\n\n\n\n<p><strong>/src/app/shared/layout/footer/footer.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\n \n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html'\n})\nexport class FooterComponent {\n}\n </code></pre>\n\n\n\n<p><strong>/src/app/shared/layout/footer/header.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n    &lt;li>\n      &lt;a class=\"navbar-brand\" routerLink=\"/\">home&lt;/a>\n    &lt;/li>\n    &lt;li>\n      &lt;a class=\"navbar-brand\" routerLink=\"/github/list\">GitHub&lt;/a>\n    &lt;/li>\n    &lt;li>\n      &lt;a class=\"navbar-brand\" routerLink=\"/admin\">Admin&lt;/a>\n    &lt;/li>\n    &lt;li>\n      &lt;a class=\"navbar-brand\" routerLink=\"/aboutus\">About&lt;/a>\n  &lt;/li>\n  &lt;li>\n    &lt;a class=\"navbar-brand\" routerLink=\"/contactus\">Contact&lt;/a>\n  &lt;/li>\n  \n  &lt;/ul></code></pre>\n\n\n\n<p><strong>/src/app/layout/header/header.component.css</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    background-color: #333333;\n}\n \nli {\n    float: left;\n}\n \nli a {\n    display: block;\n    color: white;\n    text-align: center;\n    padding: 16px;\n    text-decoration: none;\n}\n \nli a:hover {\n    background-color: #111111;\n}</code></pre>\n\n\n\n<p><strong>/src/app/layout/header/header.component.css</strong></p>\n\n\n\n<p><strong>/src/app/layout/header/header.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \nimport { Component, OnInit } from '@angular/core';\n \n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: &#91;'./header.component.css']\n})\nexport class HeaderComponent {\n}</code></pre>\n\n\n\n<p><strong>/src/app/layout/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './footer/footer.component';\nexport * from './header/header.component';</code></pre>\n\n\n\n<p><strong>/src/app/shared/shared.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from '@angular/router';\nimport { HeaderComponent, FooterComponent } from './layout';\n \n \n@NgModule({\n  imports: &#91;\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule\n  ],\n  declarations: &#91; HeaderComponent,FooterComponent ],\n  exports: &#91;\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    RouterModule,\n    HeaderComponent,FooterComponent\n  ]\n})\nexport class SharedModule {\n}</code></pre>\n\n\n\n<p><strong>/src/app/shared/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './shared.module';\nexport * from './layout';</code></pre>\n\n\n\n<h2>Final Folder Structure</h2>\n\n\n\n<p>The following list shows the final structure of our application. You can change/fine-tune them as per the requirement of your project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \nâ”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ app\nâ”‚   â”‚   â”œâ”€â”€ admin \nâ”‚   â”‚   â”‚   â”œâ”€â”€ directives\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pages\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ dashboard\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ dashboard.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ rights\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ rights.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ user\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ user.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ admin.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ admin.component.html\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ admin.component.css\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pipes\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ admin.routing.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”œâ”€â”€ core\nâ”‚   â”‚   â”‚   â”œâ”€â”€ models\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ repos.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ services\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ github.service.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ core.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”œâ”€â”€ github\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pages\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ repolist\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ repolist.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ repolist.component.html\nâ”‚   â”‚   â”‚   â”œâ”€â”€ github.routing.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ github.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”œâ”€â”€ home\nâ”‚   â”‚   â”‚   â”œâ”€â”€ pages\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ aboutus\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ about-us.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ contactus\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ contact-us.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ home\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ home-us.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ home-routing.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ home.module.ts\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”‚   â”œâ”€â”€ shared\nâ”‚   â”‚   â”‚   â”œâ”€â”€ layout\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ footer.component.html\nâ”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header.component.ts\nâ”‚   â”‚   â”‚   â”‚   â”‚   â”œâ”€â”€ header.component.html\nâ”‚   â”‚   â”‚   â”œâ”€â”€ index.ts\nâ”‚   â”œâ”€â”€ app-routing.module.ts  \nâ”‚   â”œâ”€â”€ app-wildcard-routing.module.ts\nâ”‚   â”œâ”€â”€ app.component.css\nâ”‚   â”œâ”€â”€ app.component.html\nâ”‚   â”œâ”€â”€ app.component.spec.ts\nâ”‚   â”œâ”€â”€ app.component.ts\nâ”‚   â”œâ”€â”€ app.module.ts\nâ”‚   â”œâ”€â”€ not-found.component.ts</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Folder for each Angular Module The Angular uses the concept of&nbsp;Angular Modules&nbsp;to group together the related features. This gives us a nice starting point to organize the folder structure. Each Module should get&nbsp;its own folder named after the Module Name. The Angular does not make any distinction between the Modules. but based on how we [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [135],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3719" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3719"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3719/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3791,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3719/revisions/3791"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3719"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3719"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3719"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3723,
    "date": "2020-12-08T06:30:46",
    "date_gmt": "2020-12-08T06:30:46",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3723" },
    "modified": "2020-12-09T07:46:52",
    "modified_gmt": "2020-12-09T07:46:52",
    "slug": "guide-to-lazy-loading-in-angular",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/guide-to-lazy-loading-in-angular/",
    "title": { "rendered": "Guide to Lazy loading in Angular" },
    "content": {
      "rendered": "\n<h2>Why Lazy load?</h2>\n\n\n\n<p>The Angular apps get bigger in size as we add more and more features. The&nbsp;Angular Modules&nbsp;help us to manage our app by creating separate modules for each new feature. But, as the app gets bigger in size, slower it loads. That is because of angular loads the entire application upfront.</p>\n\n\n\n<p>The slow loading app does not leave a good impression on the user. By Loading only a part of the app (i.e lazy loading), the app appears to run faster to the user. The faster loading app&nbsp;gives you a performance boost and also results in a good user experience.</p>\n\n\n\n<h2>How Lazy loading works</h2>\n\n\n\n<p>In Angular, the Lazy loading works at the module level. i.e. you can lazy load only the Angular Modules. We cannot lazy load the Individual components.</p>\n\n\n\n<p>The Lazy loading works via the&nbsp;Angular Router Module. The&nbsp;<code>loadChildren</code>&nbsp;method of the&nbsp;Angular Router is responsible to load the Modules</p>\n\n\n\n<p>We define the modules which we want to lazy load, when we define the routes.&nbsp;Starting from the Angular 8, we have a new syntax for lazy loading.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> {path: \"admin\", loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule)}, </code></pre>\n\n\n\n<p>The&nbsp;<code>admin</code>&nbsp;is the&nbsp;<code>path</code>&nbsp;is the URL path segment to the&nbsp;<code>AdminModule</code>. The&nbsp;<code>loadChildren</code>&nbsp;is where we configure the Lazy Loading.</p>\n\n\n\n<h3><code>loadChildren</code></h3>\n\n\n\n<p>We need to provide call back function to&nbsp;<code>loadChildren</code>&nbsp;argument. The call back must load the&nbsp;<code>AdminModule</code>. We use the dynamic import syntax using the&nbsp;<code>import</code>&nbsp;method. The&nbsp;<code>import</code>&nbsp;method loads the module from the path, which we provide as the argument to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> import('./admin/admin.module').then(m => m.AdminModule) </code></pre>\n\n\n\n<p>When the user navigates to the&nbsp;<code>admin</code>&nbsp;URL or to any of its child routes like&nbsp;<code>admin/dashboard</code>, the router will fetch&nbsp;the&nbsp;<code>AdminModule</code>&nbsp;and loads the routes and components of the&nbsp;<code>AdminModule</code></p>\n\n\n\n<p>The lazy loaded module loads only for the first visit of the URL, it will not load when we revisit that URL again.</p>\n\n\n\n<p>When we define an&nbsp;<code>AdminModule</code>&nbsp;to lazy loaded, the angular creates a separate bundle for the entire module.</p>\n\n\n\n<p>If you are using Angular 7 or lower versions, then use the following syntax<br><br>The&nbsp;<code>loadChildren</code>&nbsp;accepts the value as string. The string is split into two sections separated by&nbsp;<code>#</code>.The first part is the&nbsp;<em>full path</em>&nbsp;to the module file (without the ts extension). In the example above&nbsp;<code>./admin/admin.module</code>&nbsp;points to&nbsp;<code>admin.module.ts</code>&nbsp;file. The second part is the export class name of the Module. i.e&nbsp;<code>AdminModule</code><br><br><code>{path: \"admin\", loadChildren:'./admin/admin.module#AdminModule'},</code></p>\n\n\n\n<h2>Angular Lazy Loading Example</h2>\n\n\n\n<p>Let us build a simple app. The app will have two modules. One is&nbsp;<code>SharedModule</code>&nbsp;which we load eagerly. The other module is&nbsp;<code>AdminModule</code>. First, we load the&nbsp;<code>AdminModule</code>&nbsp;eagerly and later we we update it to use the Lazy Loading.</p>\n\n\n\n<h3>Admin Module</h3>\n\n\n\n<p>The&nbsp;<code>AdminModule</code>&nbsp;contains three components&nbsp;<code>DashboardComponent</code>,&nbsp;<code>RightsComponent</code>;<code>UserComponent</code>. The Module contains, three routes defined as children of&nbsp;<code>Admin</code>&nbsp;Route defined in the&nbsp;<code>AdminRoutingModule</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>{  path: 'admin',\r\n        children :&#91;\r\n            { path: 'dashboard', component: DashboardComponent},\r\n            { path: 'user', component: UserComponent},\r\n            { path: 'rights', component: RightsComponent},\r\n        ]\r\n    },\r\n </code></pre>\n\n\n\n<p>The above routes are registered using the&nbsp;<code>forChild</code>&nbsp;method()</p>\n\n\n\n<p>The Complete source code of&nbsp;<code>AdminModule</code>&nbsp;is as below</p>\n\n\n\n<p><strong>src/app/admin/pages/dashboard/dashboard.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component } from '@angular/core';\r\n \r\n  @Component({\r\n    template: `&lt;h1>Dashboard Component&lt;/h1>`,\r\n  })\r\n  export class DashboardComponent {\r\n    title = '';\r\n  }</code></pre>\n\n\n\n<p><strong>src/app/admin/pages/rights/rights.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n  template: '&lt;h1>Rights Component&lt;/h1>',\r\n})\r\nexport class RightsComponent {\r\n  title = '';\r\n}</code></pre>\n\n\n\n<p><strong>src/app/admin/pages/user/user.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n  template: '&lt;h1>User Component&lt;/h1>',\r\n})\r\nexport class UserComponent {\r\n  title = '';\r\n}</code></pre>\n\n\n\n<p><strong>src/app/admin/pages/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> export * from './dashboard/dashboard.component';\r\nexport * from './rights/rights.component';\r\nexport * from './user/user.component';\r\n </code></pre>\n\n\n\n<p><strong>src/app/admin/admin.routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { UserComponent , RightsComponent ,DashboardComponent } from './pages';\r\n \r\nconst routes: Routes = &#91;\r\n    {  path: 'admin',\r\n        children :&#91;\r\n            { path: 'dashboard', component: DashboardComponent},\r\n            { path: 'user', component: UserComponent},\r\n            { path: 'rights', component: RightsComponent},\r\n        ]\r\n    },\r\n];\r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forChild(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AdminRoutingModule { }</code></pre>\n\n\n\n<p><strong>src/app/admin/admin.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\n \r\nimport { AdminRoutingModule } from './admin.routing.module';\r\nimport { UserComponent,RightsComponent,DashboardComponent } from './pages';\r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;UserComponent,RightsComponent,DashboardComponent],\r\n  imports: &#91;\r\n    AdminRoutingModule,\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class AdminModule { }</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> export * from './admin.module';\r\nexport * from './pages';</code></pre>\n\n\n\n<h3>Shared Module</h3>\n\n\n\n<p>The&nbsp;<code>SharedModule</code>&nbsp;contains&nbsp;<code>HeaderComponent</code>&nbsp;&amp;&nbsp;<code>FooterComponent</code>. The&nbsp;<code>HeaderComponent</code>&nbsp;contains the navigation menu.&nbsp;</p>\n\n\n\n<p><strong>src/app/shared/layout/footer/footer.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html'\r\n})\r\nexport class FooterComponent {\r\n}\r\n  </code></pre>\n\n\n\n<p><strong>src/app/shared/layout/footer/footer.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> &lt;p>\n(c) All Rights Reserved\n&lt;/p> </code></pre>\n\n\n\n<p><strong>src/app/shared/layout/footer/footer.component.html</strong></p>\n\n\n\n<p><strong>src/app/shared/layout/header/header.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component, OnInit } from '@angular/core';\r\n \r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: &#91;'./header.component.css']\r\n})\r\nexport class HeaderComponent {\r\n}\r\n </code></pre>\n\n\n\n<p><strong>src/app/shared/layout/footer/footer.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n&lt;ul>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"\">home&lt;/a>\r\n    &lt;/li>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/admin/dashboard\">Dashboard&lt;/a>\r\n    &lt;/li>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/admin/rights\">rights&lt;/a>\r\n  &lt;/li>\r\n  &lt;li>\r\n    &lt;a class=\"navbar-brand\" routerLink=\"/admin/user\">user&lt;/a>\r\n  &lt;/li>\r\n&lt;/ul></code></pre>\n\n\n\n<p><strong>src/app/shared/layout/header/header.component.css</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>ul {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    background-color: #333333;\r\n}\r\n \r\nli {\r\n    float: left;\r\n}\r\n \r\nli a {\r\n    display: block;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 16px;\r\n    text-decoration: none;\r\n}\r\n \r\nli a:hover {\r\n    background-color: #111111;\r\n}</code></pre>\n\n\n\n<p><strong>src/app/shared/layout/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './footer/footer.component';\r\nexport * from './header/header.component';</code></pre>\n\n\n\n<p><strong>src/app/shared/shared.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HeaderComponent, FooterComponent } from './layout';\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    RouterModule\r\n  ],\r\n  declarations: &#91; HeaderComponent,FooterComponent ],\r\n  exports: &#91;\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    RouterModule,\r\n    HeaderComponent,FooterComponent\r\n  ]\r\n})\r\nexport class SharedModule {\r\n}</code></pre>\n\n\n\n<p><strong>src/app/shared/index.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>export * from './shared.module';export * from './layout'; </code></pre>\n\n\n\n<h3>Root Module</h3>\n\n\n\n<p>The Root Module uses the&nbsp;<code>forRoot</code>&nbsp;method to register the routes. Right now it does not contain any routes. It also imports the&nbsp;<code>AdminModule</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\nimport { HeaderComponent, FooterComponent } from './shared';\r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Module Demo';\r\n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;app-header>&lt;/app-header>\r\n \r\n&lt;h1>Lazy loaded module Demo&lt;/h1>\r\n \r\n&lt;router-outlet>&lt;/router-outlet>\r\n&lt;app-footer>&lt;/app-footer></code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nconst routes: Routes = &#91;\r\n];\r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forRoot(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { }</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\n \r\nimport { AppComponent } from './app.component';\r\nimport { SharedModule} from './shared';\r\nimport { AdminModule} from './admin';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent, \r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    AdminModule\r\n  ],\r\n  providers: &#91;],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }\r\n </code></pre>\n\n\n\n<p>Test the app by running it.</p>\n\n\n\n<p>When you run the&nbsp;<code>ng Serve</code>&nbsp;command, you will see that it generates the five JavaScript files ( called chunks)&nbsp;<code>main.js</code>,&nbsp;<code>polyfills.js</code>,&nbsp;<code>runtime.js</code>,&nbsp;<code>styles.js</code>,&nbsp;<code>vendor.js</code>. As you add more and more features those are added to the&nbsp;<code>main.js</code>&nbsp;file</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/12/Angular-bundles-created-by-Angular-CLI-before-lazy-loading.jpg\" alt=\"The Chunks generated by Angular CLI\" class=\"wp-image-10565\"/></figure>\n\n\n\n<p>Ctrl + Shift + I to open the chrome developer console and and open the network tab. Run the&nbsp;app and you will see that all the chunks are loaded upfront</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/12/Angular-LazyLoading-Modules-Part-A.gif\" alt=\"Eagerly loading Angular Modules Example\" class=\"wp-image-10563\"/></figure>\n\n\n\n<h2>Lazy loading the AdminModule</h2>\n\n\n\n<p>To Lazy Load&nbsp;<code>AdminModule</code>, First we need to add the following&nbsp;<code>route</code>&nbsp;in the&nbsp;<code>AppRoutingModule</code>. This route instructs the router load the&nbsp;<code>AdminModule</code>&nbsp;from the path&nbsp;<code>./admin/admin/module.ts</code>&nbsp;when user navigates to the&nbsp;<code>Admin</code>&nbsp;route</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const routes: Routes = &#91;\r\n  {path: \"admin\", loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule)},\r\n];\r\n </code></pre>\n\n\n\n<p>Next, we need to remove the import of&nbsp;<code>AdminModule</code>&nbsp;from the&nbsp;<code>AppModule</code>. If you did not do it, the module will be loaded eagerly.</p>\n\n\n\n<p>Finally, We need to change the&nbsp;<code>route</code>&nbsp;definition in the&nbsp;<code>AdminRoutingModule</code>. We have removed the parent route admin as it is now moved to the&nbsp;<code>AppRoutingModule</code>. Since this is a lazy-loaded module, the routes we specify will automatically become the child route of&nbsp;<code>admin</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>const routes: Routes = &#91;\r\n    { path: 'dashboard', component: DashboardComponent},\r\n    { path: 'user', component: UserComponent},\r\n    { path: 'rights', component: RightsComponent},\r\n];\r\n </code></pre>\n\n\n\n<p>Now, when you run&nbsp;<code>ng serve</code>&nbsp;command, you will notice the&nbsp;<code>admin-admin.module.js</code>&nbsp;file. The Angular compiler generates a separate js file for each lazy loaded module. This file is loaded only when it is needed by the router.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/12/Angular-bundles-created-by-Angular-CLI-After-lazy-loading.jpg\" alt=\"The Lazy loaded module has its own chunk\" class=\"wp-image-10569\"/></figure>\n\n\n\n<p>You can test it by running the app. You can notice that&nbsp;<code>admin-admin.module.js</code>&nbsp;is not loaded when you run the app. It is loaded only when you click either on Dashboard, user or rights menu.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2018/12/Angular-LazyLoading-Modules-Part-B.gif\" alt=\"Lazy Loading Angular Module example\" class=\"wp-image-10566\"/></figure>\n\n\n\n<h2>Services in Lazy Loaded Module</h2>\n\n\n\n<p>We need to be careful when we create a service or provide a services in Lazy loaded module.</p>\n\n\n\n<p>Any Service defined in the Lazy Loaded Module, will not be load until the user navigates to that module. Hence we cannot use them anywhere else in the application.</p>\n\n\n\n<p>The Angular creates a separate&nbsp;injector&nbsp;for the lazy loaded module. Therefore, any service we provide in the lazy loaded module gets its own instance of the service.</p>\n\n\n\n<p>Hence create a service in the lazy loaded module, only if it is used within the lazy loaded Module. Else consider moving it to the&nbsp;<code>AppModule</code>&nbsp;or a special&nbsp;<code>CoreModule</code>. For More read&nbsp;Folder structure in Angular</p>\n\n\n\n<h2>Dos and Dontâ€™s of Lazy loaded Modules</h2>\n\n\n\n<p>Do not&nbsp;<code>import</code>&nbsp;lazy loaded modules in any other modules. This will make the angular to load the module eagerly and can have unexpected bugs.</p>\n\n\n\n<p>Be careful when you&nbsp;<code>import</code>&nbsp;other modules in the lazy loaded module. If the other modules providers any services, then the lazy loaded module will get a new instance of the service. This may have unintended side effects, if the services are intended to be app-wide singleton</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Why Lazy load? The Angular apps get bigger in size as we add more and more features. The&nbsp;Angular Modules&nbsp;help us to manage our app by creating separate modules for each new feature. But, as the app gets bigger in size, slower it loads. That is because of angular loads the entire application upfront. The slow [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [135],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3723" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3723"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3723/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3865,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3723/revisions/3865"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3723"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3723"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3723"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3725,
    "date": "2020-12-08T06:36:02",
    "date_gmt": "2020-12-08T06:36:02",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3725" },
    "modified": "2020-12-09T07:50:59",
    "modified_gmt": "2020-12-09T07:50:59",
    "slug": "angular-preloading-strategy",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-preloading-strategy/",
    "title": { "rendered": "Angular Preloading Strategy" },
    "content": {
      "rendered": "\n<h2>What is Angular Preloading Strategy ?</h2>\n\n\n\n<p><em>Preloading in Angular means loading the Lazy loaded Modules in the background asynchronously, while user is interacting with the app. This will help boost up the loading time of the app</em></p>\n\n\n\n<p>The Angular apps are modular and allows us build apps in chunks of modules. We can load these modules lazily, when the user navigates to a route. We need to mark the modules to be lazy loaded using the&nbsp;<code>loadChildren</code>&nbsp;property of the router.</p>\n\n\n\n<p>By Lazy loading the modules, we can reduce the initial download size of the app, and thus making app load quickly. This is very useful in case of big apps. But when user navigates to a lazy loaded part of the app, the angular will have to download the module from the server, which means that user will have to wait for the download to finish.</p>\n\n\n\n<p>By Preloading the lazy loaded module, the user do not have to wait for the module to be downloaded as the module is already downloaded in the background.</p>\n\n\n\n<h2>How to Enable Preloading</h2>\n\n\n\n<p>To make use of Preloading, first we need to enable lazy loading of the Modules. Mark the modules with the&nbsp;<code>loadChildren</code>, when you define routes as shown below. The angular will lazy load those modules.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const routes: Routes = &#91;\r\n  {path: \"admin\", loadChildren:'./admin/admin.module#AdminModule'},\r\n];</code></pre>\n\n\n\n<p>To make use of Preloading, first we need to enable lazy loading of the Modules. Mark the modules with the&nbsp;<code>loadChildren</code>, when you define routes as shown below. The angular will lazy load those modules.</p>\n\n\n\n<p>And then, you can enable preloading by using the&nbsp;<code>preloadingStrategy: PreloadAllModules</code>, while registering the routes using the&nbsp;<code>forRoot</code>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> RouterModule.forRoot(routes, {preloadingStrategy: PreloadAllModules}) </code></pre>\n\n\n\n<h2 id=\"Preloading\">Preloading Strategies</h2>\n\n\n\n<p>The Angular provides two built in strategies out of the box. one is&nbsp;<code>PreloadAllModules</code>&nbsp;and other one is&nbsp;<code>NoPreloading</code></p>\n\n\n\n<h3>NoPreloading</h3>\n\n\n\n<p>This will disables all the preloading. This is default behavior i.e. if you don not specify the&nbsp;<code>preloadingStrategy</code>, then the angular assumes you do not want preloading</p>\n\n\n\n<pre class=\"wp-block-code\"><code> RouterModule.forRoot(routes,   {      preloadingStrategy: NoPreloading   } </code></pre>\n\n\n\n<h3>PreloadAllModules</h3>\n\n\n\n<p>This strategy will preload all the lazy loaded modules.&nbsp;</p>\n\n\n\n<pre class=\"wp-block-code\"><code> RouterModule.forRoot(routes,   {      preloadingStrategy: PreloadAllModules   }) </code></pre>\n\n\n\n<h2>Custom preloading strategy</h2>\n\n\n\n<p>With&nbsp;<code>PreloadAllModules</code>&nbsp;all the modules are preloaded, which may actually create a bottleneck if the application has large no of modules to be loaded.</p>\n\n\n\n<p>The better way strategy would be</p>\n\n\n\n<ol><li>Eagerly Load the modules required at startup. For Example authentication module, core module, shared module etc</li><li>Preload all frequently used modules, may be after some delay</li><li>Lazy load remaining modules</li></ol>\n\n\n\n<p>To selectively preload a module, we need to make use of custom preloading strategy.</p>\n\n\n\n<p>First create a class, which implements the built in&nbsp;<code>PreloadingStrategy</code>&nbsp;class</p>\n\n\n\n<p>The class must implement the method&nbsp;<code>preload()</code>. In this method, we determine whether to preload the module or not. The method signature is as follows</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nabstract preload(route: Route, fn: () => Observable&lt;any>): Observable&lt;any>\r\n \r\nParameters\r\n route Route \r\n fn () => Observable \r\n \r\nReturns\r\nObservable&lt;any></code></pre>\n\n\n\n<p>The first parameter is the active&nbsp;<code>Route</code>. We can use this to extract the information about the&nbsp;<code>route</code>, which is being is loaded.</p>\n\n\n\n<p>The second parameter is<strong>&nbsp;Observable function</strong>, which we need to return if we want to preload this module. We can return&nbsp;<strong>Observable of null</strong>, if we do not wish to preload the module.</p>\n\n\n\n<p>The following is a simple example of the preload method, which checks if the route has&nbsp;<code>preload</code>&nbsp;data defined. If defined it will return the&nbsp;<code>load</code>&nbsp;parameter, which will preload the module. If not then&nbsp;<code>of(null)</code>&nbsp;is returned indicating that the preload is not required</p>\n\n\n\n<pre class=\"wp-block-code\"><code> preload(route: Route, load: () => Observable&lt;any>): Observable&lt;any> {\r\n    \r\n    if (route.data &amp;&amp; route.data&#91;'preload']) {\r\n      console.log('preload called');\r\n      return load();\r\n   } else {\r\n      console.log('no preload');\r\n      return of(null);\r\n    }\r\n  }\r\n </code></pre>\n\n\n\n<h2>Example of Custom preloading strategy</h2>\n\n\n\n<p>In a real application, you may set a delay before preloading the module. You can also set different delay for different routes also.</p>\n\n\n\n<p>Consider the following two routes. We have added&nbsp;<code>data</code>&nbsp;to the&nbsp;<code>route</code>. The both the routes have different delays.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> const routes: Routes = &#91;\r\n  {path: \"admin\", loadChildren:'./admin/admin.module#AdminModule',data: { preload: true, delay:5000 }},\r\n  {path: \"test\", loadChildren:'./test/test.module#TestModule',data: { preload: true, delay:10000 }},\r\n];\r\n </code></pre>\n\n\n\n<p>The following is the&nbsp;<code>CustomPreloadingStrategy</code>&nbsp;class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, timer  } from 'rxjs';\r\nimport { flatMap } from 'rxjs/operators'\r\n \r\nimport { PreloadingStrategy, Route } from '@angular/router';\r\n \r\n@Injectable()\r\nexport class CustomPreloadingStrategy implements PreloadingStrategy {\r\n \r\n    preload(route: Route, loadMe: () => Observable&lt;any>): Observable&lt;any> {\r\n    \r\n    if (route.data &amp;&amp; route.data&#91;'preload']) {\r\n      var delay:number=route.data&#91;'delay']\r\n      console.log('preload called on '+route.path+' delay is '+delay);\r\n      return timer(delay).pipe(\r\n        flatMap( _ => { \r\n          console.log(\"Loading now \"+ route.path);\r\n          return loadMe() ;\r\n        }));\r\n    } else {\r\n      console.log('no preload for the path '+ route.path);\r\n      return of(null);\r\n    }\r\n  }\r\n \r\n} </code></pre>\n\n\n\n<p>First, our class implements the&nbsp;<code>PreloadingStrategy</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Injectable()\r\nexport class CustomPreloadingStrategy implements PreloadingStrategy {</code></pre>\n\n\n\n<p>The&nbsp;<code>preload</code>&nbsp;method, which takes two arguments&nbsp;<code>route</code>&nbsp;and an observable and returns an observable</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  preload(route: Route, loadMe: () => Observable&lt;any>): Observable&lt;any> { </code></pre>\n\n\n\n<p>Next, we check the route data. If the&nbsp;<code>preload</code>&nbsp;is true, then we check for&nbsp;<code>delay</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n if (route.data &amp;&amp; route.data&#91;'preload']) {\r\n      var delay:number=route.data&#91;'delay']\r\n      console.log('preload called on '+route.path+' delay is '+delay);</code></pre>\n\n\n\n<p>Next, we return the&nbsp;<code>loadMe()</code>&nbsp;after the specified&nbsp;<code>delay</code>&nbsp;using the&nbsp;<code>timer</code>. Before that we write to console the path being loaded.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> return timer(delay).pipe(\r\n        flatMap( _ => { \r\n          console.log(\"Loading now \"+ route.path);\r\n          return loadMe() ;\r\n        }));</code></pre>\n\n\n\n<p>And if not&nbsp;<code>route.data</code>&nbsp;is defined or&nbsp;<code>preload</code>&nbsp;is false, we return the observable of null&nbsp;<code>of(null)</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\n    } else {\r\n      console.log('no preload for the path '+ route.path);\r\n      return of(null);\r\n    }</code></pre>\n\n\n\n<p>Finally, we need to provide it in the&nbsp;<code>AppModule</code>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\n \r\nimport { AppComponent } from './app.component';\r\nimport { CustomPreloadingStrategy } from './custom-preloading-strategy.service';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent, \r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: &#91;CustomPreloadingStrategy],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>The following image shows how after the&nbsp;<code>delay</code>&nbsp;<strong>admin &amp; test modules</strong>&nbsp;are loaded.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/02/Lazy-Loading-in-Angular-Example.gif\" alt=\"\" class=\"wp-image-11634\"/></figure>\n\n\n\n<p>You can also verify it from the Network tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/02/Angular-Modules-are-Lazy-Loaded-using-Preloading-Strategy.gif\" alt=\"\" class=\"wp-image-11635\"/></figure>\n\n\n\n<h2>Complete Source Code</h2>\n\n\n\n<p><strong>app-routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CustomPreloadingStrategy } from './custom-preloading-strategy.service';\r\n \r\n \r\nconst routes: Routes = &#91;\r\n  {path: \"admin\", loadChildren:'./admin/admin.module#AdminModule',data: { preload: true, delay:5000 }},\r\n  {path: \"test\", loadChildren:'./test/test.module#TestModule',data: { preload: true, delay:10000 }},\r\n];\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forRoot(routes, { preloadingStrategy: CustomPreloadingStrategy})],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { }</code></pre>\n\n\n\n<p><strong>app.component.css</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  \r\nul {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    background-color: #333333;\r\n}\r\n \r\nli {\r\n    float: left;\r\n}\r\n \r\nli a {\r\n    display: block;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 16px;\r\n    text-decoration: none;\r\n}\r\n \r\nli a:hover {\r\n    background-color: #111111;\r\n}</code></pre>\n\n\n\n<p><strong>app.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"\">home&lt;/a>\r\n    &lt;/li>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/admin/dashboard\">Admin&lt;/a>\r\n    &lt;/li>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/test\">Test&lt;/a>\r\n  &lt;/li>\r\n  \r\n  &lt;/ul>\r\n \r\n&lt;h1>Lazy loaded module Demo&lt;/h1>\r\n \r\n&lt;router-outlet>&lt;/router-outlet></code></pre>\n\n\n\n<p><strong>app.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\nimport { Component } from '@angular/core';\r\n \r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Module Demo';\r\n}</code></pre>\n\n\n\n<p><strong>app.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\n \r\nimport { AppComponent } from './app.component';\r\nimport { CustomPreloadingStrategy } from './custom-preloading-strategy.service';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent, \r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: &#91;CustomPreloadingStrategy],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p><strong>custom-preloading-strategy.service.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Injectable } from '@angular/core';\r\nimport { Observable, of, timer  } from 'rxjs';\r\nimport { flatMap } from 'rxjs/operators'\r\n \r\nimport { PreloadingStrategy, Route } from '@angular/router';\r\n \r\n \r\n@Injectable()\r\nexport class CustomPreloadingStrategy implements PreloadingStrategy {\r\n \r\n    preload(route: Route, loadMe: () => Observable&lt;any>): Observable&lt;any> {\r\n    \r\n    if (route.data &amp;&amp; route.data&#91;'preload']) {\r\n      var delay:number=route.data&#91;'delay']\r\n      console.log('preload called on '+route.path+' with a delay of '+delay);\r\n      return timer(delay).pipe(\r\n        flatMap( _ => { \r\n          console.log(\"Loading now \"+ route.path+' module');\r\n          return loadMe() ;\r\n        }));\r\n    } else {\r\n      console.log('no preload for the path '+ route.path);\r\n      return of(null);\r\n    }\r\n  }\r\n </code></pre>\n\n\n\n<p><strong>admin/admin.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\n \r\nimport { AdminRoutingModule } from './admin.routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;DashboardComponent],\r\n  imports: &#91;\r\n    AdminRoutingModule,\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class AdminModule { }\r\n </code></pre>\n\n\n\n<p><strong>admin/admin.routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { DashboardComponent } from './dashboard.component';\r\n \r\n \r\n \r\nconst routes: Routes = &#91;\r\n    { path: 'dashboard', component: DashboardComponent},\r\n    { path: '', redirectTo:'dashboard'}\r\n];\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forChild(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AdminRoutingModule { }\r\n </code></pre>\n\n\n\n<p><strong>admin/dashboard.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n  import { Component } from '@angular/core';\r\n \r\n  @Component({\r\n    template: `&lt;h1>Dashboard Component&lt;/h1>`,\r\n  })\r\n  export class DashboardComponent {\r\n    title = '';\r\n  }</code></pre>\n\n\n\n<p><strong>test/test.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\n \r\nimport { TestRoutingModule } from './test.routing.module';\r\nimport { TestComponent } from './test.component';\r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;TestComponent],\r\n  imports: &#91;\r\n    TestRoutingModule,\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class TestModule { }</code></pre>\n\n\n\n<p><strong>test/test.routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { TestComponent  } from './test.component';\r\n \r\n \r\nconst routes: Routes = &#91;\r\n    { path: 'list', component: TestComponent},\r\n    { path: '', redirectTo:'list'},\r\n];\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forChild(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class TestRoutingModule { }</code></pre>\n\n\n\n<p><strong>test/test.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> import { Component } from '@angular/core';\r\n \r\n  @Component({\r\n    template: `&lt;h1>Test Component&lt;/h1>`,\r\n  })\r\n  export class TestComponent {\r\n    title = '';\r\n  }</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Angular Preloading Strategy ? Preloading in Angular means loading the Lazy loaded Modules in the background asynchronously, while user is interacting with the app. This will help boost up the loading time of the app The Angular apps are modular and allows us build apps in chunks of modules. We can load these [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [135],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3725" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3725"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3725/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3866,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3725/revisions/3866"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3725"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3725"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3725"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3727,
    "date": "2020-12-08T06:39:39",
    "date_gmt": "2020-12-08T06:39:39",
    "guid": { "rendered": "http://angular.foobrdigital.com/?p=3727" },
    "modified": "2020-12-09T07:53:13",
    "modified_gmt": "2020-12-09T07:53:13",
    "slug": "angular-canload-guard-example",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/angular-canload-guard-example/",
    "title": { "rendered": "Angular CanLoad Guard Example" },
    "content": {
      "rendered": "\n<h2>CanLoad Guard</h2>\n\n\n\n<p>The&nbsp;<code>CanLoad</code>&nbsp;Guard prevents the loading of the&nbsp;Lazy Loaded Module. We generally use this guard when we do not want to unauthorized user to navigate to any of the routes of the module and also stop then even see the source code of the module.</p>\n\n\n\n<p>The Angular provides&nbsp;<code>canActivate</code>&nbsp;Guard, which prevents unauthorized user from accessing the route. But it does not stop the module from being downloaded. The user can use the chrome developer console to see the source code. The&nbsp;<code>CanLoad</code>&nbsp;Guard prevents the module from being downloaded.</p>\n\n\n\n<h2>How to use CanLoad Guard</h2>\n\n\n\n<p>First, we need to create a&nbsp;Angular Service, which implements the&nbsp;<code>CanLoad</code>&nbsp;Interface</p>\n\n\n\n<p>The service must implement the&nbsp;<code>canLoad</code>&nbsp;method. This method must return either true or false. The Angular evaluates the&nbsp;<code>canLoad</code>&nbsp;and loads the lazy loaded module only if it returns true.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Injectable()\r\nexport class AuthGuardService implements CanLoad {\r\n  constructor(private router: Router) {\r\n  }\r\n \r\n  canLoad(route: Route): boolean {\r\n    \r\n    //determine whether you want to load the module\r\n    //return true or false\r\n \r\n    return true; \r\n  }\r\n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>@NgModule({\r\n  declarations: &#91;\r\n    AppComponent, \r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: &#91;AuthGuardService],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>Finally, we need to add the guards to the lazy loaded routes as shown below. Note that you can create more than one CanLoad guard, each guard runs in the order added.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> {path: \"admin\", loadChildren:'./admin/admin.module#AdminModule', canLoad:&#91;AuthGuardService]}, </code></pre>\n\n\n\n<h2 id=\"mce_6\">CanLoad Guard Example</h2>\n\n\n\n<p>Create a new angular app with two modules&nbsp;<code>AdminModule</code>&nbsp;&amp;&nbsp;<code>TestModule</code>. Let us build a&nbsp;<code>CanLoad</code>&nbsp;Guard, which stops&nbsp;<code>AdminModule</code>&nbsp;from loading.</p>\n\n\n\n<p>First, we build a&nbsp;<code>AuthGuardService</code>&nbsp;which Implements the&nbsp;<code>CanLoad</code>&nbsp;Interface as shown below.</p>\n\n\n\n<p>In the&nbsp;<code>canLoad</code>&nbsp;method check if the&nbsp;<code>route</code>&nbsp;is&nbsp;<strong>admin</strong>&nbsp;and return false else return true. In real life application, you can use&nbsp;dependency injection&nbsp;to inject the authentication service and check to see if the user is authorized or not.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Injectable }       from '@angular/core';\r\nimport { CanLoad, Route, Router } from '@angular/router';\r\n \r\n@Injectable()\r\nexport class AuthGuardService implements CanLoad {\r\n  \r\n  constructor(private router: Router) {\r\n  }\r\n \r\n  canLoad(route: Route): boolean {\r\n    \r\n    let url: string = route.path;\r\n    console.log('Url:'+ url);\r\n    if (url=='admin') {\r\n      alert('You are not authorised to visit this page');\r\n      return false;\r\n    }  \r\n    return true; \r\n  }\r\n} </code></pre>\n\n\n\n<p>Next, in the route definition include&nbsp;<code>AuthGuardService</code>&nbsp;under&nbsp;<code>canLoad</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const routes: Routes = &#91;\r\n  {path: \"admin\", loadChildren:'./admin/admin.module#AdminModule', canLoad:&#91;AuthGuardService]},\r\n  {path: \"test\", loadChildren:'./test/test.module#TestModule', canLoad:&#91;AuthGuardService]},\r\n];</code></pre>\n\n\n\n<p>Finally, register the service in the&nbsp;<code>AppModule</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\n \r\nimport { AppComponent } from './app.component';\r\nimport { AuthGuardService } from './auth-gaurd.service';\r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent, \r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: &#91;AuthGuardService],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p>Run the Application. Open the developer console and you will see that only test module is downloaded and not admin module.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tektutorialshub.com/wp-content/uploads/2019/02/Angular-CanLoad-Guard-Example.gif\" alt=\"\" class=\"wp-image-11753\"/></figure>\n\n\n\n<h2>Complete Example</h2>\n\n\n\n<p><strong>app.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n \r\nimport { AppRoutingModule } from './app-routing.module';\r\n \r\nimport { AppComponent } from './app.component';\r\nimport { AuthGuardService } from './auth-gaurd.service';\r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;\r\n    AppComponent, \r\n  ],\r\n  imports: &#91;\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: &#91;AuthGuardService],\r\n  bootstrap: &#91;AppComponent]\r\n})\r\nexport class AppModule { }</code></pre>\n\n\n\n<p><strong>app.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nimport { Component } from '@angular/core';\r\n \r\n \r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: &#91;'./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'Module Demo';\r\n}\r\n </code></pre>\n\n\n\n<p><strong>app.component,html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> \r\n&lt;ul>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"\">home&lt;/a>\r\n    &lt;/li>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/admin/dashboard\">Admin&lt;/a>\r\n    &lt;/li>\r\n    &lt;li>\r\n      &lt;a class=\"navbar-brand\" routerLink=\"/test\">Test&lt;/a>\r\n  &lt;/li>\r\n  \r\n  &lt;/ul>\r\n \r\n&lt;h1>Angular CanLoad Guard Example&lt;/h1>\r\n \r\n&lt;router-outlet>&lt;/router-outlet>\r\n </code></pre>\n\n\n\n<p><strong>app.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>ul {\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n    overflow: hidden;\r\n    background-color: #333333;\r\n}\r\n \r\nli {\r\n    float: left;\r\n}\r\n \r\nli a {\r\n    display: block;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 16px;\r\n    text-decoration: none;\r\n}\r\n \r\nli a:hover {\r\n    background-color: #111111;\r\n}\r\n </code></pre>\n\n\n\n<p><strong>app.routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AuthGuardService } from './auth-gaurd.service';\r\n \r\n \r\nconst routes: Routes = &#91;\r\n  {path: \"admin\", loadChildren:'./admin/admin.module#AdminModule', canLoad:&#91;AuthGuardService]},\r\n  {path: \"test\", loadChildren:'./test/test.module#TestModule', canLoad:&#91;AuthGuardService]},\r\n];\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forRoot(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AppRoutingModule { }</code></pre>\n\n\n\n<p><strong>auth-gaurd.service.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\r\nimport { Injectable }       from '@angular/core';\r\nimport { CanLoad, Route, Router } from '@angular/router';\r\n \r\n \r\n@Injectable()\r\nexport class AuthGuardService implements CanLoad {\r\n  constructor(private router: Router) {\r\n  }\r\n \r\n \r\n  canLoad(route: Route): boolean {\r\n    \r\n    let url: string = route.path;\r\n    console.log('Url:'+ url);\r\n    if (url=='admin') {\r\n      alert('You are not authorised to visit this page');\r\n      return false;\r\n    }\r\n \r\n    //det\r\n    \r\n    return true; \r\n  }\r\n  \r\n} </code></pre>\n\n\n\n<p><strong>admin/admin.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\n \r\nimport { AdminRoutingModule } from './admin.routing.module';\r\nimport { DashboardComponent } from './dashboard.component';\r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;DashboardComponent],\r\n  imports: &#91;\r\n    AdminRoutingModule,\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class AdminModule { }</code></pre>\n\n\n\n<p><strong>admin/admin.routing,module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { DashboardComponent } from './dashboard.component';\r\n \r\n \r\n \r\nconst routes: Routes = &#91;\r\n    { path: 'dashboard', component: DashboardComponent},\r\n    { path: '', redirectTo:'dashboard'}\r\n];\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forChild(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class AdminRoutingModule { }</code></pre>\n\n\n\n<p><strong>admin/dashboard.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n  @Component({\r\n    template: `&lt;h1>Dashboard Component&lt;/h1>`,\r\n  })\r\n  export class DashboardComponent {\r\n    title = '';\r\n  }</code></pre>\n\n\n\n<p><strong>test/test.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\n \r\nimport { TestRoutingModule } from './test.routing.module';\r\nimport { TestComponent } from './test.component';\r\n \r\n \r\n@NgModule({\r\n  declarations: &#91;TestComponent],\r\n  imports: &#91;\r\n    TestRoutingModule,\r\n  ],\r\n  providers: &#91;],\r\n})\r\nexport class TestModule { }</code></pre>\n\n\n\n<p><strong>test/test.routing.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n \r\nimport { TestComponent  } from './test.component';\r\n \r\n \r\nconst routes: Routes = &#91;\r\n    { path: 'list', component: TestComponent},\r\n    { path: '', redirectTo:'list'},\r\n];\r\n \r\n \r\n@NgModule({\r\n  imports: &#91;RouterModule.forChild(routes)],\r\n  exports: &#91;RouterModule]\r\n})\r\nexport class TestRoutingModule { }\r\n </code></pre>\n\n\n\n<p><strong>test/test.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';\r\n \r\n  @Component({\r\n    template: `&lt;h1>Test Component&lt;/h1>`,\r\n  })\r\n  export class TestComponent {\r\n    title = '';\r\n  }</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>CanLoad Guard The&nbsp;CanLoad&nbsp;Guard prevents the loading of the&nbsp;Lazy Loaded Module. We generally use this guard when we do not want to unauthorized user to navigate to any of the routes of the module and also stop then even see the source code of the module. The Angular provides&nbsp;canActivate&nbsp;Guard, which prevents unauthorized user from accessing the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [135],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3727" }
      ],
      "collection": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=3727"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3727/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3867,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/3727/revisions/3867"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=3727"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=3727"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=3727"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
