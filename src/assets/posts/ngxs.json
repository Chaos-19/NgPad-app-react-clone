[{"id":5073,"date":"2022-12-04T05:56:58","date_gmt":"2022-12-04T05:56:58","guid":{"rendered":"https://angular.foobrdigital.com/?p=5073"},"modified":"2022-12-04T05:56:58","modified_gmt":"2022-12-04T05:56:58","slug":"introduction-27","status":"publish","type":"post","link":"https://angular.foobrdigital.com/introduction-27/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>State management is a key component when building applications. There are various approaches by which we can manage the state in an Angular application, each with its pros and cons.</p>\n\n\n\n<p>This blog post will focus on using NGXS as our state management solution. We will look at how you can use NGXS to manage your application&#8217;s state by building a Recipe Admin Dashboard application. We will also learn how to secure the application using Auth0 and how it works with NGXS.</p>\n","protected":false},"excerpt":{"rendered":"<p>State management is a key component when building applications. There are various approaches by which we can manage the state in an Angular application, each with its pros and cons. This blog post will focus on using NGXS as our state management solution. We will look at how you can use NGXS to manage your [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5073"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5073"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5073/revisions"}],"predecessor-version":[{"id":5074,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5073/revisions/5074"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5073"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5073"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5073"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5075,"date":"2022-12-04T05:57:24","date_gmt":"2022-12-04T05:57:24","guid":{"rendered":"https://angular.foobrdigital.com/?p=5075"},"modified":"2022-12-04T05:57:24","modified_gmt":"2022-12-04T05:57:24","slug":"what-is-ngxs","status":"publish","type":"post","link":"https://angular.foobrdigital.com/what-is-ngxs/","title":{"rendered":"What Is NGXS"},"content":{"rendered":"\n<p><a href=\"https://www.ngxs.io/\" target=\"_blank\" rel=\"noreferrer noopener\"><strong>NGXS</strong></a>&nbsp;is a state management pattern and library for Angular. NGXS acts as a single source of truth for your application&#8217;s state &#8211; providing simple rules for predictable state mutations.</p>\n\n\n\n<p>NGXS is modeled after the CQRS pattern &#8211; a pattern implemented in state management libraries such as NgRx and Redux. NGXS combines this pattern with TypeScript&#8217;s classes and decorators to create a state management library with minimal boilerplate.</p>\n","protected":false},"excerpt":{"rendered":"<p>NGXS&nbsp;is a state management pattern and library for Angular. NGXS acts as a single source of truth for your application&#8217;s state &#8211; providing simple rules for predictable state mutations. NGXS is modeled after the CQRS pattern &#8211; a pattern implemented in state management libraries such as NgRx and Redux. NGXS combines this pattern with TypeScript&#8217;s [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5075"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5075"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5075/revisions"}],"predecessor-version":[{"id":5076,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5075/revisions/5076"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5075"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5075"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5075"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5077,"date":"2022-12-04T05:57:48","date_gmt":"2022-12-04T05:57:48","guid":{"rendered":"https://angular.foobrdigital.com/?p=5077"},"modified":"2022-12-04T05:57:48","modified_gmt":"2022-12-04T05:57:48","slug":"how-does-ngxs-work","status":"publish","type":"post","link":"https://angular.foobrdigital.com/how-does-ngxs-work/","title":{"rendered":"How Does NGXS Work"},"content":{"rendered":"\n<p>NGXS is made up of four main components &#8211; Store, Actions, State, and Select. These components create a unidirectional circular control flow from the component to the store (via Actions) and back to the component (via Selects). The diagram below shows how the control flows in NGXS.</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://images.ctfassets.net/23aumh6u8s0i/1MamGFzTw4qp4N0M1sU7rM/12823d598b1a171b1d0285cbc6650a4a/001_ngxs-how-it-works.png\" alt=\"NGXS State Management Control Flow Diagram\"/></figure>\n\n\n\n<h3 id=\"Store\">Store</h3>\n\n\n\n<p>The&nbsp;<strong>Store</strong>&nbsp;in NGXS is a global state manager that dispatches actions to state containers and provides a way to select data slices out from the global state.</p>\n\n\n\n<h3 id=\"Actions\">Actions</h3>\n\n\n\n<p><strong>Actions</strong>&nbsp;express unique events that happen in our application. Actions are how the application communicates with NGXS&#8217;s Store to tell it what to do.</p>\n\n\n\n<h3 id=\"State\">State</h3>\n\n\n\n<p><strong>States</strong>&nbsp;are classes that define a state container.</p>\n\n\n\n<h3 id=\"Select\">Select</h3>\n\n\n\n<p><strong>Selects</strong>&nbsp;in NGXS are functions that provide the ability to slice a specific portion of the state from the global state container.</p>\n","protected":false},"excerpt":{"rendered":"<p>NGXS is made up of four main components &#8211; Store, Actions, State, and Select. These components create a unidirectional circular control flow from the component to the store (via Actions) and back to the component (via Selects). The diagram below shows how the control flows in NGXS. Store The&nbsp;Store&nbsp;in NGXS is a global state manager [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5077"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5077"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5077/revisions"}],"predecessor-version":[{"id":5078,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5077/revisions/5078"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5077"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5077"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5077"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5079,"date":"2022-12-04T05:58:51","date_gmt":"2022-12-04T05:58:51","guid":{"rendered":"https://angular.foobrdigital.com/?p=5079"},"modified":"2022-12-04T05:58:51","modified_gmt":"2022-12-04T05:58:51","slug":"getting-started-quickly","status":"publish","type":"post","link":"https://angular.foobrdigital.com/getting-started-quickly/","title":{"rendered":"Getting Started Quickly"},"content":{"rendered":"\n<p>I created a demo application with the basic structure and components to help you implement the NGXS-related part.</p>\n\n\n\n<p>Clone the demo app and check out its starter branch:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone -b starter git@github.com:auth0-blog/spa_angular_typescript_dashboard.git</code></pre>\n\n\n\n<p>Once you clone the repo, make&nbsp;<code>spa_angular_typescript_dashboard</code>&nbsp;your current directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd spa_angular_typescript_dashboard</code></pre>\n\n\n\n<p>Install the project&#8217;s dependencies:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm i</code></pre>\n\n\n\n<p>Run the project locally:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm run start</code></pre>\n\n\n\n<p>The starter project contains an admin dashboard with the ability to log in and log out using Auth0&#8217;s SDK. The logged-in user can then view the dashboard and view, add, edit, and delete a menu item depending on the user&#8217;s permissions.</p>\n","protected":false},"excerpt":{"rendered":"<p>I created a demo application with the basic structure and components to help you implement the NGXS-related part. Clone the demo app and check out its starter branch: Once you clone the repo, make&nbsp;spa_angular_typescript_dashboard&nbsp;your current directory: Install the project&#8217;s dependencies: Run the project locally: The starter project contains an admin dashboard with the ability to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5079"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5079"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5079/revisions"}],"predecessor-version":[{"id":5080,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5079/revisions/5080"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5079"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5079"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5079"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5081,"date":"2022-12-04T06:00:20","date_gmt":"2022-12-04T06:00:20","guid":{"rendered":"https://angular.foobrdigital.com/?p=5081"},"modified":"2022-12-04T06:00:20","modified_gmt":"2022-12-04T06:00:20","slug":"devtools","status":"publish","type":"post","link":"https://angular.foobrdigital.com/devtools/","title":{"rendered":"Devtools"},"content":{"rendered":"\n<p>You can use the Redux devtools extension for Chrome or Firefox for debugging store-related operations.</p>\n\n\n\n<p>To use this extension with NGXS, you&#8217;ll need to add NGXS&#8217;s devtools dependency to our project. You can do this using&nbsp;<code>npm</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install @ngxs/devtools-plugin --save-dev</code></pre>\n\n\n\n<p>Import the&nbsp;<code>NgxsReduxDevtoolsPluginModule</code>&nbsp;in our&nbsp;<code>AppModule</code>&nbsp;and configure it based on your project&#8217;s requirements. For this tutorial, you&#8217;ll be using their default configuration. Open&nbsp;<code>app.module.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { AuthHttpInterceptor, AuthModule } from \"@auth0/auth0-angular\";\n\n// ✨ New 👇\nimport { NgxsReduxDevtoolsPluginModule } from \"@ngxs/devtools-plugin\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { NavBarModule } from \"./shared\";\nimport { environment } from \"src/environments/environment\";\n\n@NgModule({\n  imports: &#91;\n    BrowserModule,\n    HttpClientModule,\n    AuthModule.forRoot({\n      ...environment.auth,\n      cacheLocation: \"localstorage\",\n      httpInterceptor: {\n        allowedList: &#91;\n          `${environment.serverUrl}/api/menu/items`,\n          `${environment.serverUrl}/api/menu/items/*`,\n        ],\n      },\n    }),\n    AppRoutingModule,\n    NavBarModule,\n\n    // ✨ New 👇\n    environment.production ? &#91;] : NgxsReduxDevtoolsPluginModule.forRoot(),\n  ],\n  declarations: &#91;AppComponent],\n  bootstrap: &#91;AppComponent],\n  providers: &#91;\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthHttpInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class AppModule {}</code></pre>\n\n\n\n<h3 id=\"Running-the-app-and-turning-on-devtools\">Running the app and turning on devtools</h3>\n\n\n\n<p>After following the steps in this section, you should see an option to activate Redux devtools in your toolbar when you run the app. Once activated, you should see a window with an interface similar to the image below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://images.ctfassets.net/23aumh6u8s0i/5BldaqgcD8fMrBJSwwub07/1e05e1ea78231bcd90108de241d1ce69/002_ngxs-redux-devtools.png\" alt=\"Redux devtools with NGXS\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>You can use the Redux devtools extension for Chrome or Firefox for debugging store-related operations. To use this extension with NGXS, you&#8217;ll need to add NGXS&#8217;s devtools dependency to our project. You can do this using&nbsp;npm. Import the&nbsp;NgxsReduxDevtoolsPluginModule&nbsp;in our&nbsp;AppModule&nbsp;and configure it based on your project&#8217;s requirements. For this tutorial, you&#8217;ll be using their default configuration. Open&nbsp;app.module.ts&nbsp;and add [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5081"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5081"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5081/revisions"}],"predecessor-version":[{"id":5082,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5081/revisions/5082"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5081"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5081"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5081"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5083,"date":"2022-12-04T06:00:42","date_gmt":"2022-12-04T06:00:42","guid":{"rendered":"https://angular.foobrdigital.com/?p=5083"},"modified":"2022-12-04T06:00:42","modified_gmt":"2022-12-04T06:00:42","slug":"install-ngxs","status":"publish","type":"post","link":"https://angular.foobrdigital.com/install-ngxs/","title":{"rendered":"Install NGXS"},"content":{"rendered":"\n<p>You can use&nbsp;<code>npm</code>&nbsp;or&nbsp;<code>yarn</code>&nbsp;to install NGXS&#8217;s dependencies.</p>\n\n\n\n<p>Using&nbsp;<code>npm</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install @ngxs/store --save</code></pre>\n\n\n\n<p>Using&nbsp;<code>yarn</code></p>\n\n\n\n<pre class=\"wp-block-code\"><code>yarn add @ngxs/store</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>You can use&nbsp;npm&nbsp;or&nbsp;yarn&nbsp;to install NGXS&#8217;s dependencies. Using&nbsp;npm Using&nbsp;yarn</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5083"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5083"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5083/revisions"}],"predecessor-version":[{"id":5084,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5083/revisions/5084"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5083"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5083"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5083"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5085,"date":"2022-12-04T06:01:45","date_gmt":"2022-12-04T06:01:45","guid":{"rendered":"https://angular.foobrdigital.com/?p=5085"},"modified":"2022-12-04T06:01:45","modified_gmt":"2022-12-04T06:01:45","slug":"architecture-3","status":"publish","type":"post","link":"https://angular.foobrdigital.com/architecture-3/","title":{"rendered":"Architecture"},"content":{"rendered":"\n<p>The app&#8217;s core is an admin dashboard where the logged-in user can add, edit, and delete a menu item. The logged-in user will perform all the operations or a subset of them depending on their permissions. You will use NGXS to manage the state updates and user/server-related events.</p>\n\n\n\n<p>You will create two Stores for our application:</p>\n\n\n\n<ul>\n<li><em>menus</em>: to manage menu related functionalities (CRUD operations)</li>\n\n\n\n<li><em>user</em>: to manage user-related functionalities such as authentication using Auth0</li>\n</ul>\n\n\n\n<p>You will also split the Store into three files &#8211;&nbsp;<code>.model.ts</code>,&nbsp;<code>.state.ts</code>, and&nbsp;<code>.action.ts</code>&nbsp;to make it easier to follow throughout the tutorial.</p>\n\n\n\n<p>Let&#8217;s first start by creating the following folder structure in our&nbsp;<code>core</code>&nbsp;directory (you will be updating each file as we discuss each section):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>|- src/app/core\n    |- state\n        |- menus\n            |- menus.actions.ts\n            |- menus.model.ts\n            |- menus.state.ts\n            |- index.ts\n        |- user\n            |- user.actions.ts\n            |- user.model.ts\n            |- user.state.ts\n            |- index.ts\n        |- index.ts</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\">\n<p>The starter app uses a&nbsp;<code>BehaviorSubject</code>&nbsp;in&nbsp;<code>menu-state.service.ts</code>&nbsp;to manage its state. This tutorial will walk you through migrating the&nbsp;<code>BehaviorSubject</code>&nbsp;based state management to NGXS.</p>\n</blockquote>\n","protected":false},"excerpt":{"rendered":"<p>The app&#8217;s core is an admin dashboard where the logged-in user can add, edit, and delete a menu item. The logged-in user will perform all the operations or a subset of them depending on their permissions. You will use NGXS to manage the state updates and user/server-related events. You will create two Stores for our [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5085"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5085"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5085/revisions"}],"predecessor-version":[{"id":5086,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5085/revisions/5086"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5085"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5085"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5085"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5087,"date":"2022-12-04T06:02:26","date_gmt":"2022-12-04T06:02:26","guid":{"rendered":"https://angular.foobrdigital.com/?p=5087"},"modified":"2022-12-04T06:02:26","modified_gmt":"2022-12-04T06:02:26","slug":"menus-state-management","status":"publish","type":"post","link":"https://angular.foobrdigital.com/menus-state-management/","title":{"rendered":"Menus State Management"},"content":{"rendered":"\n<h3 id=\"Create-menus-model\">Create menus model</h3>\n\n\n\n<p>Let&#8217;s start with creating the shape of the state object for menus. Open&nbsp;<code>menus.model.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.model.ts\n\nimport { MenuItem } from \"../../models\";\n\nexport interface MenusStateModel {\n  menuItems: MenuItem&#91;];\n}</code></pre>\n\n\n\n<p>The interface&nbsp;<code>MenusStateModel</code>&nbsp;defines the type of object Menu&#8217;s state will have.</p>\n\n\n\n<p>Let&#8217;s also create a barrel export in our&nbsp;<code>menus</code>&nbsp;folder. Create&nbsp;<code>index.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/index.ts\n\nexport * from \"./menus.model\";</code></pre>\n\n\n\n<p>To further simplify our imports. Create another barrel export in the&nbsp;<code>state</code>&nbsp;folder and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/index.ts\n\nexport * from \"./menus\";</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Create menus model Let&#8217;s start with creating the shape of the state object for menus. Open&nbsp;menus.model.ts&nbsp;and add the following code 👇 The interface&nbsp;MenusStateModel&nbsp;defines the type of object Menu&#8217;s state will have. Let&#8217;s also create a barrel export in our&nbsp;menus&nbsp;folder. Create&nbsp;index.ts&nbsp;and add the following code 👇 To further simplify our imports. Create another barrel export in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5087"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5087"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5087/revisions"}],"predecessor-version":[{"id":5088,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5087/revisions/5088"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5087"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5087"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5087"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5089,"date":"2022-12-04T06:03:19","date_gmt":"2022-12-04T06:03:19","guid":{"rendered":"https://angular.foobrdigital.com/?p=5089"},"modified":"2022-12-04T06:03:19","modified_gmt":"2022-12-04T06:03:19","slug":"create-menus-action","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-menus-action/","title":{"rendered":"Create menus action"},"content":{"rendered":"\n<p>Next, you will need to define what Actions you need to handle. We will be following the Good Action Hygiene principle when writing our Actions.</p>\n\n\n\n<p>On a high level, Good Action Hygiene recommends thinking of Actions as events instead of commands. Instead of&nbsp;<code>addMenuItem</code>&nbsp;as the Action, use&nbsp;<code>addMenuItemFormSubmitted</code>. This pattern also encourages dispatching specific Action instead of reusing the same Action and including the source as part of the Action type. The image below shows the anatomy of an Action type.</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://images.ctfassets.net/23aumh6u8s0i/szxzeBUDPSelbpIeBntYH/80215fac23bbaafd968724c7deb44d4f/003_ngxs-good-action-hygiene.png\" alt=\"Anatomy of an Action name\"/></figure>\n\n\n\n<p>Following this pattern makes it easier to debug as you have distinct Actions from each source. This lets you immediately know what event has just taken place and where it came from with a quick look at the devtools.</p>\n\n\n\n<p>Let&#8217;s start with user-initiated Actions. This would include adding a new menu item, updating an existing menu item, and deleting a current menu item. Open&nbsp;<code>menus.actions.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.actions.ts\n\nimport { BaseMenuItem, MenuItem } from \"../../models\";\n\nexport namespace Menus {\n  export class AddMenuItemFormSubmitted {\n    static readonly type = \"&#91;Add Menu Page] Add Menu Item Form Submitted\";\n    constructor(public payload: { menuItem: BaseMenuItem }) {}\n  }\n\n  export class EditMenuItemFormSubmitted {\n    static readonly type = \"&#91;Edit Menu Page] Edit Menu Item Form Submitted\";\n    constructor(public payload: { menuItem: MenuItem }) {}\n  }\n\n  export class DeleteMenuItemInitiated {\n    static readonly type = \"&#91;Delete Menu Page] Delete Menu Item Initiated\";\n    constructor(public payload: { menuId: string }) {}\n  }\n}</code></pre>\n\n\n\n<p>You will need to fetch the menus from our API as the app load. Let&#8217;s add an&nbsp;<code>appLoaded</code>&nbsp;Action that will be dispatched when the app loads. Open&nbsp;<code>menus.actions.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.actions.ts\n\nimport { BaseMenuItem, MenuItem } from \"../../models\";\n\nexport namespace Menus {\n  // ✨ New 👇\n  export class AppLoaded {\n    static readonly type = \"&#91;App] App Loaded\";\n  }\n\n  export class AddMenuItemFormSubmitted {\n    static readonly type = \"&#91;Add Menu Page] Add Menu Item Form Submitted\";\n    constructor(public payload: { menuItem: BaseMenuItem }) {}\n  }\n\n  export class EditMenuItemFormSubmitted {\n    static readonly type = \"&#91;Edit Menu Page] Edit Menu Item Form Submitted\";\n    constructor(public payload: { menuItem: MenuItem }) {}\n  }\n\n  export class DeleteMenuItemInitiated {\n    static readonly type = \"&#91;Delete Menu Page] Delete Menu Item Initiated\";\n    constructor(public payload: { menuId: string }) {}\n  }\n}</code></pre>\n\n\n\n<p>Let&#8217;s continue to other API-related Actions. Since calling an API could either succeed or fail, let&#8217;s add success and fail handlers for each API-related Action.</p>\n\n\n\n<blockquote class=\"wp-block-quote\">\n<p>You could make success and error handling in several different ways. What I&#8217;m showing you is just one way you could do this.</p>\n</blockquote>\n\n\n\n<p>Open&nbsp;<code>menus.actions.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.actions.ts\n\nimport { BaseMenuItem, MenuItem } from \"../../models\";\n\nexport namespace Menus {\n  export class AppLoaded {\n    static readonly type = \"&#91;App] App Loaded\";\n  }\n\n  // ✨ New 👇\n  export class FetchMenuSuccess {\n    static readonly type = \"&#91;Menu API] Fetch Menu Success\";\n    constructor(public payload: { menuItems: MenuItem&#91;] }) {}\n  }\n\n  // ✨ New 👇\n  export class FetchMenuFailed {\n    static readonly type = \"&#91;Menu API] Fetch Menu Failed\";\n    constructor(public payload: { error: any }) {}\n  }\n\n  export class AddMenuItemFormSubmitted {\n    static readonly type = \"&#91;Add Menu Page] Add Menu Item Form Submitted\";\n    constructor(public payload: { menuItem: BaseMenuItem }) {}\n  }\n\n  // ✨ New 👇\n  export class AddMenuItemSuccess {\n    static readonly type = \"&#91;Menu API] Add Menu Item Success\";\n  }\n\n  // ✨ New 👇\n  export class AddMenuItemFailed {\n    static readonly type = \"&#91;Menu API] Add Menu Item Failed\";\n    constructor(public payload: { error: any }) {}\n  }\n\n  export class EditMenuItemFormSubmitted {\n    static readonly type = \"&#91;Edit Menu Page] Edit Menu Item Form Submitted\";\n    constructor(public payload: { menuItem: MenuItem }) {}\n  }\n\n  // ✨ New 👇\n  export class EditMenuItemSuccess {\n    static readonly type = \"&#91;Menu API] Edit Menu Item Success\";\n    constructor(public payload: { menuItem: MenuItem }) {}\n  }\n\n  // ✨ New 👇\n  export class EditMenuItemFailed {\n    static readonly type = \"&#91;Menu API] Edit Menu Item Failed\";\n    constructor(public payload: { error: any }) {}\n  }\n\n  export class DeleteMenuItemInitiated {\n    static readonly type = \"&#91;Delete Menu Page] Delete Menu Item Initiated\";\n    constructor(public payload: { menuId: string }) {}\n  }\n\n  // ✨ New 👇\n  export class DeleteMenuItemSuccess {\n    static readonly type = \"&#91;Menu API] Delete Menu Item Success\";\n    constructor(public payload: { menuId: string }) {}\n  }\n\n  // ✨ New 👇\n  export class DeleteMenuItemFailed {\n    static readonly type = \"&#91;Menu API] Delete Menu Item Failed\";\n    constructor(public payload: { error: any }) {}\n  }\n}</code></pre>\n\n\n\n<p>Let&#8217;s also add this to the barrel export. Open&nbsp;<code>index.ts</code>&nbsp;and add the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/index.ts\n\nexport * from \"./menus.model\";\n\n// ✨ New 👇\nexport * from \"./menus.actions\";</code></pre>\n\n\n\n<h4 id=\"Update-application-to-use-menu-actions\">Update application to use menu actions</h4>\n\n\n\n<p>You will now update the current implementation in our application with these Actions for any state-related operations. You do this by injecting NGXS&#8217;s&nbsp;<code>Store</code>&nbsp;in the component and calling its&nbsp;<code>dispatch</code>&nbsp;function with the Action you want to execute.</p>\n\n\n\n<p>Starting with&nbsp;<code>appLoaded</code>, as this is called, when the application first loads. Since we will be making a call to the API that requires the auth token from the Auth0 SDK, let&#8217;s wait for the Angular app to complete any pending process during initialization before dispatching this action. We can do this by listening to the&nbsp;<code>ApplicationRef</code>&#8216;s&nbsp;<code>isStable</code>&nbsp;property and dispatching the&nbsp;<code>AppLoaded</code>&nbsp;action when the observable returns its first&nbsp;<code>true</code>. Open&nbsp;<code>app.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/app.component.ts\n\nimport { ApplicationRef, Component } from \"@angular/core\";\n\n// ✨ New 👇\nimport { Store } from \"@ngxs/store\";\nimport { first } from \"rxjs/operators\";\nimport { Menus } from \"./core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n  styleUrls: &#91;\"./app.component.scss\"],\n})\nexport class AppComponent {\n  title = \"spa-angular-typescript-dashboard\";\n\n  // ✨ New 👇\n  constructor(private store: Store, private appRef: ApplicationRef) {\n    this.appRef.isStable.pipe(first((stable) =&gt; stable)).subscribe(() =&gt; {\n      this.store.dispatch(new Menus.AppLoaded());\n    });\n  }\n}</code></pre>\n\n\n\n<p>Moving on to adding a menu item. Replace the&nbsp;<code>menuStateService</code>&#8216;s&nbsp;<code>addMenuItem</code>&nbsp;function with dispatching the&nbsp;<code>AddMenuItemFormSubmitted</code>&nbsp;action. Open&nbsp;<code>add-item.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/add-item/add-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\n\n// ✨ New 👇\nimport { BaseMenuItem, Menus } from \"src/app/core\";\nimport { Store } from \"@ngxs/store\";\n\nconst MenuItemPlaceholder: BaseMenuItem = {\n  name: \"\",\n  price: 0,\n  tagline: \"\",\n  description: \"\",\n  image: \"\",\n  calories: 0,\n  category: \"\",\n};\n\n@Component({\n  selector: \"app-add-item\",\n  templateUrl: \"./add-item.component.html\",\n  styles: &#91;\n    `\n      :host {\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class AddItemComponent {\n  menuItem = MenuItemPlaceholder;\n  constructor(\n    private location: Location,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  submit(menu: BaseMenuItem): void {\n    // ✨ New 👇\n    this.store.dispatch(\n      new Menus.AddMenuItemFormSubmitted({\n        menuItem: menu,\n      })\n    );\n  }\n\n  cancel(): void {\n    this.location.back();\n  }\n}</code></pre>\n\n\n\n<p>Deleting a menu item. Replace the&nbsp;<code>menuStateService</code>&#8216;s&nbsp;<code>deleteMenuItem</code>&nbsp;function with dispatching the&nbsp;<code>DeleteMenuItemInitiated</code>&nbsp;action. Open&nbsp;<code>delete-item.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/delete-item/delete-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { map, switchMap } from \"rxjs/operators\";\n\n// ✨ New 👇\nimport { Menus, MenusStateService } from \"src/app/core\";\nimport { Store } from \"@ngxs/store\";\n\n@Component({\n  selector: \"app-delete-item\",\n  templateUrl: \"./delete-item.component.html\",\n  styleUrls: &#91;\"./delete-item.component.scss\"],\n})\nexport class DeleteItemComponent {\n  menuItemId$ = this.activatedRoute.params.pipe(map((params) =&gt; params.id));\n  menuItem$ = this.menuItemId$.pipe(\n    switchMap((id) =&gt; this.menusStateService.selectMenuItem$(id))\n  );\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private location: Location,\n    private router: Router,\n    private menusStateService: MenusStateService,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  deleteMenuItem(id: string): void {\n    // ✨ New 👇\n    this.store.dispatch(\n      new Menus.DeleteMenuItemInitiated({\n        menuId: id,\n      })\n    );\n  }\n\n  cancel(): void {\n    this.back();\n  }\n\n  back(): void {\n    this.location.back();\n  }\n\n  navigateHome(): void {\n    this.router.navigate(&#91;\"/menu\"]);\n  }\n}</code></pre>\n\n\n\n<p>Editing an existing menu item. Replace the&nbsp;<code>menuStateService</code>&#8216;s&nbsp;<code>editMenuItem</code>&nbsp;function with dispatching the&nbsp;<code>EditMenuItemFormSubmitted</code>&nbsp;action. Open&nbsp;<code>edit-item.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/edit-item/edit-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, switchMap, tap } from \"rxjs/operators\";\n\n// ✨ New 👇\nimport { BaseMenuItem, Menus, MenusStateService } from \"src/app/core\";\nimport { Store } from \"@ngxs/store\";\n\n@Component({\n  selector: \"app-edit-item\",\n  templateUrl: \"./edit-item.component.html\",\n  styles: &#91;\n    `\n      :host {\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class EditItemComponent {\n  menuItemId$ = this.activatedRoute.params.pipe(map((params) =&gt; params.id));\n  menuItem$ = this.menuItemId$.pipe(\n    tap((id) =&gt; (this.id = id)),\n    switchMap((id) =&gt;\n      this.menusStateService.selectMenuItem$(id).pipe(\n        map((menuItem) =&gt; {\n          return &lt;BaseMenuItem&gt;{\n            ...menuItem,\n            price:\n              menuItem &amp;&amp; menuItem.price &gt; 0\n                ? (menuItem.price / 100).toFixed(2)\n                : 0,\n          };\n        })\n      )\n    )\n  );\n\n  private id: number | undefined;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private location: Location,\n    private menusStateService: MenusStateService,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  cancel(): void {\n    this.location.back();\n  }\n\n  submit(menu: BaseMenuItem): void {\n    if (!this.id) {\n      return;\n    }\n    // ✨ New 👇\n    this.store.dispatch(\n      new Menus.EditMenuItemFormSubmitted({\n        menuItem: {\n          ...menu,\n          id: this.id.toString(),\n        },\n      })\n    );\n  }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Next, you will need to define what Actions you need to handle. We will be following the Good Action Hygiene principle when writing our Actions. On a high level, Good Action Hygiene recommends thinking of Actions as events instead of commands. Instead of&nbsp;addMenuItem&nbsp;as the Action, use&nbsp;addMenuItemFormSubmitted. This pattern also encourages dispatching specific Action instead of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5089"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5089"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5089/revisions"}],"predecessor-version":[{"id":5090,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5089/revisions/5090"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5089"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5089"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5089"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5091,"date":"2022-12-04T06:04:01","date_gmt":"2022-12-04T06:04:01","guid":{"rendered":"https://angular.foobrdigital.com/?p=5091"},"modified":"2022-12-04T06:04:01","modified_gmt":"2022-12-04T06:04:01","slug":"create-menus-state","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-menus-state/","title":{"rendered":"Create menus state"},"content":{"rendered":"\n<p>Before creating individual selectors for slices of the menu state, let&#8217;s start by creating the boilerplate required to use this feature. NGXS uses an&nbsp;<code>Injectable</code>&nbsp;class with an additional&nbsp;<code>State</code>&nbsp;decorator. Open&nbsp;<code>menus.state.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.state.ts\n\nimport { Injectable } from \"@angular/core\";\nimport { State } from \"@ngxs/store\";\nimport { MenusStateModel } from \"./menus.model\";\n\n@State&lt;MenusStateModel&gt;({\n  name: \"menus\",\n  defaults: {\n    menuItems: &#91;],\n  },\n})\n@Injectable()\nexport class MenusState {}</code></pre>\n\n\n\n<p>You can use NGXS&#8217;s&nbsp;<code>Selector</code>&nbsp;decorator to select slices of the state. For menus, you only have one entry in our object, which is&nbsp;<code>menuItems</code>. Let&#8217;s create a function with NGXS&#8217;s&nbsp;<code>Selector</code>&nbsp;decorator to access the&nbsp;<code>menuItems</code>&nbsp;property. Open&nbsp;<code>menus.state.ts</code>&nbsp;and update it with the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.state.ts\n\nimport { Injectable } from \"@angular/core\";\n\n// ✨ New 👇\nimport { State, Selector } from \"@ngxs/store\";\nimport { MenusStateModel } from \"./menus.model\";\n\n@State&lt;MenusStateModel&gt;({\n  name: \"menus\",\n  defaults: {\n    menuItems: &#91;],\n  },\n})\n@Injectable()\nexport class MenusState {\n  // ✨ New 👇\n  @Selector()\n  static menus(state: MenusStateModel) {\n    return state;\n  }\n\n  // ✨ New 👇\n  @Selector()\n  static menuItems(state: MenusStateModel) {\n    return state.menuItems;\n  }\n}</code></pre>\n\n\n\n<p>For pages like&nbsp;<em>Menu Details</em>,&nbsp;<em>Edit Menu</em>, and&nbsp;<em>Delete Menu</em>, you&#8217;ll need to access a specific menu item from the Store. You can do this by creating a function that accepts the menu id as a parameter and searches through our array of menu items from the&nbsp;<code>menuItems</code>&nbsp;selector. Open&nbsp;<code>menus.state.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.state.ts\n\nimport { Injectable } from \"@angular/core\";\n\n// ✨ New 👇\nimport { State, Selector, createSelector } from \"@ngxs/store\";\nimport { MenusStateModel } from \"./menus.model\";\n\n@State&lt;MenusStateModel&gt;({\n  name: \"menus\",\n  defaults: {\n    menuItems: &#91;],\n  },\n})\n@Injectable()\nexport class MenusState {\n  @Selector()\n  static menus(state: MenusStateModel) {\n    return state;\n  }\n\n  @Selector()\n  static menuItems(state: MenusStateModel) {\n    return state.menuItems;\n  }\n\n  // ✨ New 👇\n  static menuItem(id: string) {\n    return createSelector(&#91;MenusState], (state: MenusStateModel) =&gt; {\n      return state.menuItems.find((menuItem) =&gt; menuItem.id === id);\n    });\n  }\n}</code></pre>\n\n\n\n<p>Let&#8217;s also add the&nbsp;<code>menus.state.ts</code>&nbsp;file to the barrel export. Open&nbsp;<code>index.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/index.ts\n\nexport * from \"./menus.model\";\nexport * from \"./menus.actions\";\n\n// ✨ New 👇\nexport * from \"./menus.state\";</code></pre>\n\n\n\n<h4 id=\"Update-application-to-use-menus-selectors\">Update application to use menus selectors</h4>\n\n\n\n<p>Similar to what you did with Actions, let&#8217;s update the application to get data required by the components using NGXS&#8217;s selectors. You can use selectors by injecting the Store class and calling the&nbsp;<code>select</code>&nbsp;function with the selector names you defined in the previous section.</p>\n\n\n\n<p>Starting with the main dashboard, open&nbsp;<code>menu-items.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/menu-items/menu-items.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { RolesService } from \"src/app/core\";\n\n// ✨ New 👇\nimport { Store } from \"@ngxs/store\";\nimport { MenusState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-menu-items\",\n  templateUrl: \"./menu-items.component.html\",\n  styles: &#91;\n    `\n      :host {\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class MenuItemsComponent {\n  // ✨ New 👇\n  menuItems$ = this.store.select(MenusState.menuItems);\n  isAdmin$ = this.rolesService.isAdmin$;\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private rolesService: RolesService,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  addMenuItem(): void {\n    this.router.navigate(&#91;\"add\"], { relativeTo: this.activatedRoute });\n  }\n}</code></pre>\n\n\n\n<p>Moving on to the&nbsp;<em>Menu Details</em>&nbsp;page. Here, we only need a specific menu&#8217;s data. Instead of using the&nbsp;<code>selectMenuItems</code>, you will use NGXS&#8217;s&nbsp;<code>select</code>&nbsp;function passing in&nbsp;<code>MenusState.menuItem</code>&nbsp;with the menu id from the route parameters. Open&nbsp;<code>menu-item.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/menu-item/menu-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { map, switchMap } from \"rxjs/operators\";\nimport { RolesService } from \"src/app/core\";\n\n// ✨ New 👇\nimport { Store } from \"@ngxs/store\";\nimport { MenusState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-menu-item\",\n  templateUrl: \"./menu-item.component.html\",\n  styleUrls: &#91;\"./menu-item.component.scss\"],\n})\nexport class MenuItemComponent {\n  menuItemId$ = this.activatedRoute.params.pipe(map((params) =&gt; params.id));\n\n  // ✨ New 👇\n  menuItem$ = this.menuItemId$.pipe(\n    switchMap((id) =&gt; this.store.select(MenusState.menuItem(id)))\n  );\n  isAdmin$ = this.rolesService.isAdmin$;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private rolesService: RolesService,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  back(): void {\n    this.location.back();\n  }\n\n  navigateTo(url: string): void {\n    this.router.navigateByUrl(`${this.router.url}/${url}`);\n  }\n}</code></pre>\n\n\n\n<p><em>Delete Menu Item</em>&nbsp;page, open&nbsp;<code>delete-item.component.ts</code>, and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/delete-item/delete-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { map, switchMap } from \"rxjs/operators\";\nimport { Store } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { Menus, MenusState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-delete-item\",\n  templateUrl: \"./delete-item.component.html\",\n  styleUrls: &#91;\"./delete-item.component.scss\"],\n})\nexport class DeleteItemComponent {\n  menuItemId$ = this.activatedRoute.params.pipe(map((params) =&gt; params.id));\n\n  // ✨ New 👇\n  menuItem$ = this.menuItemId$.pipe(\n    switchMap((id) =&gt; this.store.select(MenusState.menuItem(id)))\n  );\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private location: Location,\n    private router: Router,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  deleteMenuItem(id: string): void {\n    this.store.dispatch(\n      new Menus.DeleteMenuItemInitiated({\n        menuId: id,\n      })\n    );\n  }\n\n  cancel(): void {\n    this.back();\n  }\n\n  back(): void {\n    this.location.back();\n  }\n\n  navigateHome(): void {\n    this.router.navigate(&#91;\"/menu\"]);\n  }\n}</code></pre>\n\n\n\n<p>And finally,&nbsp;<em>Edit Menu Item</em>&nbsp;page. Open&nbsp;<code>edit-item.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/edit-item/edit-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, switchMap, tap } from \"rxjs/operators\";\nimport { Store } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { BaseMenuItem, Menus, MenusState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-edit-item\",\n  templateUrl: \"./edit-item.component.html\",\n  styles: &#91;\n    `\n      :host {\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class EditItemComponent {\n  menuItemId$ = this.activatedRoute.params.pipe(map((params) =&gt; params.id));\n\n  // ✨ New 👇\n  menuItem$ = this.menuItemId$.pipe(\n    tap((id) =&gt; (this.id = id)),\n    switchMap((id) =&gt;\n      this.store.select(MenusState.menuItem(id)).pipe(\n        map((menuItem) =&gt; {\n          return &lt;BaseMenuItem&gt;{\n            ...menuItem,\n            price:\n              menuItem &amp;&amp; menuItem.price &gt; 0\n                ? (menuItem.price / 100).toFixed(2)\n                : 0,\n          };\n        })\n      )\n    )\n  );\n\n  private id: number | undefined;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private location: Location,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  cancel(): void {\n    this.location.back();\n  }\n\n  submit(menu: BaseMenuItem): void {\n    if (!this.id) {\n      return;\n    }\n    this.store.dispatch(\n      new Menus.EditMenuItemFormSubmitted({\n        menuItem: {\n          ...menu,\n          id: this.id.toString(),\n        },\n      })\n    );\n  }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Before creating individual selectors for slices of the menu state, let&#8217;s start by creating the boilerplate required to use this feature. NGXS uses an&nbsp;Injectable&nbsp;class with an additional&nbsp;State&nbsp;decorator. Open&nbsp;menus.state.ts&nbsp;and add the following code 👇 You can use NGXS&#8217;s&nbsp;Selector&nbsp;decorator to select slices of the state. For menus, you only have one entry in our object, which is&nbsp;menuItems. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5091"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5091"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5091/revisions"}],"predecessor-version":[{"id":5092,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5091/revisions/5092"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5091"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5091"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5091"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5093,"date":"2022-12-04T06:04:36","date_gmt":"2022-12-04T06:04:36","guid":{"rendered":"https://angular.foobrdigital.com/?p=5093"},"modified":"2022-12-04T06:04:36","modified_gmt":"2022-12-04T06:04:36","slug":"create-menus-action-handlers","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-menus-action-handlers/","title":{"rendered":"Create menus action handlers"},"content":{"rendered":"\n<p>Our states listen to actions via an&nbsp;<code>Action</code>&nbsp;decorator. The action decorator accepts an action class or an array of action classes. When an action that matches the action in the decorator is dispatched, the function attached to the decorator will get executed.</p>\n\n\n\n<p>For the Menus state, action handlers will be used to make an HTTP request to get data from the server or perform other CRUD operations. In addition to the API calls, we will also be using the action handlers to update our state object.</p>\n\n\n\n<p>Let&#8217;s start with a simple action handler that handles fetching the menu items from the API and updating the store with new data. Since this logic needs to be executed when the app loads and a new menu item is added successfully, you will pass in two actions to the action decorator &#8211;&nbsp;<code>Menus.AppLoaded</code>&nbsp;and&nbsp;<code>Menus.AddMenuItemSuccess</code>. You will then return the&nbsp;<code>apiService.getItems</code>&nbsp;function to get the menu items. If it&#8217;s successful, dispatch the&nbsp;<code>FecthMenuSuccess</code>&nbsp;action with the menu items returned from the API, which will update the store with this new data. If unsuccessful, it will jump to the&nbsp;<code>catchError</code>&nbsp;block, which dispatches the&nbsp;<code>FetchMenuFailed</code>&nbsp;action with the error thrown.&nbsp;<code>FetchMenuSuccess</code>&nbsp;will then update the state object with the new menu items returned by the API call.</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://images.ctfassets.net/23aumh6u8s0i/7GUTVHchrTEDs8VV7G6SFn/42b7d0f606302b2eddddf5151e0c366e/004_ngxs-fetch-menu.png\" alt=\"Diagram of how the fetch menu action works\"/></figure>\n\n\n\n<blockquote class=\"wp-block-quote\">\n<p>Tip: add your&nbsp;<code>catchError</code>&nbsp;to the inner observable in your&nbsp;<code>switchMap</code>&nbsp;instead of on the main observable to prevent the action stream from being closed when an error is thrown</p>\n</blockquote>\n\n\n\n<p>Open&nbsp;<code>menus.state.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.state.ts\n\nimport { Injectable } from \"@angular/core\";\nimport { of } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\nimport { MenusStateModel } from \"./menus.model\";\n\n// ✨ New 👇\nimport {\n  State,\n  Action,\n  StateContext,\n  Selector,\n  createSelector,\n} from \"@ngxs/store\";\nimport { Menus } from \"./menus.actions\";\nimport { ApiService } from \"../../services\";\nimport { MenuItem } from \"../../models\";\n\n@State&lt;MenusStateModel&gt;({\n  name: \"menus\",\n  defaults: {\n    menuItems: &#91;],\n  },\n})\n@Injectable()\nexport class MenusState {\n  // ✨ New 👇\n  constructor(private apiService: ApiService) {}\n\n  // ✨ New 👇\n  @Action(&#91;Menus.AppLoaded, Menus.AddMenuItemSuccess])\n  fetchMenu(ctx: StateContext&lt;MenusStateModel&gt;) {\n    return this.apiService.getItems().pipe(\n      map((menuItems: MenuItem&#91;]) =&gt; {\n        return ctx.dispatch(\n          new Menus.FetchMenuSuccess({\n            menuItems: menuItems,\n          })\n        );\n      }),\n      catchError((error) =&gt; {\n        return of(\n          ctx.dispatch(\n            new Menus.FetchMenuFailed({\n              error: error,\n            })\n          )\n        );\n      })\n    );\n  }\n\n  // ✨ New 👇\n  @Action(Menus.FetchMenuSuccess)\n  fetchMenuSuccess(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.FetchMenuSuccess\n  ) {\n    const state = ctx.getState();\n    ctx.setState({\n      ...state,\n      menuItems: action.payload.menuItems,\n    });\n  }\n\n  @Selector()\n  static menus(state: MenusStateModel) {\n    return state;\n  }\n\n  @Selector()\n  static menuItems(state: MenusStateModel) {\n    return state.menuItems;\n  }\n\n  // dynamic selector with arguments\n  static menuItem(id: string) {\n    return createSelector(&#91;MenusState], (state: MenusStateModel) =&gt; {\n      return state.menuItems.find((menuItem) =&gt; menuItem.id === id);\n    });\n  }\n}</code></pre>\n\n\n\n<p>Following the same logic, let&#8217;s create action handlers for&nbsp;<code>AddMenu</code>,&nbsp;<code>EditMenu</code>, and&nbsp;<code>DeleteMenu</code>&nbsp;along with their success handlers to update the state object. Open&nbsp;<code>menus.state.ts</code>&nbsp;and update it with the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/menus/menus.state.ts\n\n// ✨ New 👇\nimport { Injectable, NgZone } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Location } from \"@angular/common\";\n\nimport { of } from \"rxjs\";\nimport { tap, catchError, map } from \"rxjs/operators\";\nimport {\n  State,\n  Action,\n  StateContext,\n  Selector,\n  createSelector,\n} from \"@ngxs/store\";\nimport { MenusStateModel } from \"./menus.model\";\nimport { ApiService } from \"../../services\";\nimport { Menus } from \"./menus.actions\";\nimport { MenuItem } from \"../../models\";\n\n@State&lt;MenusStateModel&gt;({\n  name: \"menus\",\n  defaults: {\n    menuItems: &#91;],\n  },\n})\n@Injectable()\nexport class MenusState {\n  constructor(\n    // ✨ New 👇\n    private location: Location,\n    private zone: NgZone,\n    private router: Router,\n    private apiService: ApiService\n  ) {}\n\n  @Action(&#91;Menus.AppLoaded, Menus.AddMenuItemSuccess])\n  fetchMenu(ctx: StateContext&lt;MenusStateModel&gt;) {\n    return this.apiService.getItems().pipe(\n      map((menuItems: MenuItem&#91;]) =&gt; {\n        return ctx.dispatch(\n          new Menus.FetchMenuSuccess({\n            menuItems: menuItems,\n          })\n        );\n      }),\n      catchError((error) =&gt; {\n        return of(\n          ctx.dispatch(\n            new Menus.FetchMenuFailed({\n              error: error,\n            })\n          )\n        );\n      })\n    );\n  }\n\n  @Action(Menus.FetchMenuSuccess)\n  fetchMenuSuccess(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.FetchMenuSuccess\n  ) {\n    const state = ctx.getState();\n    ctx.setState({\n      ...state,\n      menuItems: action.payload.menuItems,\n    });\n  }\n\n  // ✨ New 👇\n  @Action(Menus.AddMenuItemFormSubmitted)\n  addMenuItem(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.AddMenuItemFormSubmitted\n  ) {\n    return this.apiService.addItem(action.payload.menuItem).pipe(\n      tap(() =&gt; {\n        this.zone.run(() =&gt; {\n          this.router.navigate(&#91;\"/menu\"]);\n        });\n      }),\n      map(() =&gt; {\n        return ctx.dispatch(new Menus.AddMenuItemSuccess());\n      }),\n      catchError((error) =&gt; {\n        return of(ctx.dispatch(new Menus.AddMenuItemFailed({ error: error })));\n      })\n    );\n  }\n\n  // ✨ New 👇\n  @Action(Menus.EditMenuItemFormSubmitted)\n  editMenuItem(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.EditMenuItemFormSubmitted\n  ) {\n    const menuItem = action.payload.menuItem;\n    return this.apiService.updateItem(menuItem).pipe(\n      tap(() =&gt; this.location.back()),\n      map(() =&gt; {\n        return ctx.dispatch(\n          new Menus.EditMenuItemSuccess({\n            menuItem: action.payload.menuItem,\n          })\n        );\n      }),\n      catchError((error) =&gt; {\n        return of(ctx.dispatch(new Menus.EditMenuItemFailed({ error: error })));\n      })\n    );\n  }\n\n  // ✨ New 👇\n  @Action(Menus.EditMenuItemSuccess)\n  editMenuSuccess(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.EditMenuItemSuccess\n  ) {\n    const state = ctx.getState();\n    const menuItem = action.payload.menuItem;\n    const menuItemIndex = state.menuItems.findIndex(\n      (item) =&gt; item.id === menuItem.id\n    );\n    const updatedMenuItems = &#91;...state.menuItems];\n    updatedMenuItems&#91;menuItemIndex] = menuItem;\n    ctx.setState({\n      ...state,\n      menuItems: updatedMenuItems,\n    });\n  }\n\n  // ✨ New 👇\n  @Action(Menus.DeleteMenuItemInitiated)\n  deleteMenuItem(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.DeleteMenuItemInitiated\n  ) {\n    const menuId = action.payload.menuId;\n    return this.apiService.deleteItem(menuId).pipe(\n      tap(() =&gt; {\n        this.zone.run(() =&gt; {\n          this.router.navigate(&#91;\"/menu\"]);\n        });\n      }),\n      map(() =&gt; {\n        return ctx.dispatch(\n          new Menus.DeleteMenuItemSuccess({ menuId: menuId })\n        );\n      }),\n      catchError((error) =&gt; {\n        return of(\n          ctx.dispatch(new Menus.DeleteMenuItemFailed({ error: error }))\n        );\n      })\n    );\n  }\n\n  // ✨ New 👇\n  @Action(Menus.DeleteMenuItemSuccess)\n  deleteMenuSuccess(\n    ctx: StateContext&lt;MenusStateModel&gt;,\n    action: Menus.DeleteMenuItemSuccess\n  ) {\n    const state = ctx.getState();\n    const menuId = action.payload.menuId;\n    const menuItemIndex = state.menuItems.findIndex(\n      (item) =&gt; item.id === menuId\n    );\n    const updatedMenuItems = &#91;...state.menuItems];\n    updatedMenuItems.splice(menuItemIndex, 1);\n    ctx.setState({\n      ...state,\n      menuItems: updatedMenuItems,\n    });\n  }\n\n  @Selector()\n  static menus(state: MenusStateModel) {\n    return state;\n  }\n\n  @Selector()\n  static menuItems(state: MenusStateModel) {\n    return state.menuItems;\n  }\n\n  // dynamic selector with arguments\n  static menuItem(id: string) {\n    return createSelector(&#91;MenusState], (state: MenusStateModel) =&gt; {\n      return state.menuItems.find((menuItem) =&gt; menuItem.id === id);\n    });\n  }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Our states listen to actions via an&nbsp;Action&nbsp;decorator. The action decorator accepts an action class or an array of action classes. When an action that matches the action in the decorator is dispatched, the function attached to the decorator will get executed. For the Menus state, action handlers will be used to make an HTTP request [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5093"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5093"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5093/revisions"}],"predecessor-version":[{"id":5094,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5093/revisions/5094"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5093"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5093"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5093"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5095,"date":"2022-12-04T06:04:54","date_gmt":"2022-12-04T06:04:54","guid":{"rendered":"https://angular.foobrdigital.com/?p=5095"},"modified":"2022-12-04T06:04:54","modified_gmt":"2022-12-04T06:04:54","slug":"configure-ngxss-store-module","status":"publish","type":"post","link":"https://angular.foobrdigital.com/configure-ngxss-store-module/","title":{"rendered":"Configure NGXS&#8217;s store module"},"content":{"rendered":"\n<p>You will then need to initialize NGXS&#8217;s&nbsp;<code>StoreModule</code>&nbsp;passing in all your feature states (in our case, just the&nbsp;<code>MenusState</code>&nbsp;for now). Open&nbsp;<code>app.module.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AuthHttpInterceptor, AuthModule } from \"@auth0/auth0-angular\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { NavBarModule } from \"./shared\";\nimport { environment } from \"src/environments/environment\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { NgxsReduxDevtoolsPluginModule } from \"@ngxs/devtools-plugin\";\n\n// ✨ New 👇\nimport { NgxsModule } from \"@ngxs/store\";\nimport { MenusState } from \"./core\";\n\n@NgModule({\n  imports: &#91;\n    BrowserModule,\n    HttpClientModule,\n    AuthModule.forRoot({\n      ...environment.auth,\n      cacheLocation: \"localstorage\",\n      httpInterceptor: {\n        allowedList: &#91;\n          `${environment.serverUrl}/api/menu/items`,\n          `${environment.serverUrl}/api/menu/items/*`,\n        ],\n      },\n    }),\n    AppRoutingModule,\n    NavBarModule,\n\n    // ✨ New 👇\n    NgxsModule.forRoot(&#91;MenusState], { developmentMode: true }),\n\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n  ],\n  declarations: &#91;AppComponent],\n  bootstrap: &#91;AppComponent],\n  providers: &#91;\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthHttpInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class AppModule {}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>You will then need to initialize NGXS&#8217;s&nbsp;StoreModule&nbsp;passing in all your feature states (in our case, just the&nbsp;MenusState&nbsp;for now). Open&nbsp;app.module.ts&nbsp;and add the following code 👇</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5095"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5095"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5095/revisions"}],"predecessor-version":[{"id":5096,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5095/revisions/5096"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5095"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5095"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5095"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5097,"date":"2022-12-04T06:06:43","date_gmt":"2022-12-04T06:06:43","guid":{"rendered":"https://angular.foobrdigital.com/?p=5097"},"modified":"2022-12-04T06:06:43","modified_gmt":"2022-12-04T06:06:43","slug":"user-state-management","status":"publish","type":"post","link":"https://angular.foobrdigital.com/user-state-management/","title":{"rendered":"User State Management"},"content":{"rendered":"\n<p>In the previous lectures of the state management in Angular with NGXS series, we learned about the basics of NGXS, how it works, and how to use it to manage our application&#8217;s state. In these lectures, we will show you how to use Auth0 with NGXS to manage use-related states.</p>\n\n\n\n<p>The user store will work similarly to how the menus state management works. I won&#8217;t detail how each part of the state works and will focus more on the Auth0 and NGXS integration.</p>\n\n\n\n<p>The starter app uses the Auth0 SDK directly and manages the roles through the&nbsp;<code>RolesService</code>. This tutorial section will walk you through migrating to using Auth0&#8217;s SDK through NGXS and managing the roles by using the NGXS&#8217;s&nbsp;<code>Select</code>&nbsp;function.</p>\n","protected":false},"excerpt":{"rendered":"<p>In the previous lectures of the state management in Angular with NGXS series, we learned about the basics of NGXS, how it works, and how to use it to manage our application&#8217;s state. In these lectures, we will show you how to use Auth0 with NGXS to manage use-related states. The user store will work [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5097"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5097"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5097/revisions"}],"predecessor-version":[{"id":5098,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5097/revisions/5098"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5097"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5097"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5097"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5099,"date":"2022-12-04T06:07:01","date_gmt":"2022-12-04T06:07:01","guid":{"rendered":"https://angular.foobrdigital.com/?p=5099"},"modified":"2022-12-04T06:07:01","modified_gmt":"2022-12-04T06:07:01","slug":"create-user-model","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-user-model/","title":{"rendered":"Create User Model"},"content":{"rendered":"\n<p>Let&#8217;s start with defining the interface for the user state object. Open&nbsp;<code>user.model.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/user.model.ts\n\nimport { User as Auth0User } from \"@auth0/auth0-spa-js\";\n\nexport interface UserStateModel {\n  userDetails: Auth0User | undefined;\n}</code></pre>\n\n\n\n<p>Create a barrel export for the&nbsp;<code>user</code>&nbsp;directory with the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/index.ts\n\nexport * from \"./user.model\";</code></pre>\n\n\n\n<p>To further simplify our imports, add the user folder to the barrel export in the&nbsp;<code>state</code>&nbsp;folder and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/index.ts\n\nexport * from \"./menus\";\n\n// ✨ New 👇\nexport * from \"./user\";</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s start with defining the interface for the user state object. Open&nbsp;user.model.ts&nbsp;and add the following code 👇 Create a barrel export for the&nbsp;user&nbsp;directory with the following code 👇 To further simplify our imports, add the user folder to the barrel export in the&nbsp;state&nbsp;folder and add the following code 👇</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5099"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5099"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5099/revisions"}],"predecessor-version":[{"id":5100,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5099/revisions/5100"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5099"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5099"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5099"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5101,"date":"2022-12-04T06:07:22","date_gmt":"2022-12-04T06:07:22","guid":{"rendered":"https://angular.foobrdigital.com/?p=5101"},"modified":"2022-12-04T06:07:22","modified_gmt":"2022-12-04T06:07:22","slug":"create-user-actions","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-user-actions/","title":{"rendered":"Create User Actions"},"content":{"rendered":"\n<p>We have three user-related Actions that we need for our user Store. Login, logout, and user changed Action to keep the user details in our Store in sync with Auth0&#8217;s SDK.</p>\n\n\n\n<p>Since we have several user Actions that will originate from the Navbar component, you can group them under&nbsp;<code>AllNavbarAction</code>&nbsp;to ensure you aren&#8217;t reusing these Actions in a different part of the application (following the Good Action Hygiene pattern).</p>\n\n\n\n<p>Because the&nbsp;<code>UserChangedFromAuth0SDK</code>&nbsp;Action originates from Auth0&#8217;s SDK, let&#8217;s name the source part of the Action type as&nbsp;<code>Auth0&nbsp;SDK</code>.</p>\n\n\n\n<p>Open&nbsp;<code>user.actions.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/user.actions.ts\n\nimport { User as Auth0User } from \"@auth0/auth0-spa-js\";\n\nexport namespace User {\n  export namespace AllNavbarActions {\n    export class LoginFlowInitiated {\n      static readonly type = \"&#91;Navbar] Login Flow Initiated\";\n    }\n\n    export class LogoutFlowInitiated {\n      static readonly type = \"&#91;Navbar] Logout Flow Initiated\";\n    }\n  }\n  export class UserChangedFromAuth0SDK {\n    static readonly type = \"&#91;Auth0 SDK] User Changed\";\n    constructor(public payload: { user: Auth0User | undefined }) {}\n  }\n}</code></pre>\n\n\n\n<p>Add&nbsp;<code>user.actions</code>&nbsp;to the barrel export. Open&nbsp;<code>index.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/index.ts\n\nexport * from \"./user.model\";\n\n// ✨ New 👇\nexport * from \"./user.actions\";</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>We have three user-related Actions that we need for our user Store. Login, logout, and user changed Action to keep the user details in our Store in sync with Auth0&#8217;s SDK. Since we have several user Actions that will originate from the Navbar component, you can group them under&nbsp;AllNavbarAction&nbsp;to ensure you aren&#8217;t reusing these Actions [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5101"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5101"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5101/revisions"}],"predecessor-version":[{"id":5102,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5101/revisions/5102"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5101"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5101"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5101"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5103,"date":"2022-12-04T06:07:40","date_gmt":"2022-12-04T06:07:40","guid":{"rendered":"https://angular.foobrdigital.com/?p=5103"},"modified":"2022-12-04T06:07:40","modified_gmt":"2022-12-04T06:07:40","slug":"update-application-to-use-user-actions","status":"publish","type":"post","link":"https://angular.foobrdigital.com/update-application-to-use-user-actions/","title":{"rendered":"Update application to use user actions"},"content":{"rendered":"\n<p>Like what you did with menus-related functionalities in the first part of the article, let&#8217;s update the application&#8217;s user-related functionalities to use NGXS&#8217;s Actions. You can use Actions by injecting the Store class and calling the&nbsp;<code>dispatch</code>&nbsp;function with the Action name you defined in the previous section.</p>\n\n\n\n<p>Open&nbsp;<code>nav-bar.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/shared/components/nav-bar/nav-bar.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { IconDefinition } from \"@fortawesome/fontawesome-svg-core\";\nimport { faHome, faUser, faUtensils } from \"@fortawesome/free-solid-svg-icons\";\nimport { AuthService } from \"@auth0/auth0-angular\";\n\n// ✨ New 👇\nimport { Store } from \"@ngxs/store\";\nimport { User } from \"src/app/core\";\n\nexport interface INavBarMenuLinkProps {\n  to: string;\n  icon: IconDefinition;\n  label: string;\n}\n\n@Component({\n  selector: \"app-nav-bar\",\n  templateUrl: \"./nav-bar.component.html\",\n  styleUrls: &#91;\"./nav-bar.component.scss\"],\n})\nexport class NavBarComponent {\n  faUser = faUser;\n  isAuthenticated$ = this.authService.isAuthenticated$;\n  user$ = this.authService.user$;\n\n  navOptions: INavBarMenuLinkProps&#91;] = &#91;\n    { to: \"/home\", label: \"Home\", icon: faHome },\n    { to: \"/menu\", label: \"Menu\", icon: faUtensils },\n  ];\n\n  constructor(\n    private authService: AuthService,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  loginWithRedirect(): void {\n    // ✨ New 👇\n    this.store.dispatch(new User.AllNavbarActions.LoginFlowInitiated());\n  }\n\n  logout(): void {\n    // ✨ New 👇\n    this.store.dispatch(new User.AllNavbarActions.LogoutFlowInitiated());\n  }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Like what you did with menus-related functionalities in the first part of the article, let&#8217;s update the application&#8217;s user-related functionalities to use NGXS&#8217;s Actions. You can use Actions by injecting the Store class and calling the&nbsp;dispatch&nbsp;function with the Action name you defined in the previous section. Open&nbsp;nav-bar.component.ts&nbsp;and add the following code 👇</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5103"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5103"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5103/revisions"}],"predecessor-version":[{"id":5104,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5103/revisions/5104"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5103"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5103"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5103"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5105,"date":"2022-12-04T06:07:58","date_gmt":"2022-12-04T06:07:58","guid":{"rendered":"https://angular.foobrdigital.com/?p=5105"},"modified":"2022-12-04T06:07:58","modified_gmt":"2022-12-04T06:07:58","slug":"create-user-state","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-user-state/","title":{"rendered":"Create User State"},"content":{"rendered":"\n<p>Before creating individual selectors for slices of the user state, let&#8217;s start by creating the boilerplate required to use this feature. NGXS uses an&nbsp;<code>Injectable</code>&nbsp;class with an additional&nbsp;<code>State</code>&nbsp;decorator. Create&nbsp;<code>user.state.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/user.state.ts\n\nimport { Injectable } from \"@angular/core\";\nimport { State } from \"@ngxs/store\";\nimport { UserStateModel } from \"./user.model\";\n\n@State&lt;UserStateModel&gt;({\n  name: \"user\",\n  defaults: {\n    userDetails: undefined,\n  },\n})\n@Injectable()\nexport class UserState {}</code></pre>\n\n\n\n<p>Next, Let&#8217;s add some utility Selectors for&nbsp;<code>user</code>,&nbsp;<code>isLoggedIn</code>,&nbsp;<code>userRoles</code>, and&nbsp;<code>isAdmin</code>&nbsp;to easily let your components access these properties. Open&nbsp;<code>user.state.ts</code>&nbsp;and update it with the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/user.state.ts\n\nimport { Injectable } from \"@angular/core\";\nimport { UserStateModel } from \"./user.model\";\n\n// ✨ New 👇\nimport { State, Selector } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { environment } from \"src/environments/environment\";\n\n// ✨ New 👇\nimport { USER_ROLES } from \"../../services\";\n\n@State&lt;UserStateModel&gt;({\n  name: \"user\",\n  defaults: {\n    userDetails: undefined,\n  },\n})\n@Injectable()\nexport class UserState {\n  // ✨ New 👇\n  @Selector()\n  static user(state: UserStateModel) {\n    return state.userDetails;\n  }\n\n  // ✨ New 👇\n  @Selector()\n  static isLoggedIn(state: UserStateModel) {\n    return !!state.userDetails;\n  }\n\n  // ✨ New 👇\n  @Selector()\n  static userRoles(state: UserStateModel) {\n    return (\n      state.userDetails?.&#91;`${environment.auth.audience}/roles`] || undefined\n    );\n  }\n\n  // ✨ New 👇\n  @Selector()\n  static isAdmin(state: UserStateModel) {\n    return state.userDetails?.&#91;`${environment.auth.audience}/roles`]?.includes(\n      USER_ROLES.MENU_ADMIN\n    );\n  }\n}</code></pre>\n\n\n\n<p>Add&nbsp;<code>user.state</code>&nbsp;to the list of exports in&nbsp;<code>index.ts</code>&nbsp;👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/index.ts\n\nexport * from \"./user.model\";\nexport * from \"./user.actions\";\n\n// ✨ New 👇\nexport * from \"./user.state\";</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Before creating individual selectors for slices of the user state, let&#8217;s start by creating the boilerplate required to use this feature. NGXS uses an&nbsp;Injectable&nbsp;class with an additional&nbsp;State&nbsp;decorator. Create&nbsp;user.state.ts&nbsp;and add the following code 👇 Next, Let&#8217;s add some utility Selectors for&nbsp;user,&nbsp;isLoggedIn,&nbsp;userRoles, and&nbsp;isAdmin&nbsp;to easily let your components access these properties. Open&nbsp;user.state.ts&nbsp;and update it with the following code [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5105"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5105"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5105/revisions"}],"predecessor-version":[{"id":5106,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5105/revisions/5106"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5105"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5105"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5105"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5107,"date":"2022-12-04T06:08:19","date_gmt":"2022-12-04T06:08:19","guid":{"rendered":"https://angular.foobrdigital.com/?p=5107"},"modified":"2022-12-04T06:08:19","modified_gmt":"2022-12-04T06:08:19","slug":"update-application-to-use-user-selectors","status":"publish","type":"post","link":"https://angular.foobrdigital.com/update-application-to-use-user-selectors/","title":{"rendered":"Update application to use user selectors"},"content":{"rendered":"\n<p>The user role route guard previously used the value of the roles from&nbsp;<code>RolesService</code>. Since you now have a user roles Selector, you can replace the current implementation with a Selector created in the previous section. Open&nbsp;<code>user-role.guard.ts</code>&nbsp;and add the following code👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/guards/user-role.guard.ts\n\nimport { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { Observable, of } from \"rxjs\";\nimport { catchError, map } from \"rxjs/operators\";\n\n// ✨ New 👇\nimport { Store } from \"@ngxs/store\";\nimport { UserState } from \"..\";\n\n@Injectable({ providedIn: \"root\" })\nexport class UserRoleGuard implements CanActivate {\n  constructor(\n    private router: Router,\n    // ✨ New 👇\n    private store: Store\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable&lt;boolean&gt; {\n    // ✨ Update this 👇\n    return this.store.select(UserState.userRoles).pipe(\n      map((roles) =&gt; {\n        if (roles &amp;&amp; roles.includes(route?.data?.role)) {\n          return true;\n        }\n\n        // redirect the user to home\n        this.router.navigate(&#91;\"/home\"]);\n        return false;\n      }),\n      catchError((err) =&gt; {\n        // redirect the user to home\n        this.router.navigate(&#91;\"/home\"]);\n        return of(false);\n      })\n    );\n  }\n}</code></pre>\n\n\n\n<p>Another place we use user-related information is the Navbar. We display user information and conditionally display the login and logout button depending on the user&#8217;s&nbsp;<code>isAuthenticated</code>&nbsp;state. Open&nbsp;<code>nav-bar.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/shared/components/nav-bar/nav-bar.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { IconDefinition } from \"@fortawesome/fontawesome-svg-core\";\nimport { faHome, faUser, faUtensils } from \"@fortawesome/free-solid-svg-icons\";\nimport { Store } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { User, UserState } from \"src/app/core\";\n\nexport interface INavBarMenuLinkProps {\n  to: string;\n  icon: IconDefinition;\n  label: string;\n}\n\n@Component({\n  selector: \"app-nav-bar\",\n  templateUrl: \"./nav-bar.component.html\",\n  styleUrls: &#91;\"./nav-bar.component.scss\"],\n})\nexport class NavBarComponent {\n  faUser = faUser;\n\n  // ✨ New 👇\n  isAuthenticated$ = this.store.select(UserState.isLoggedIn);\n\n  // ✨ New 👇\n  user$ = this.store.select(UserState.user);\n\n  navOptions: INavBarMenuLinkProps&#91;] = &#91;\n    { to: \"/home\", label: \"Home\", icon: faHome },\n    { to: \"/menu\", label: \"Menu\", icon: faUtensils },\n  ];\n\n  constructor(private store: Store) {}\n\n  loginWithRedirect(): void {\n    this.store.dispatch(new User.AllNavbarActions.LoginFlowInitiated());\n  }\n\n  logout(): void {\n    this.store.dispatch(new User.AllNavbarActions.LogoutFlowInitiated());\n  }\n}</code></pre>\n\n\n\n<p>The profile page displays some information about the user, such as name and photo. Since this is stored as part of the user Store, let&#8217;s also update this to use the user Selector. Open&nbsp;<code>profile.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/profile/profile.component.ts\n\nimport { Component } from \"@angular/core\";\n\n// ✨ New 👇\nimport { Store } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { UserState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-profile\",\n  templateUrl: \"./profile.component.html\",\n  styleUrls: &#91;\"./profile.component.scss\"],\n})\nexport class ProfileComponent {\n  // ✨ New 👇\n  user$ = this.store.select(UserState.user);\n\n  // ✨ New 👇\n  constructor(private store: Store) {}\n}</code></pre>\n\n\n\n<p>We display an&nbsp;<code>Add</code>&nbsp;button when the logged-in user is an admin user on the Menu Items page. You can read more about setting up admin users on Auth0 in this&nbsp;<a href=\"https://auth0.com/blog/developing-a-secure-api-with-nestjs-adding-role-based-access-control/#Get-User-Roles\" target=\"_blank\" rel=\"noreferrer noopener\">blog post</a>. Open&nbsp;<code>menu-items.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/menu-items/menu-items.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { Store } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { MenusState, UserState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-menu-items\",\n  templateUrl: \"./menu-items.component.html\",\n  styles: &#91;\n    `\n      :host {\n        width: 100%;\n        height: 100%;\n      }\n    `,\n  ],\n})\nexport class MenuItemsComponent {\n  menuItems$ = this.store.select(MenusState.menuItems);\n\n  // ✨ New 👇\n  isAdmin$ = this.store.select(UserState.isAdmin);\n\n  constructor(\n    private router: Router,\n    private activatedRoute: ActivatedRoute,\n    private store: Store\n  ) {}\n\n  addMenuItem(): void {\n    this.router.navigate(&#91;\"add\"], { relativeTo: this.activatedRoute });\n  }\n}</code></pre>\n\n\n\n<p>Lastly, we display the&nbsp;<code>Edit</code>&nbsp;and&nbsp;<code>Delete</code>&nbsp;buttons when the logged-in user is an admin on the Menu Item page. Open&nbsp;<code>menu-item.component.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/features/menu/menu-item/menu-item.component.ts\n\nimport { Component } from \"@angular/core\";\nimport { Location } from \"@angular/common\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { map, switchMap } from \"rxjs/operators\";\nimport { Store } from \"@ngxs/store\";\n\n// ✨ New 👇\nimport { MenusState, UserState } from \"src/app/core\";\n\n@Component({\n  selector: \"app-menu-item\",\n  templateUrl: \"./menu-item.component.html\",\n  styleUrls: &#91;\"./menu-item.component.scss\"],\n})\nexport class MenuItemComponent {\n  menuItemId$ = this.activatedRoute.params.pipe(map((params) =&gt; params.id));\n\n  menuItem$ = this.menuItemId$.pipe(\n    switchMap((id) =&gt; this.store.select(MenusState.menuItem(id)))\n  );\n\n  // ✨ New 👇\n  isAdmin$ = this.store.select(UserState.isAdmin);\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private store: Store\n  ) {}\n\n  back(): void {\n    this.location.back();\n  }\n\n  navigateTo(url: string): void {\n    this.router.navigateByUrl(`${this.router.url}/${url}`);\n  }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The user role route guard previously used the value of the roles from&nbsp;RolesService. Since you now have a user roles Selector, you can replace the current implementation with a Selector created in the previous section. Open&nbsp;user-role.guard.ts&nbsp;and add the following code👇 Another place we use user-related information is the Navbar. We display user information and conditionally [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5107"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5107"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5107/revisions"}],"predecessor-version":[{"id":5108,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5107/revisions/5108"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5107"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5107"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5107"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5109,"date":"2022-12-04T06:08:40","date_gmt":"2022-12-04T06:08:40","guid":{"rendered":"https://angular.foobrdigital.com/?p=5109"},"modified":"2022-12-04T06:08:40","modified_gmt":"2022-12-04T06:08:40","slug":"create-user-action-handlers","status":"publish","type":"post","link":"https://angular.foobrdigital.com/create-user-action-handlers/","title":{"rendered":"Create User Action Handlers"},"content":{"rendered":"\n<p>Like the Menus action handlers, the User state will use the&nbsp;<code>Action</code>&nbsp;decorator to handle user-related actions. For the User state, the action handlers will be where the app interact with Auth0&#8217;s SDK &#8211; logging in, logging out, and updating the state with Auth0&#8217;s user object.</p>\n\n\n\n<p>Let&#8217;s start with the login and logout action handlers that trigger their respective flows in Auth0&#8217;s SDK. Open&nbsp;<code>user.state.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/user.state.ts\n\nimport { Injectable } from \"@angular/core\";\n\n// ✨ New 👇\nimport { State, Action, StateContext, Store, Selector } from \"@ngxs/store\";\n// ✨ New 👇\nimport { AuthService } from \"@auth0/auth0-angular\";\n\nimport { environment } from \"src/environments/environment\";\nimport { UserStateModel } from \"./user.model\";\nimport { User } from \"./user.actions\";\nimport { USER_ROLES } from \"../../services\";\n\n@State&lt;UserStateModel&gt;({\n  name: \"user\",\n  defaults: {\n    userDetails: undefined,\n  },\n})\n@Injectable()\nexport class UserState {\n  constructor(\n    private store: Store,\n    // ✨ New 👇\n    private authService: AuthService\n  ) {}\n\n  // ✨ New 👇\n  @Action(User.AllNavbarActions.LoginFlowInitiated)\n  login() {\n    this.authService.loginWithRedirect();\n  }\n\n  // ✨ New 👇\n  @Action(User.AllNavbarActions.LogoutFlowInitiated)\n  logout() {\n    this.authService.logout();\n  }\n\n  @Selector()\n  static user(state: UserStateModel) {\n    return state.userDetails;\n  }\n\n  @Selector()\n  static isLoggedIn(state: UserStateModel) {\n    return !!state.userDetails;\n  }\n\n  @Selector()\n  static userRoles(state: UserStateModel) {\n    return (\n      state.userDetails?.&#91;`${environment.auth.audience}/roles`] || undefined\n    );\n  }\n\n  @Selector()\n  static isAdmin(state: UserStateModel) {\n    return state.userDetails?.&#91;`${environment.auth.audience}/roles`]?.includes(\n      USER_ROLES.MENU_ADMIN\n    );\n  }\n}</code></pre>\n\n\n\n<p>To keep the user observable from the Auth0&#8217;s SDK and our User State in sync, create a subscription to listen to&nbsp;<code>AuthService</code>&#8216;s&nbsp;<code>user$</code>&nbsp;property and dispatch the&nbsp;<code>UserChangedFromAuth0SDK</code>&nbsp;whenever the observable emits a new value.&nbsp;<code>UserChangedFromAuth0SDK</code>&nbsp;will then update the User State with the new user data from Auth0. Open&nbsp;<code>user.state.ts</code>&nbsp;and add the following code 👇</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/core/state/user/user.state.ts\n\nimport { Injectable } from \"@angular/core\";\nimport { State, Action, StateContext, Store, Selector } from \"@ngxs/store\";\nimport { AuthService } from \"@auth0/auth0-angular\";\nimport { environment } from \"src/environments/environment\";\nimport { USER_ROLES } from \"../../services\";\nimport { UserStateModel } from \"./user.model\";\nimport { User } from \"./user.actions\";\n\n@State&lt;UserStateModel&gt;({\n  name: \"user\",\n  defaults: {\n    userDetails: undefined,\n  },\n})\n@Injectable()\nexport class UserState {\n  constructor(private store: Store, private authService: AuthService) {\n    // ✨ New 👇\n    this.listenToUserChange();\n  }\n\n  // ✨ New 👇\n  @Action(User.UserChangedFromAuth0SDK)\n  userChangedFromAuth0SDK(\n    ctx: StateContext&lt;UserStateModel&gt;,\n    actions: User.UserChangedFromAuth0SDK\n  ) {\n    const state = ctx.getState();\n    ctx.setState({\n      ...state,\n      userDetails: actions.payload.user,\n    });\n  }\n\n  @Action(User.AllNavbarActions.LoginFlowInitiated)\n  login() {\n    this.authService.loginWithRedirect();\n  }\n\n  @Action(User.AllNavbarActions.LogoutFlowInitiated)\n  logout() {\n    this.authService.logout();\n  }\n\n  // ✨ New 👇\n  private listenToUserChange(): void {\n    this.authService.user$.subscribe((user) =&gt; {\n      this.store.dispatch(\n        new User.UserChangedFromAuth0SDK({ user: user || undefined })\n      );\n    });\n  }\n\n  @Selector()\n  static user(state: UserStateModel) {\n    return state.userDetails;\n  }\n\n  @Selector()\n  static isLoggedIn(state: UserStateModel) {\n    return !!state.userDetails;\n  }\n\n  @Selector()\n  static userRoles(state: UserStateModel) {\n    return (\n      state.userDetails?.&#91;`${environment.auth.audience}/roles`] || undefined\n    );\n  }\n\n  @Selector()\n  static isAdmin(state: UserStateModel) {\n    return state.userDetails?.&#91;`${environment.auth.audience}/roles`]?.includes(\n      USER_ROLES.MENU_ADMIN\n    );\n  }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Like the Menus action handlers, the User state will use the&nbsp;Action&nbsp;decorator to handle user-related actions. For the User state, the action handlers will be where the app interact with Auth0&#8217;s SDK &#8211; logging in, logging out, and updating the state with Auth0&#8217;s user object. Let&#8217;s start with the login and logout action handlers that trigger [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5109"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5109"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5109/revisions"}],"predecessor-version":[{"id":5110,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5109/revisions/5110"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5109"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5109"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5109"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5111,"date":"2022-12-04T06:09:02","date_gmt":"2022-12-04T06:09:02","guid":{"rendered":"https://angular.foobrdigital.com/?p=5111"},"modified":"2022-12-04T06:09:02","modified_gmt":"2022-12-04T06:09:02","slug":"update-app-module","status":"publish","type":"post","link":"https://angular.foobrdigital.com/update-app-module/","title":{"rendered":"Update app module"},"content":{"rendered":"\n<p>You will then need to add&nbsp;<code>UserState</code>&nbsp;to the&nbsp;<code>NgxsModule</code>&nbsp;initialization. Open&nbsp;<code>app.module.ts</code>&nbsp;and add the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// src/app/app.module.ts\n\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { NgModule } from \"@angular/core\";\nimport { AuthHttpInterceptor, AuthModule } from \"@auth0/auth0-angular\";\n\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\nimport { NavBarModule } from \"./shared\";\nimport { environment } from \"src/environments/environment\";\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { NgxsModule } from \"@ngxs/store\";\nimport { NgxsReduxDevtoolsPluginModule } from \"@ngxs/devtools-plugin\";\n\n// ✨ Update this 👇\nimport { MenusState, UserState } from \"./core\";\n\n@NgModule({\n  imports: &#91;\n    BrowserModule,\n    HttpClientModule,\n    AuthModule.forRoot({\n      ...environment.auth,\n      cacheLocation: \"localstorage\",\n      httpInterceptor: {\n        allowedList: &#91;\n          `${environment.serverUrl}/api/menu/items`,\n          `${environment.serverUrl}/api/menu/items/*`,\n        ],\n      },\n    }),\n    AppRoutingModule,\n    NavBarModule,\n    // ✨ Update this 👇\n    NgxsModule.forRoot(&#91;MenusState, UserState], { developmentMode: true }),\n    NgxsReduxDevtoolsPluginModule.forRoot(),\n  ],\n  declarations: &#91;AppComponent],\n  bootstrap: &#91;AppComponent],\n  providers: &#91;\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthHttpInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class AppModule {}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>You will then need to add&nbsp;UserState&nbsp;to the&nbsp;NgxsModule&nbsp;initialization. Open&nbsp;app.module.ts&nbsp;and add the following code.</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5111"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5111"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5111/revisions"}],"predecessor-version":[{"id":5112,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5111/revisions/5112"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5111"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5111"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5111"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5113,"date":"2022-12-04T06:09:32","date_gmt":"2022-12-04T06:09:32","guid":{"rendered":"https://angular.foobrdigital.com/?p=5113"},"modified":"2022-12-04T06:09:32","modified_gmt":"2022-12-04T06:09:32","slug":"conclusion-2","status":"publish","type":"post","link":"https://angular.foobrdigital.com/conclusion-2/","title":{"rendered":"Conclusion"},"content":{"rendered":"\n<p>State management is a key component when building applications. You added two Stores to our demo application to manage two distinct states &#8211; menus and users. This is a relatively small demo application with a few Stores, Actions, and Selectors to show how you can use NGXS to manage your Application&#8217;s state and use NGXS with Auth0&#8217;s SDK to handle user-related functionalities.</p>\n","protected":false},"excerpt":{"rendered":"<p>State management is a key component when building applications. You added two Stores to our demo application to manage two distinct states &#8211; menus and users. This is a relatively small demo application with a few Stores, Actions, and Selectors to show how you can use NGXS to manage your Application&#8217;s state and use NGXS [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[290],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5113"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5113"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5113/revisions"}],"predecessor-version":[{"id":5114,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5113/revisions/5114"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5113"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5113"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5113"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]