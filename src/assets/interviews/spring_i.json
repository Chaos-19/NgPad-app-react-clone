[
  {
    "id": 2235,
    "date": "2022-04-19T10:00:30",
    "date_gmt": "2022-04-19T10:00:30",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2235"
    },
    "modified": "2022-04-19T10:00:30",
    "modified_gmt": "2022-04-19T10:00:30",
    "slug": "what-are-the-major-features-in-different-versions-of-spring-framework",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-are-the-major-features-in-different-versions-of-spring-framework/",
    "title": {
      "rendered": "What are the major features in different versions of Spring Framework?"
    },
    "content": {
      "rendered": "\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><td><strong>Version</strong></td><td><strong>Logo</strong></td><td><strong>Feature</strong></td></tr><tr><td><strong>Spring 2.5</strong></td><td><img loading=\"lazy\" src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s4.png\" alt=\"spring 2.5 logo - Spring Interview Questions - Edureka!\" width=\"87\" height=\"41\" srcset=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s4.png 395w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s4-150x71.png 150w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s4-300x142.png 300w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s4-380x180.png 380w\"></td><td>This version was released in 2007. It was the first version which supported annotations.</td></tr><tr><td><strong>Spring 3.0</strong></td><td><img loading=\"lazy\" src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s5.png\" alt=\"spring 3.0 logo - Spring Interview Questions - Edureka!\" width=\"46\" height=\"46\" srcset=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s5.png 200w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s5-150x150.png 150w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s5-180x180.png 180w\"></td><td>This version was released in 2009.&nbsp;It<strong>&nbsp;</strong>made full-fledged use of improvements in Java5&nbsp;and also provided support to JEE6.</td></tr><tr><td><strong>Spring 4.0</strong></td><td><img loading=\"lazy\" src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7.png\" alt=\"Spring 4.0 logo - Spring Interview Questions - Edureka!\" width=\"136\" height=\"44\" srcset=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7.png 800w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7-150x49.png 150w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7-300x98.png 300w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7-768x250.png 768w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7-528x172.png 528w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/s7-554x180.png 554w\"></td><td><strong>&nbsp;</strong>This version was released in 2013. This was the first version to provide full support to Java 8.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Version Logo Feature Spring 2.5 This version was released in 2007. It was the first version which supported annotations. Spring 3.0 This version was released in 2009.&nbsp;It&nbsp;made full-fledged use of improvements in Java5&nbsp;and also provided support to JEE6. Spring 4.0 &nbsp;This version was released in 2013. This was the first version to provide full support [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2235"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2235"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2235/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2236,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2235/revisions/2236"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2235"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2235"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2235"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2237,
    "date": "2022-04-19T10:00:59",
    "date_gmt": "2022-04-19T10:00:59",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2237"
    },
    "modified": "2022-04-19T10:14:34",
    "modified_gmt": "2022-04-19T10:14:34",
    "slug": "what-is-a-spring-framework",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-a-spring-framework/",
    "title": {
      "rendered": "What is a Spring Framework?"
    },
    "content": {
      "rendered": "\n<ul><li>Spring is a powerful open source, application framework created to reduce the complexity of enterprise application development.</li><li>It is light-weighted and loosely coupled.</li><li>It has layered architecture, which allows you to select the components to use,&nbsp;while also providing a cohesive framework for J2EE application development.</li><li>Spring framework is also called the framework of frameworks as it&nbsp;provides support to various other&nbsp;frameworks such as Struts, Hibernate, Tapestry, EJB, JSF etc.<a></a></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Spring is a powerful open source, application framework created to reduce the complexity of enterprise application development. It is light-weighted and loosely coupled. It has layered architecture, which allows you to select the components to use,&nbsp;while also providing a cohesive framework for J2EE application development. Spring framework is also called the framework of frameworks as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2237"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2237"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2237/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2278,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2237/revisions/2278"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2237"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2237"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2237"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2239,
    "date": "2022-04-19T10:01:27",
    "date_gmt": "2022-04-19T10:01:27",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2239"
    },
    "modified": "2022-04-19T10:14:11",
    "modified_gmt": "2022-04-19T10:14:11",
    "slug": "list-the-advantages-of-spring-framework",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/list-the-advantages-of-spring-framework/",
    "title": {
      "rendered": "List the advantages of Spring Framework."
    },
    "content": {
      "rendered": "\n<ul><li>Because of Spring Frameworks layered architecture, you can use what you need and leave which you don\u2019t.</li><li>Spring Framework enables POJO (Plain Old Java Object) Programming&nbsp;which in turn enables continuous integration and testability.</li><li>JDBC is simplified due to Dependency Injection and Inversion of Control.</li><li>It is open-source and has no vendor lock-in.<a></a></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Because of Spring Frameworks layered architecture, you can use what you need and leave which you don\u2019t. Spring Framework enables POJO (Plain Old Java Object) Programming&nbsp;which in turn enables continuous integration and testability. JDBC is simplified due to Dependency Injection and Inversion of Control. It is open-source and has no vendor lock-in.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2239"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2239"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2239/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2277,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2239/revisions/2277"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2239"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2239"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2239"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2241,
    "date": "2022-04-19T10:01:49",
    "date_gmt": "2022-04-19T10:01:49",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2241"
    },
    "modified": "2022-04-19T10:01:49",
    "modified_gmt": "2022-04-19T10:01:49",
    "slug": "what-are-the-different-features-of-spring-framework",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-are-the-different-features-of-spring-framework/",
    "title": {
      "rendered": "What are the different features of Spring Framework?"
    },
    "content": {
      "rendered": "\n<p>Following are some of the major features of Spring Framework :</p>\n\n\n\n<ul><li><strong>Lightweight:</strong>&nbsp;Spring is lightweight when it comes to size and transparency.&nbsp;</li><li><strong>Inversion of control (IOC):</strong>&nbsp;The objects give their dependencies instead of creating or looking for dependent objects. This is&nbsp;called Inversion Of Control.</li><li><strong>Aspect oriented Programming (AOP):</strong>&nbsp;Aspect oriented programming in Spring supports&nbsp;cohesive development by separating application business logic from system services.</li><li><strong>Container:&nbsp;</strong>Spring Framework creates and manages the life cycle and configuration of the application objects.</li><li><strong>MVC Framework:</strong>&nbsp;Spring Framework\u2019s MVC web application framework is highly configurable. Other frameworks can also be used easily&nbsp;instead of Spring MVC Framework.</li><li><strong>Transaction Management:</strong>&nbsp;Generic abstraction layer for transaction management is provided by the Spring Framework. Spring\u2019s transaction support can be also used in container less environments.</li><li><strong>JDBC Exception Handling:</strong>&nbsp;The JDBC abstraction layer of the Spring offers an exception hierarchy, which simplifies the error handling strategy.<a></a></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Following are some of the major features of Spring Framework : Lightweight:&nbsp;Spring is lightweight when it comes to size and transparency.&nbsp; Inversion of control (IOC):&nbsp;The objects give their dependencies instead of creating or looking for dependent objects. This is&nbsp;called Inversion Of Control. Aspect oriented Programming (AOP):&nbsp;Aspect oriented programming in Spring supports&nbsp;cohesive development by separating application [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2241"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2241"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2241/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2242,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2241/revisions/2242"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2241"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2241"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2241"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2243,
    "date": "2022-04-19T10:02:29",
    "date_gmt": "2022-04-19T10:02:29",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2243"
    },
    "modified": "2022-04-19T10:02:29",
    "modified_gmt": "2022-04-19T10:02:29",
    "slug": "how-many-modules-are-there-in-spring-framework-and-what-are-they",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-many-modules-are-there-in-spring-framework-and-what-are-they/",
    "title": {
      "rendered": "How many modules are there in Spring Framework and what are they?"
    },
    "content": {
      "rendered": "\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/06/spring-overview.png.pagespeed.ce_.XVe1noRCMt.png\" alt=\"Spring Framework Architecture - Spring Interview Questions - Edureka!\" class=\"wp-image-48521\"/></figure></div>\n\n\n\n<p>There are around 20 modules which are generalized into Core Container, Data Access/Integration, Web, AOP (Aspect Oriented Programming), Instrumentation and Test.</p>\n\n\n\n<ul><li><strong>Spring Core Container \u2013&nbsp;</strong>This layer is basically the core of Spring Framework.<strong>&nbsp;</strong>It contains the following modules :</li></ul>\n\n\n\n<ol><li>Spring Core</li><li>Spring Bean</li><li>SpEL (Spring Expression Language)</li><li>Spring Context&nbsp;</li></ol>\n\n\n\n<ul><li><strong>Data Access/Integration \u2013&nbsp;</strong>This layer&nbsp;provides support to interact with the database. It contains the following modules :</li></ul>\n\n\n\n<ol><li>JDBC (Java DataBase Connectivity)</li><li>ORM (Object Relational Mapping)</li><li>OXM (Object XML Mappers)</li><li>JMS (Java Messaging Service)</li><li>Transaction</li></ol>\n\n\n\n<ul><li><strong>Web \u2013&nbsp;</strong>This layer provides support to create web application.&nbsp;It contains the following modules :</li></ul>\n\n\n\n<ol><li>Web</li><li>Web \u2013 MVC</li><li>Web \u2013 Socket</li><li>Web \u2013 Portlet</li></ol>\n\n\n\n<ul><li><strong>Aspect Oriented Programming (AOP) \u2013</strong>&nbsp;In this layer&nbsp;you can use Advices,&nbsp;Pointcuts etc., to decouple&nbsp;the code.</li><li><strong>Instrumentation \u2013&nbsp;</strong>This layer&nbsp;provides support to class instrumentation and classloader implementations.</li><li><strong>Test \u2013&nbsp;</strong>This layer provides support to testing with JUnit and TestNG.</li></ul>\n\n\n\n<p>Few Miscellaneous modules are given below:</p>\n\n\n\n<ul><li><strong>Messaging \u2013&nbsp;</strong>This&nbsp;module provides support for STOMP. It also supports an annotation programming model that is used for routing and processing STOMP messages from WebSocket clients.</li><li><strong>Aspects \u2013&nbsp;</strong>This&nbsp;module provides support to integration with AspectJ.<a></a></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are around 20 modules which are generalized into Core Container, Data Access/Integration, Web, AOP (Aspect Oriented Programming), Instrumentation and Test. Spring Core Container \u2013&nbsp;This layer is basically the core of Spring Framework.&nbsp;It contains the following modules : Spring Core Spring Bean SpEL (Spring Expression Language) Spring Context&nbsp; Data Access/Integration \u2013&nbsp;This layer&nbsp;provides support to interact [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2243"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2243"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2243/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2244,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2243/revisions/2244"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2243"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2243"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2243"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2245,
    "date": "2022-04-19T10:02:50",
    "date_gmt": "2022-04-19T10:02:50",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2245"
    },
    "modified": "2022-04-19T10:02:50",
    "modified_gmt": "2022-04-19T10:02:50",
    "slug": "what-is-a-spring-configuration-file",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-a-spring-configuration-file/",
    "title": {
      "rendered": "What is a Spring configuration file?"
    },
    "content": {
      "rendered": "\n<p>A Spring configuration file is an XML file. This file mainly contains the classes information. It&nbsp;describes how those classes are configured as well as introduced to each other. The XML configuration files, however, are verbose and more clean. If it\u2019s not planned and written correctly, it becomes very difficult to manage in big projects.<a></a></p>\n\n\n\n<h3><strong>7.&nbsp;What are the different components of a Spring application?</strong></h3>\n\n\n\n<p>A Spring application, generally consists of following components:</p>\n\n\n\n<ul><li>Interface: It defines the functions.</li><li>Bean class: It contains properties, its setter and getter methods, functions etc.</li><li>Spring Aspect Oriented Programming (AOP): Provides the functionality of cross-cutting concerns.</li><li>Bean Configuration File: Contains the information of classes and how to configure them.</li><li>User program: It uses the function.<a></a></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A Spring configuration file is an XML file. This file mainly contains the classes information. It&nbsp;describes how those classes are configured as well as introduced to each other. The XML configuration files, however, are verbose and more clean. If it\u2019s not planned and written correctly, it becomes very difficult to manage in big projects. 7.&nbsp;What [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2245"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2245"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2245/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2246,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2245/revisions/2246"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2245"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2245"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2245"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2247,
    "date": "2022-04-19T10:03:17",
    "date_gmt": "2022-04-19T10:03:17",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2247"
    },
    "modified": "2022-04-19T10:03:17",
    "modified_gmt": "2022-04-19T10:03:17",
    "slug": "what-are-the-various-ways-of-using-spring-framework",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-are-the-various-ways-of-using-spring-framework/",
    "title": {
      "rendered": "What are the various ways of using Spring Framework?"
    },
    "content": {
      "rendered": "\n<p>Spring Framework can be used in various ways. They are listed as follows:</p>\n\n\n\n<ol><li>&nbsp;As a Full-fledged Spring web application.</li><li>As a third-party web framework, using Spring Frameworks middle-tier.</li><li>&nbsp;For remote usage.<a></a>&nbsp;</li><li>As Enterprise Java Bean which can wrap existing POJOs (Plain Old Java Objects).</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Spring Framework can be used in various ways. They are listed as follows: &nbsp;As a Full-fledged Spring web application. As a third-party web framework, using Spring Frameworks middle-tier. &nbsp;For remote usage.&nbsp; As Enterprise Java Bean which can wrap existing POJOs (Plain Old Java Objects).</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2247"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2247"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2247/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2248,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2247/revisions/2248"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2247"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2247"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2247"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2249,
    "date": "2022-04-19T10:03:51",
    "date_gmt": "2022-04-19T10:03:51",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2249"
    },
    "modified": "2022-04-19T10:14:02",
    "modified_gmt": "2022-04-19T10:14:02",
    "slug": "what-is-spring-ioc-container",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-spring-ioc-container/",
    "title": {
      "rendered": "What is Spring IOC Container?"
    },
    "content": {
      "rendered": "\n<p>At the core of the Spring Framework, lies the Spring container. The container\u00a0creates the object, wires them together, configures them and manages their complete life cycle. The Spring container makes use of Dependency Injection to manage the components that make up an application. The container receives instructions\u00a0for which\u00a0objects\u00a0to instantiate, configure, and assemble by reading the configuration metadata provided. This metadata can be provided either by XML, Java annotations or Java code.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>At the core of the Spring Framework, lies the Spring container. The container\u00a0creates the object, wires them together, configures them and manages their complete life cycle. The Spring container makes use of Dependency Injection to manage the components that make up an application. The container receives instructions\u00a0for which\u00a0objects\u00a0to instantiate, configure, and assemble by reading the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2249"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2249"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2249/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2276,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2249/revisions/2276"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2249"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2249"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2249"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2251,
    "date": "2022-04-19T10:04:52",
    "date_gmt": "2022-04-19T10:04:52",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2251"
    },
    "modified": "2022-04-19T10:04:57",
    "modified_gmt": "2022-04-19T10:04:57",
    "slug": "10-what-do-you-mean-by-dependency-injection-%ef%bf%bc",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/10-what-do-you-mean-by-dependency-injection-%ef%bf%bc/",
    "title": {
      "rendered": "What do you mean by Dependency Injection?\u00a0\ufffc"
    },
    "content": {
      "rendered": "\n<p>In Dependency Injection, you do not have to create your objects but have to describe how they should be created. You don\u2019t connect your components and services together in the code directly, but describe which services are needed by which components in the configuration file. The IoC container will wire them up together.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Dependency Injection, you do not have to create your objects but have to describe how they should be created. You don\u2019t connect your components and services together in the code directly, but describe which services are needed by which components in the configuration file. The IoC container will wire them up together.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2251"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2251"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2251/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2253,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2251/revisions/2253"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2251"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2251"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2251"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2254,
    "date": "2022-04-19T10:05:21",
    "date_gmt": "2022-04-19T10:05:21",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2254"
    },
    "modified": "2022-04-19T10:05:21",
    "modified_gmt": "2022-04-19T10:05:21",
    "slug": "in-how-many-ways-can-dependency-injection-be-done",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/in-how-many-ways-can-dependency-injection-be-done/",
    "title": {
      "rendered": "In how many ways can Dependency Injection be done?"
    },
    "content": {
      "rendered": "\n<p>In general, dependency injection can be done in three ways, namely :</p>\n\n\n\n<ul><li>Constructor Injection</li><li>Setter Injection</li><li>Interface Injection</li></ul>\n\n\n\n<p>In Spring Framework, only constructor and setter injections are used.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In general, dependency injection can be done in three ways, namely : Constructor Injection Setter Injection Interface Injection In Spring Framework, only constructor and setter injections are used.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2254"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2254"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2254/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2255,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2254/revisions/2255"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2254"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2254"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2254"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2256,
    "date": "2022-04-19T10:05:52",
    "date_gmt": "2022-04-19T10:05:52",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2256"
    },
    "modified": "2022-04-19T10:05:52",
    "modified_gmt": "2022-04-19T10:05:52",
    "slug": "differentiate-between-constructor-injection-and-setter-injection",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/differentiate-between-constructor-injection-and-setter-injection/",
    "title": {
      "rendered": "Differentiate between constructor injection and setter injection."
    },
    "content": {
      "rendered": "\n<h4>Constructor Injection vs Setter Injection</h4>\n\n\n\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><th><strong>Constructor Injection</strong></th><th><strong>Setter Injection</strong></th></tr><tr><td>There is no partial injection.</td><td>There can be partial injection.</td></tr><tr><td>It doesn\u2019t override the setter property.</td><td>It&nbsp;overrides the&nbsp;constructor property.</td></tr><tr><td>It will create a new instance if any modification is done.</td><td>It&nbsp;will not&nbsp;create new instance if any modification is done.</td></tr><tr><td>It works&nbsp;better&nbsp;for many&nbsp;properties.</td><td>It works better for few properties.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Constructor Injection vs Setter Injection Constructor Injection Setter Injection There is no partial injection. There can be partial injection. It doesn\u2019t override the setter property. It&nbsp;overrides the&nbsp;constructor property. It will create a new instance if any modification is done. It&nbsp;will not&nbsp;create new instance if any modification is done. It works&nbsp;better&nbsp;for many&nbsp;properties. It works better for [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2256"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2256"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2256/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2257,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2256/revisions/2257"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2256"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2256"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2256"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2258,
    "date": "2022-04-19T10:06:29",
    "date_gmt": "2022-04-19T10:06:29",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2258"
    },
    "modified": "2022-04-19T10:13:53",
    "modified_gmt": "2022-04-19T10:13:53",
    "slug": "how-many-types-of-ioc-containers-are-there-in-spring",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-many-types-of-ioc-containers-are-there-in-spring/",
    "title": {
      "rendered": "How many types of IOC containers are there in spring?"
    },
    "content": {
      "rendered": "\n<ol><li><strong>BeanFactory</strong>: BeanFactory is like a factory class that contains a collection of beans. It instantiates the bean whenever asked for by clients.</li><li><strong>ApplicationContext</strong>: The ApplicationContext interface is built on top of the BeanFactory interface. It provides some extra\u00a0functionality\u00a0on top\u00a0BeanFactory.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>BeanFactory: BeanFactory is like a factory class that contains a collection of beans. It instantiates the bean whenever asked for by clients. ApplicationContext: The ApplicationContext interface is built on top of the BeanFactory interface. It provides some extra\u00a0functionality\u00a0on top\u00a0BeanFactory.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2258"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2258"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2258/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2275,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2258/revisions/2275"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2258"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2258"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2258"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2260,
    "date": "2022-04-19T10:07:37",
    "date_gmt": "2022-04-19T10:07:37",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2260"
    },
    "modified": "2022-04-19T10:07:37",
    "modified_gmt": "2022-04-19T10:07:37",
    "slug": "differentiate-between-beanfactory-and-applicationcontext-%ef%bf%bc",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/differentiate-between-beanfactory-and-applicationcontext-%ef%bf%bc/",
    "title": {
      "rendered": "Differentiate between BeanFactory and ApplicationContext.\ufffc"
    },
    "content": {
      "rendered": "\n<h4>BeanFactory vs ApplicationContext</h4>\n\n\n\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><th><strong>BeanFactory</strong></th><th><strong>ApplicationContext</strong></th></tr><tr><td>It is an interface defined&nbsp;in org.springframework.beans.factory.<strong>BeanFactory</strong></td><td>It is an interface defined in org.springframework.context.<strong>ApplicationContext</strong></td></tr><tr><td>It uses Lazy initialization</td><td>It uses Eager/ Aggressive initialization</td></tr><tr><td>It explicitly provides a resource object using the syntax</td><td>It creates and manages&nbsp;resource objects&nbsp;on its own</td></tr><tr><td>It doesn\u2019t supports&nbsp;internationalization</td><td>It supports&nbsp;internationalization&nbsp;</td></tr><tr><td>It doesn\u2019t supports annotation based dependency &nbsp; &nbsp;</td><td>It supports annotation based dependency &nbsp;</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>BeanFactory vs ApplicationContext BeanFactory ApplicationContext It is an interface defined&nbsp;in org.springframework.beans.factory.BeanFactory It is an interface defined in org.springframework.context.ApplicationContext It uses Lazy initialization It uses Eager/ Aggressive initialization It explicitly provides a resource object using the syntax It creates and manages&nbsp;resource objects&nbsp;on its own It doesn\u2019t supports&nbsp;internationalization It supports&nbsp;internationalization&nbsp; It doesn\u2019t supports annotation based dependency &nbsp; [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2260"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2260"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2260/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2261,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2260/revisions/2261"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2260"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2260"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2260"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2262,
    "date": "2022-04-19T10:08:03",
    "date_gmt": "2022-04-19T10:08:03",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2262"
    },
    "modified": "2022-04-19T10:08:03",
    "modified_gmt": "2022-04-19T10:08:03",
    "slug": "list-some-of-the-benefits-of-ioc",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/list-some-of-the-benefits-of-ioc/",
    "title": {
      "rendered": "List some of the benefits of IoC."
    },
    "content": {
      "rendered": "\n<p>Some of the benefits of IoC are:</p>\n\n\n\n<ul><li>It will minimize the amount of code in your application.</li><li>It will make your application easy to test because it doesn\u2019t require any singletons or JNDI lookup mechanisms in your unit test cases.</li><li>It promotes loose coupling with minimal effort and least intrusive mechanism.<a></a></li><li>It supports eager instantiation and lazy loading of the services.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Some of the benefits of IoC are: It will minimize the amount of code in your application. It will make your application easy to test because it doesn\u2019t require any singletons or JNDI lookup mechanisms in your unit test cases. It promotes loose coupling with minimal effort and least intrusive mechanism. It supports eager instantiation [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2262"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2262"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2262/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2263,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2262/revisions/2263"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2262"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2262"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2262"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2264,
    "date": "2022-04-19T10:08:36",
    "date_gmt": "2022-04-19T10:08:36",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2264"
    },
    "modified": "2022-04-19T10:13:40",
    "modified_gmt": "2022-04-19T10:13:40",
    "slug": "explain-spring-beans",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/explain-spring-beans/",
    "title": {
      "rendered": "Explain Spring Beans?"
    },
    "content": {
      "rendered": "\n<ul><li>They are the objects that form the backbone of the&nbsp;user\u2019s&nbsp;application.</li><li>Beans are managed by the Spring IoC container.</li><li>They are instantiated, configured, wired and managed by a Spring IoC container</li><li>Beans are created with the configuration metadata that the users supply to the container.<img loading=\"lazy\" src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/bean.png\" alt=\"Bean generation - Spring Interview Questions - Edureka!\" width=\"453\" height=\"54\" srcset=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/bean.png 762w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/bean-150x18.png 150w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/bean-300x36.png 300w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/bean-528x63.png 528w, https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/bean-590x70.png 590w\"></li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>They are the objects that form the backbone of the&nbsp;user\u2019s&nbsp;application. Beans are managed by the Spring IoC container. They are instantiated, configured, wired and managed by a Spring IoC container Beans are created with the configuration metadata that the users supply to the container.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2264"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2264"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2264/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2274,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2264/revisions/2274"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2264"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2264"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2264"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2266,
    "date": "2022-04-19T10:10:36",
    "date_gmt": "2022-04-19T10:10:36",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2266"
    },
    "modified": "2022-04-19T10:10:36",
    "modified_gmt": "2022-04-19T10:10:36",
    "slug": "how-configuration-metadata-is-provided-to-the-spring-container",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-configuration-metadata-is-provided-to-the-spring-container/",
    "title": {
      "rendered": "How configuration metadata is provided to the Spring container?"
    },
    "content": {
      "rendered": "\n<p>Configuration metadata can be provided&nbsp;to&nbsp;Spring container in following ways:</p>\n\n\n\n<ul><li><strong>XML-Based configuration:&nbsp;</strong>In Spring Framework, the dependencies and the services needed by beans are specified in configuration files which are in XML format. These configuration files usually contain a lot of bean definitions and application specific configuration options. They generally&nbsp;start with a bean tag.&nbsp;For example:</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id=\"studentbean\" class=\"org.edureka.firstSpring.StudentBean\">\n &lt;property name=\"name\" value=\"Edureka\">&lt;/property>\n&lt;/bean></code></pre>\n\n\n\n<p><strong>Annotation-Based configuration</strong>: Instead of using XML to describe a bean wiring, you can configure the bean into the component class itself by using annotations on the relevant class, method, or field declaration. By default, annotation wiring is not turned on in the Spring container. So, you need to enable it in your Spring configuration file before using it. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans>\n&lt;context:annotation-config/>\n&lt;!-- bean definitions go here -->\n&lt;/beans></code></pre>\n\n\n\n<ul><li><strong>Java-based configuration:&nbsp;</strong>The key features&nbsp;in Spring Framework\u2019s new Java-configuration support are&nbsp;@Configuration annotated classes and&nbsp;@Bean annotated methods.&nbsp;</li></ul>\n\n\n\n<p>1. @Bean\u00a0annotation plays the same role as the\u00a0&lt;bean/>\u00a0element.\u00a0<br>2.@Configuration\u00a0classes allows to define inter-bean dependencies by simply calling other\u00a0@Bean methods in the same class.\u00a0<br>For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Configuration\npublic class StudentConfig \n{ \n@Bean\npublic StudentBean myStudent() \n{ return new StudentBean(); }\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Configuration metadata can be provided&nbsp;to&nbsp;Spring container in following ways: XML-Based configuration:&nbsp;In Spring Framework, the dependencies and the services needed by beans are specified in configuration files which are in XML format. These configuration files usually contain a lot of bean definitions and application specific configuration options. They generally&nbsp;start with a bean tag.&nbsp;For example: Annotation-Based configuration: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2266"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2266"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2266/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2267,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2266/revisions/2267"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2266"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2266"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2266"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2268,
    "date": "2022-04-19T10:10:53",
    "date_gmt": "2022-04-19T10:10:53",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2268"
    },
    "modified": "2022-04-19T10:10:53",
    "modified_gmt": "2022-04-19T10:10:53",
    "slug": "how-many-bean-scopes-are-supported-by-spring",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-many-bean-scopes-are-supported-by-spring/",
    "title": {
      "rendered": "How many bean scopes are supported by Spring?"
    },
    "content": {
      "rendered": "\n<p>The Spring Framework supports five scopes. They are:</p>\n\n\n\n<ul><li><strong>Singleton:&nbsp;</strong>This provides scope for the bean definition to single instance per Spring IoC container.</li><li><strong>Prototype:&nbsp;</strong>This provides scope for a single bean definition to have any number of object instances.</li><li><strong>Request:&nbsp;</strong>This provides scope for a bean&nbsp;definition to an HTTP-request.&nbsp;</li><li><strong>Session:&nbsp;</strong>This provides scope for a bean&nbsp;definition to an HTTP-session.&nbsp;</li><li><strong>Global-session:&nbsp;</strong>This provides scope for a bean&nbsp;definition to an Global HTTP-session.&nbsp;</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Spring Framework supports five scopes. They are: Singleton:&nbsp;This provides scope for the bean definition to single instance per Spring IoC container. Prototype:&nbsp;This provides scope for a single bean definition to have any number of object instances. Request:&nbsp;This provides scope for a bean&nbsp;definition to an HTTP-request.&nbsp; Session:&nbsp;This provides scope for a bean&nbsp;definition to an HTTP-session.&nbsp; [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2268"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2268"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2268/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2269,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2268/revisions/2269"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2268"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2268"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2268"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2270,
    "date": "2022-04-19T10:12:14",
    "date_gmt": "2022-04-19T10:12:14",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2270"
    },
    "modified": "2022-04-19T10:12:14",
    "modified_gmt": "2022-04-19T10:12:14",
    "slug": "what-is-the-bean-life-cycle-in-spring-bean-factory-container",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-the-bean-life-cycle-in-spring-bean-factory-container/",
    "title": {
      "rendered": "What is the Bean life cycle in Spring Bean Factory Container?"
    },
    "content": {
      "rendered": "\n<p>Bean life cycle in Spring Bean Factory Container is as follows:</p>\n\n\n\n<ol><li>The Spring container instantiates the bean from the bean\u2019s definition in the XML file.</li><li>Spring populates all of the properties using the dependency injection, as specified in the bean definition.</li><li>The factory calls&nbsp;setBeanName() by passing the bean\u2019s ID, if the bean implements the BeanNameAware interface.</li><li>The factory calls&nbsp;setBeanFactory() by passing an instance of itself, if the bean implements the BeanFactoryAware interface.</li><li>preProcessBeforeInitialization()&nbsp;methods are&nbsp;called if there are any BeanPostProcessors associated with the bean.</li><li>If an init-method is specified for the bean, then it will be called.</li><li>Finally, postProcessAfterInitialization()&nbsp;methods will be called if there are any BeanPostProcessors associated with the bean.</li></ol>\n\n\n\n<p>To understand it in better way check the below diagram:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2017/05/beanLifeCycle.png\" alt=\"beanLifeCycle - Spring Interview Questions - Edureka!\" class=\"wp-image-47703\"/></figure></div>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bean life cycle in Spring Bean Factory Container is as follows: The Spring container instantiates the bean from the bean\u2019s definition in the XML file. Spring populates all of the properties using the dependency injection, as specified in the bean definition. The factory calls&nbsp;setBeanName() by passing the bean\u2019s ID, if the bean implements the BeanNameAware [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2270"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2270"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2270/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2271,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2270/revisions/2271"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2270"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2270"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2270"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2272,
    "date": "2022-04-19T10:13:11",
    "date_gmt": "2022-04-19T10:13:11",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2272"
    },
    "modified": "2022-04-19T10:13:26",
    "modified_gmt": "2022-04-19T10:13:26",
    "slug": "explain-inner-beans-in-spring",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/explain-inner-beans-in-spring/",
    "title": {
      "rendered": "Explain inner beans in Spring."
    },
    "content": {
      "rendered": "\n<p>A bean can be declared&nbsp;as an inner bean only when it is&nbsp;used as a property of another bean. For defining a bean, the Spring\u2019s XML based configuration metadata provides the use of&nbsp;&lt;bean&gt;&nbsp;element inside the&nbsp;&lt;property&gt;&nbsp;or&nbsp;&lt;constructor-arg&gt;.&nbsp;Inner beans are always anonymous and they are always scoped as prototypes. For example,&nbsp;let\u2019s say we have one Student class having reference of&nbsp;Person&nbsp;class. Here we will be creating only one instance of&nbsp;Person&nbsp;class and use it inside Student.</p>\n\n\n\n<p>Here\u2019s a Student class followed by bean configuration file:</p>\n\n\n\n<p>Student.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student\n{\nprivate Person person;\n//Setters and Getters\n}\npublic class Person\n{\nprivate String name;\nprivate String address;\n//Setters and Getters\n}</code></pre>\n\n\n\n<p>studentbean.xml</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id=\u201cStudentBean\" class=\"com.edureka.Student\">\n&lt;property name=\"person\">\n&lt;!--This is inner bean -->\n&lt;bean class=\"com.edureka.Person\">\n&lt;property name=\"name\" value=\u201cScott\">&lt;/property>\n&lt;property name=\"address\" value=\u201cBangalore\">&lt;/property>\n&lt;/bean>\n&lt;/property>\n&lt;/bean></code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A bean can be declared&nbsp;as an inner bean only when it is&nbsp;used as a property of another bean. For defining a bean, the Spring\u2019s XML based configuration metadata provides the use of&nbsp;&lt;bean&gt;&nbsp;element inside the&nbsp;&lt;property&gt;&nbsp;or&nbsp;&lt;constructor-arg&gt;.&nbsp;Inner beans are always anonymous and they are always scoped as prototypes. For example,&nbsp;let\u2019s say we have one Student class having reference [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [84],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2272"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2272"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2272/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2273,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2272/revisions/2273"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2272"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2272"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2272"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]
