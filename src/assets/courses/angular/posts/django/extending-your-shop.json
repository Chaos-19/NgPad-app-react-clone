[
  {
    "id": 3899,
    "date": "2022-06-29T06:36:03",
    "date_gmt": "2022-06-29T06:36:03",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3899" },
    "modified": "2022-06-29T06:36:03",
    "modified_gmt": "2022-06-29T06:36:03",
    "slug": "creating-a-coupon-system",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/creating-a-coupon-system/",
    "title": { "rendered": "Creating a coupon system" },
    "content": {
      "rendered": "\n<p>Many online shops give out coupons to customers that can be redeemed for discounts on their purchases. An online coupon usually consists of a code that is given to users and is&nbsp;<a></a>valid for a specific time frame.</p>\n\n\n\n<p>You are going to create a coupon system for your shop. Your coupons will be valid for customers in a certain time frame. The coupons will not have any limitations in terms of the number of times they can be redeemed, and they will be applied to the total value of the shopping cart. For this functionality, you will need to create a model to store the coupon code, a valid time frame, and the discount to apply.</p>\n\n\n\n<p>Create a new application inside the&nbsp;<code>myshop</code>&nbsp;project using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py startapp coupons\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>settings.py</code>&nbsp;file of&nbsp;<code>myshop</code>&nbsp;and add the application to the&nbsp;<code>INSTALLED_APPS</code>&nbsp;setting, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;\n    <em># ...</em>\n    <strong>'coupons.apps.CouponsConfig',</strong>\n]\n</code></pre>\n\n\n\n<p>The new application is now active in your Django project.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Many online shops give out coupons to customers that can be redeemed for discounts on their purchases. An online coupon usually consists of a code that is given to users and is&nbsp;valid for a specific time frame. You are going to create a coupon system for your shop. Your coupons will be valid for customers&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/creating-a-coupon-system/\">Continue reading <span class=\"screen-reader-text\">Creating a coupon system</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3899" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3899"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3899/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3900,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3899/revisions/3900"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3899"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3899"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3899"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3901,
    "date": "2022-06-29T06:37:08",
    "date_gmt": "2022-06-29T06:37:08",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3901" },
    "modified": "2022-06-29T06:37:08",
    "modified_gmt": "2022-06-29T06:37:08",
    "slug": "building-the-coupon-model",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/building-the-coupon-model/",
    "title": { "rendered": "Building the coupon model" },
    "content": {
      "rendered": "\n<p>Let&#8217;s start&nbsp;<a></a>by creating the&nbsp;<code>Coupon</code>&nbsp;model. Edit the&nbsp;<code>models.py</code>&nbsp;file of the&nbsp;<code>coupons</code>&nbsp;application and add the following code to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.db import models\nfrom django.core.validators import MinValueValidator, \\\n                                   MaxValueValidator\nclass Coupon(models.Model):\n    code = models.CharField(max_length=50,\n                            unique=True)\n    valid_from = models.DateTimeField()\n    valid_to = models.DateTimeField()\n    discount = models.IntegerField(\n                   validators=&#91;MinValueValidator(0),\n                               MaxValueValidator(100)])\n    active = models.BooleanField()\n    def __str__(self):\n        return self.code\n</code></pre>\n\n\n\n<p>This is the model that you are going to use to store coupons. The&nbsp;<code>Coupon</code>&nbsp;model contains the following fields:</p>\n\n\n\n<ul><li><code>code</code>: The code that users have to enter in order to apply the coupon to their purchase.</li><li><code>valid_from</code>: The datetime value that indicates when the coupon becomes valid.</li><li><code>valid_to</code>: The datetime value that indicates when the coupon becomes invalid.</li><li><code>discount</code>: The discount rate to apply (this is a percentage, so it takes values from&nbsp;<code>0</code>&nbsp;to&nbsp;<code>100</code>). You use validators for this field to limit the minimum and maximum accepted values.</li><li><code>active</code>: A Boolean that indicates whether the coupon is active.</li></ul>\n\n\n\n<p>Run the following command to generate the initial migration for the&nbsp;<code>coupons</code>&nbsp;application:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py makemigrations\n</code></pre>\n\n\n\n<p>The output should include the following lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Migrations for 'coupons':\n  coupons/migrations/0001_initial.py:\n    - Create model Coupon\n</code></pre>\n\n\n\n<p>Then, execute the next command to apply migrations:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py migrate\n</code></pre>\n\n\n\n<p>You should see an output that includes the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Applying coupons.0001_initial... OK\n</code></pre>\n\n\n\n<p>The migrations&nbsp;<a></a>are now applied in the database. Let&#8217;s add the&nbsp;<code>Coupon</code>&nbsp;model to the administration site. Edit the&nbsp;<code>admin.py</code>&nbsp;file of the&nbsp;<code>coupons</code>&nbsp;application and add the following code to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin\nfrom .models import Coupon\n@admin.register(Coupon)\nclass CouponAdmin(admin.ModelAdmin):\n    list_display = &#91;'code', 'valid_from', 'valid_to',\n                    'discount', 'active']\n    list_filter = &#91;'active', 'valid_from', 'valid_to']\n    search_fields = &#91;'code']\n</code></pre>\n\n\n\n<p>The&nbsp;<code>Coupon</code>&nbsp;model is now registered in the administration site. Ensure that your local server is running with the command&nbsp;<code>python manage.py runserver</code>. Open&nbsp;<code>http://127.0.0.1:8000/admin/coupons/coupon/add/</code>&nbsp;in your browser.</p>\n\n\n\n<p>You should see the following form:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_01.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.1: The Add coupon form</p>\n\n\n\n<p>Fill in the&nbsp;<a></a>form to create a new coupon that is valid for the current date and make sure that you check the&nbsp;<strong>Active</strong>&nbsp;checkbox and click the&nbsp;<strong>SAVE</strong>&nbsp;button.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s start&nbsp;by creating the&nbsp;Coupon&nbsp;model. Edit the&nbsp;models.py&nbsp;file of the&nbsp;coupons&nbsp;application and add the following code to it: This is the model that you are going to use to store coupons. The&nbsp;Coupon&nbsp;model contains the following fields: code: The code that users have to enter in order to apply the coupon to their purchase. valid_from: The datetime value that&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/building-the-coupon-model/\">Continue reading <span class=\"screen-reader-text\">Building the coupon model</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3901" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3901"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3901/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3902,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3901/revisions/3902"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3901"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3901"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3901"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3903,
    "date": "2022-06-29T06:38:19",
    "date_gmt": "2022-06-29T06:38:19",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3903" },
    "modified": "2022-06-29T06:38:19",
    "modified_gmt": "2022-06-29T06:38:19",
    "slug": "applying-a-coupon-to-the-shopping-cart",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/applying-a-coupon-to-the-shopping-cart/",
    "title": { "rendered": "Applying a coupon to the shopping cart" },
    "content": {
      "rendered": "\n<p>You can store new coupons and make queries to retrieve existing coupons. Now you&nbsp;need a&nbsp;<a></a>way for customers to apply coupons to their purchases. The functionality to apply a coupon would be as follows:</p>\n\n\n\n<ol><li>The user adds products to the shopping cart.</li><li>The user can enter a coupon code in a form displayed on the shopping cart&nbsp;detail page.</li><li>When the user enters a coupon code and submits the form, you look for an existing coupon with the given code that is currently valid. You have to&nbsp;check that the coupon code matches the one entered by the user, that the&nbsp;<code>active</code>&nbsp;attribute is&nbsp;<code>True</code>, and that the current datetime is between the&nbsp;<code>valid_from</code>&nbsp;and&nbsp;<code>valid_to</code>&nbsp;values.</li><li>If a coupon is found, you save it in the user&#8217;s session and display the cart, including the discount applied to it and the updated total amount.</li><li>When the user places an order, you save the coupon to the given order.</li></ol>\n\n\n\n<p>Create a&nbsp;<a></a>new file inside the&nbsp;<code>coupons</code>&nbsp;application directory and name it&nbsp;<code>forms.py</code>. Add the following code to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms\nclass CouponApplyForm(forms.Form):\n    code = forms.CharField()\n</code></pre>\n\n\n\n<p>This is the form that you are going to use for the user to enter a coupon code. Edit the&nbsp;<code>views.py</code>&nbsp;file inside the&nbsp;<code>coupons</code>&nbsp;application and add the following code to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.shortcuts import render, redirect\nfrom django.utils import timezone\nfrom django.views.decorators.http import require_POST\nfrom .models import Coupon\nfrom .forms import CouponApplyForm\n@require_POST\ndef coupon_apply(request):\n    now = timezone.now()\n    form = CouponApplyForm(request.POST)\n    if form.is_valid():\n        code = form.cleaned_data&#91;'code']\n        try:\n            coupon = Coupon.objects.get(code__iexact=code,\n                                        valid_from__lte=now,\n                                        valid_to__gte=now,\n                                        active=True)\n            request.session&#91;'coupon_id'] = coupon.id\n        except Coupon.DoesNotExist:\n            request.session&#91;'coupon_id'] = None\n    return redirect('cart:cart_detail')\n</code></pre>\n\n\n\n<p>The&nbsp;<code>coupon_apply</code>&nbsp;view validates the coupon and stores it in the user&#8217;s session. You apply the&nbsp;<code>require_POST</code>&nbsp;decorator to this view to restrict it to&nbsp;<code>POST</code>&nbsp;requests. In the view, you perform the following tasks:</p>\n\n\n\n<ol><li>You instantiate the&nbsp;<code>CouponApplyForm</code>&nbsp;form using the posted data and check that the form is valid.</li><li>If the form is valid, you get the&nbsp;<code>code</code>&nbsp;entered by the user from the form&#8217;s&nbsp;<code>cleaned_data</code>&nbsp;dictionary. You try to retrieve the&nbsp;<code>Coupon</code>&nbsp;object with the given code. You use the&nbsp;<code>iexact</code>&nbsp;field lookup to perform a case-insensitive exact match. The coupon has to be currently active (<code>active=True</code>) and valid for the current datetime. You use Django&#8217;s&nbsp;<code>timezone.now()</code>&nbsp;function to get the current timezone-aware datetime and you compare it with the&nbsp;<code>valid_from</code>&nbsp;and&nbsp;<code>valid_to</code>&nbsp;fields performing&nbsp;<code>lte</code>&nbsp;(less than or equal to) and&nbsp;<code>gte</code>&nbsp;(greater than or equal to) field lookups, respectively.</li><li>You store the coupon ID in the user&#8217;s session.</li><li>You redirect the user to the&nbsp;<code>cart_detail</code>&nbsp;URL to display the cart with the coupon applied.</li></ol>\n\n\n\n<p>You need&nbsp;<a></a>a URL pattern for the&nbsp;<code>coupon_apply</code>&nbsp;view. Create a new file inside the&nbsp;<code>coupons</code>&nbsp;application directory and name it&nbsp;<code>urls.py</code>. Add the following code to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.urls import path\nfrom . import views\napp_name = 'coupons'\nurlpatterns = &#91;\n    path('apply/', views.coupon_apply, name='apply'),\n]\n</code></pre>\n\n\n\n<p>Then, edit the main&nbsp;<code>urls.py</code>&nbsp;of the&nbsp;<code>myshop</code>&nbsp;project and include the&nbsp;<code>coupons</code>&nbsp;URL patterns, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>urlpatterns = &#91;\n    # ...\n    <strong>path('coupons/', include('coupons.urls', namespace='coupons')),</strong>\n    path('', include('shop.urls', namespace='shop')),\n]\n</code></pre>\n\n\n\n<p>Remember to place this pattern before the&nbsp;<code>shop.urls</code>&nbsp;pattern.</p>\n\n\n\n<p>Now, edit the&nbsp;<code>cart.py</code>&nbsp;file of the&nbsp;<code>cart</code>&nbsp;application. Include the following import:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from coupons.models import Coupon\n</code></pre>\n\n\n\n<p>Add the following code to the end of the&nbsp;<code>__init__()</code>&nbsp;method of the&nbsp;<code>Cart</code>&nbsp;class to&nbsp;initialize the coupon from the current session:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Cart(object):\n    def __init__(self, request):\n        <em># ...</em>\n        <strong><em># store current applied coupon</em></strong>\n        <strong>self.coupon_id = self.session.get('coupon_id')</strong>\n</code></pre>\n\n\n\n<p>In this code, you try to get the&nbsp;<code>coupon_id</code>&nbsp;session key from the current session and store its value in the&nbsp;<code>Cart</code>&nbsp;object. Add the following methods to the&nbsp;<code>Cart</code>&nbsp;object:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Cart(object):\n    <em># ...</em>\n    <strong>@property</strong>\n    <strong>def coupon(self):</strong>\n        <strong>if self.coupon_id:</strong>\n            <strong>try:</strong>\n                <strong>return Coupon.objects.get(id=self.coupon_id)</strong>\n            <strong>except Coupon.DoesNotExist:</strong>\n               <strong> pass</strong>\n        <strong>return None</strong>\n    <strong>def get_discount(self):</strong>\n        <strong>if self.coupon:</strong>\n            <strong>return (self.coupon.discount / Decimal(100)) \\</strong>\n                <strong>* self.get_total_price()</strong>\n        <strong>return Decimal(0)</strong>\n    <strong>def get_total_price_after_discount(self):</strong>\n        <strong>return self.get_total_price() - self.get_discount()</strong>\n</code></pre>\n\n\n\n<p>These&nbsp;<a></a>methods are as follows:</p>\n\n\n\n<ul><li><code>coupon()</code>: You define this method as a&nbsp;<code>property</code>. If the cart contains a&nbsp;<code>coupon_id</code>&nbsp;attribute, the&nbsp;<code>Coupon</code>&nbsp;object with the given ID is returned.</li><li><code>get_discount()</code>: If the cart contains a coupon, you retrieve its discount rate&nbsp;and return the amount to be deducted from the total amount of the cart.</li><li><code>get_total_price_after_discount()</code>: You return the total amount of the cart after deducting the amount returned by the&nbsp;<code>get_discount()</code>&nbsp;method.</li></ul>\n\n\n\n<p>The&nbsp;<code>Cart</code>&nbsp;class is now prepared to handle a coupon applied to the current session and apply the corresponding discount.</p>\n\n\n\n<p>Let&#8217;s include the coupon system in the cart&#8217;s detail view. Edit the&nbsp;<code>views.py</code>&nbsp;file of the&nbsp;<code>cart</code>&nbsp;application and add the following import at the top of the file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from coupons.forms import CouponApplyForm\n</code></pre>\n\n\n\n<p>Further down, edit the&nbsp;<code>cart_detail</code>&nbsp;view and add the new form to it, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def cart_detail(request):\n    cart = Cart(request)\n    for item in cart:\n        item&#91;'update_quantity_form'] = CartAddProductForm(initial={\n                            'quantity': item&#91;'quantity'],\n                            'override': True})\n    <strong>coupon_apply_form = CouponApplyForm()</strong>\n    return render(request,\n                  'cart/detail.html',\n                  {'cart': cart<strong>,</strong>\n                   <strong>'coupon_apply_form': coupon_apply_form</strong>})\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>cart/detail.html</code>&nbsp;template of the&nbsp;<code>cart</code>&nbsp;application and locate the following lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tr class=\"total\"&gt;\n  &lt;td&gt;Total&lt;/td&gt;\n  &lt;td colspan=\"4\"&gt;&lt;/td&gt;\n  &lt;td class=\"num\"&gt;${{ cart.get_total_price }}&lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n\n\n\n<p>Replace&nbsp;<a></a>them with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>{% if cart.coupon %}</strong>\n<strong>  &lt;tr class=\"subtotal\"&gt;</strong>\n<strong>    &lt;td&gt;Subtotal&lt;/td&gt;</strong>\n<strong>    &lt;td colspan=\"4\"&gt;&lt;/td&gt;</strong>\n<strong>    &lt;td class=\"num\"&gt;${{ cart.get_total_price|floatformat:2 }}&lt;/td&gt;</strong>\n<strong>  &lt;/tr&gt;</strong>\n<strong>  &lt;tr&gt;</strong>\n<strong>    &lt;td&gt;</strong>\n<strong>      \"{{ cart.coupon.code }}\" coupon</strong>\n<strong>      ({{ cart.coupon.discount }}% off)</strong>\n<strong>    &lt;/td&gt;</strong>\n<strong>    &lt;td colspan=\"4\"&gt;&lt;/td&gt;</strong>\n<strong>    &lt;td class=\"num neg\"&gt;</strong>\n<strong>      - ${{ cart.get_discount|floatformat:2 }}</strong>\n<strong>    &lt;/td&gt;</strong>\n<strong>  &lt;/tr&gt;</strong>\n<strong>{% endif %}</strong>\n&lt;tr class=\"total\"&gt;\n  &lt;td&gt;Total&lt;/td&gt;\n  &lt;td colspan=\"4\"&gt;&lt;/td&gt;\n  &lt;td class=\"num\"&gt;\n    ${{ cart.<strong>get_total_price_after_discount|floatformat:2</strong> }}\n  &lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n\n\n\n<p>This is the code for displaying an optional coupon and its discount rate. If the cart contains a coupon, you display a first row, including the total amount of the cart as the subtotal. Then, you use a second row to display the current coupon applied to the cart. Finally, you display the total price, including any discount, by calling the&nbsp;<code>get_total_price_after_discount()</code>&nbsp;method of the&nbsp;<code>cart</code>&nbsp;object.</p>\n\n\n\n<p>In the same file, include the following code after the&nbsp;<code>&lt;/table&gt;</code>&nbsp;HTML tag:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p&gt;Apply a coupon:&lt;/p&gt;\n&lt;form action=\"{% url \"coupons:apply\" %}\" method=\"post\"&gt;\n  {{ coupon_apply_form }}\n  &lt;input type=\"submit\" value=\"Apply\"&gt;\n  {% csrf_token %}\n&lt;/form&gt;\n</code></pre>\n\n\n\n<p>This will&nbsp;<a></a>display the form to enter a coupon code and apply it to the current cart.</p>\n\n\n\n<p>Open&nbsp;<code>http://127.0.0.1:8000/</code>&nbsp;in your browser, add a product to the cart, and apply the coupon you created by entering its code in the form. You should see that the cart displays the coupon discount as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_02.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.2: The cart detail page, including coupon details and a form to apply a coupon</p>\n\n\n\n<p>Let&#8217;s add the coupon to the next step of the purchase process. Edit the&nbsp;<code>orders/order/create.html</code>&nbsp;template of the&nbsp;<code>orders</code>&nbsp;application and locate the following&nbsp;lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul&gt;\n  {% for item in cart %}\n    &lt;li&gt;\n      {{ item.quantity }}x {{ item.product.name }}\n      &lt;span&gt;${{ item.total_price }}&lt;/span&gt;\n    &lt;/li&gt;\n  {% endfor %}\n&lt;/ul&gt;\n</code></pre>\n\n\n\n<p>Replace them with the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul&gt;\n  {% for item in cart %}\n    &lt;li&gt;\n      {{ item.quantity }}x {{ item.product.name }}\n      &lt;span&gt;${{ item.total_price<strong>|floatformat:2</strong> }}&lt;/span&gt;\n    &lt;/li&gt;\n  {% endfor %}\n  <strong>{% if cart.coupon %}</strong>\n<strong>    &lt;li&gt;</strong>\n<strong>      \"{{ cart.coupon.code }}\" ({{ cart.coupon.discount }}% off)</strong>\n<strong>      &lt;span class=\"neg\"&gt;- ${{ cart.get_discount|floatformat:2 }}&lt;/span&gt;</strong>\n<strong>    &lt;/li&gt;</strong>\n<strong>  {% endif %}</strong>\n&lt;/ul&gt;\n</code></pre>\n\n\n\n<p>The order&nbsp;<a></a>summary should now include the coupon applied, if there is one. Now find the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p&gt;Total: ${{ cart.get_total_price }}&lt;/p&gt;\n</code></pre>\n\n\n\n<p>Replace it with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p&gt;Total: ${{ cart.<strong>get_total_price_after_discount|floatformat:2</strong> }}&lt;/p&gt;\n</code></pre>\n\n\n\n<p>By doing this, the total price will also be calculated by applying the discount of the coupon.</p>\n\n\n\n<p>Open&nbsp;<code>http://127.0.0.1:8000/orders/create/</code>&nbsp;in your browser. You should see that the order summary includes the applied coupon, as follows:</p>\n\n\n\n<p>Figure 9.3: The order summary, including the coupon applied to the cart</p>\n\n\n\n<p>Users can&nbsp;<a></a>now apply coupons to their shopping cart. However, you still need to store coupon information in the order that it is created when users check out the cart.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_03.png\" alt=\"\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You can store new coupons and make queries to retrieve existing coupons. Now you&nbsp;need a&nbsp;way for customers to apply coupons to their purchases. The functionality to apply a coupon would be as follows: The user adds products to the shopping cart. The user can enter a coupon code in a form displayed on the shopping&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/applying-a-coupon-to-the-shopping-cart/\">Continue reading <span class=\"screen-reader-text\">Applying a coupon to the shopping cart</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3903" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3903"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3903/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3904,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3903/revisions/3904"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3903"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3903"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3903"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3905,
    "date": "2022-06-29T06:39:03",
    "date_gmt": "2022-06-29T06:39:03",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3905" },
    "modified": "2022-06-29T06:39:03",
    "modified_gmt": "2022-06-29T06:39:03",
    "slug": "applying-coupons-to-orders",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/applying-coupons-to-orders/",
    "title": { "rendered": "Applying coupons to orders" },
    "content": {
      "rendered": "\n<p>You are&nbsp;<a></a>going to store the coupon that was applied to each order. First, you need to&nbsp;modify the&nbsp;<code>Order</code>&nbsp;model to store the related&nbsp;<code>Coupon</code>&nbsp;object, if there is one.</p>\n\n\n\n<p>Edit the&nbsp;<code>models.py</code>&nbsp;file of the&nbsp;<code>orders</code>&nbsp;application and add the following imports to&nbsp;it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from decimal import Decimal\nfrom django.core.validators import MinValueValidator, \\\n                                   MaxValueValidator\nfrom coupons.models import Coupon\n</code></pre>\n\n\n\n<p>Then, add the following fields to the&nbsp;<code>Order</code>&nbsp;model:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Order(models.Model):\n   # ...\n    <strong>coupon = models.ForeignKey(Coupon,</strong>\n                               <strong>related_name='orders',</strong>\n                               <strong>null=True,</strong>\n                               <strong>blank=True,</strong>\n                               <strong>on_delete=models.SET_NULL)</strong>\n    <strong>discount = models.IntegerField(default=0,</strong>\n                                  <strong>validators=&#91;MinValueValidator(0),</strong>\n                                      <strong>MaxValueValidator(100)])</strong>\n</code></pre>\n\n\n\n<p>These fields allow you to store an optional coupon for the order and the discount percentage applied with the coupon. The discount is stored in the related&nbsp;<code>Coupon</code>&nbsp;object, but you include it in the&nbsp;<code>Order</code>&nbsp;model to preserve it if the coupon is modified or deleted. You set&nbsp;<code>on_delete</code>&nbsp;to&nbsp;<code>models.SET_NULL</code>&nbsp;so that if the coupon gets deleted, the&nbsp;<code>coupon</code>&nbsp;field is set to&nbsp;<code>Null</code>, but the discount is preserved.</p>\n\n\n\n<p>You need to create a migration to include the new fields of the&nbsp;<code>Order</code>&nbsp;model. Run the following command from the command line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py makemigrations\n</code></pre>\n\n\n\n<p>You should see an output like the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Migrations for 'orders':\n  orders/migrations/0003_auto_20191213_1618.py:\n    - Add field coupon to order\n    - Add field discount to order\n</code></pre>\n\n\n\n<p>Apply&nbsp;<a></a>the new migration with the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py migrate orders\n</code></pre>\n\n\n\n<p>You should see a confirmation indicating that the new migration has been applied. The&nbsp;<code>Order</code>&nbsp;model field changes are now synced with the database.</p>\n\n\n\n<p>Go back to the&nbsp;<code>models.py</code>&nbsp;file and change the&nbsp;<code>get_total_cost()</code>&nbsp;method of the&nbsp;<code>Order</code>&nbsp;model, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Order(models.Model):\n    <em># ...</em>\n    def get_total_cost(self):\n        <strong>total_cost = </strong>sum(item.get_cost() for item in self.items.all())\n        <strong>return total_cost - total_cost * \\</strong>\n            <strong>(self.discount / Decimal(100))</strong>\n</code></pre>\n\n\n\n<p>The&nbsp;<code>get_total_cost()</code>&nbsp;method of the&nbsp;<code>Order</code>&nbsp;model will now take into account the discount applied, if there is one.</p>\n\n\n\n<p>Edit the&nbsp;<code>views.py</code>&nbsp;file of the&nbsp;<code>orders</code>&nbsp;application and modify the&nbsp;<code>order_create</code>&nbsp;view to save the related coupon and its discount when creating a new order. Find the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>order = form.save()\n</code></pre>\n\n\n\n<p>Replace it with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>order = form.save(<strong>commit=False</strong>)\n<strong>if cart.coupon:</strong>\n    <strong>order.coupon = cart.coupon</strong>\n    <strong>order.discount = cart.coupon.discount</strong>\n<strong>order.save()</strong>\n</code></pre>\n\n\n\n<p>In the new code, you create an&nbsp;<code>Order</code>&nbsp;object using the&nbsp;<code>save()</code>&nbsp;method of the&nbsp;<code>OrderCreateForm</code>&nbsp;form. You avoid saving it to the database yet by using&nbsp;<code>commit=False</code>. If the cart contains a coupon, you store the related coupon and the discount that was applied. Then, you save the&nbsp;<code>order</code>&nbsp;object to the database.</p>\n\n\n\n<p>Make sure that&nbsp;<a></a>the development server is running with the command&nbsp;<code>python manage.py</code>&nbsp;<code>runserver</code>. Open&nbsp;<code>http://127.0.0.1:8000/</code>&nbsp;in your browser and complete a&nbsp;purchase using the coupon you created.</p>\n\n\n\n<p>When you finish a successful purchase, you can go to&nbsp;<code>http://127.0.0.1:8000/admin/orders/order/</code>&nbsp;and check that the&nbsp;<code>order</code>&nbsp;object contains the coupon and the&nbsp;applied discount, as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_04.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.4: The order edit form, including the coupon and discount applied</p>\n\n\n\n<p>You can also modify the administration order detail template and the order PDF invoice to display the applied coupon in the same way you did for the cart.</p>\n\n\n\n<p>Next, you are going to add internationalization to your project.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You are&nbsp;going to store the coupon that was applied to each order. First, you need to&nbsp;modify the&nbsp;Order&nbsp;model to store the related&nbsp;Coupon&nbsp;object, if there is one. Edit the&nbsp;models.py&nbsp;file of the&nbsp;orders&nbsp;application and add the following imports to&nbsp;it: Then, add the following fields to the&nbsp;Order&nbsp;model: These fields allow you to store an optional coupon for the order and&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/applying-coupons-to-orders/\">Continue reading <span class=\"screen-reader-text\">Applying coupons to orders</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3905" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3905"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3905/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3906,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3905/revisions/3906"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3905"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3905"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3905"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3907,
    "date": "2022-06-29T06:39:30",
    "date_gmt": "2022-06-29T06:39:30",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3907" },
    "modified": "2022-06-29T06:39:30",
    "modified_gmt": "2022-06-29T06:39:30",
    "slug": "adding-internationalization-and-localization",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/adding-internationalization-and-localization/",
    "title": { "rendered": "Adding internationalization and localization" },
    "content": {
      "rendered": "\n<p>Django offers full internationalization and localization support. It allows you to translate your application into multiple languages and it handles locale-specific formatting for dates, times, numbers, and timezones. Let&#8217;s clarify the difference between internationalization and localization. <strong>Internationalization</strong> (frequently abbreviated to <strong>i18n</strong>) is the process of adapting software for the potential use of different languages and locales, so that it isn&#8217;t hardwired to a specific language or locale. <strong>Localization</strong> (abbreviated to <strong>l10n</strong>) is the process of actually translating the software and adapting it to a particular locale. Django itself is translated into more than 50 languages using its internationalization framework.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django offers full internationalization and localization support. It allows you to translate your application into multiple languages and it handles locale-specific formatting for dates, times, numbers, and timezones. Let&#8217;s clarify the difference between internationalization and localization. Internationalization (frequently abbreviated to i18n) is the process of adapting software for the potential use of different languages and locales, so that it isn&#8217;t hardwired to&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/adding-internationalization-and-localization/\">Continue reading <span class=\"screen-reader-text\">Adding internationalization and localization</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3907" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3907"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3907/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3908,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3907/revisions/3908"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3907"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3907"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3907"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3910,
    "date": "2022-06-29T06:39:52",
    "date_gmt": "2022-06-29T06:39:52",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3910" },
    "modified": "2022-06-29T06:39:52",
    "modified_gmt": "2022-06-29T06:39:52",
    "slug": "internationalization-with-django",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/internationalization-with-django/",
    "title": { "rendered": "Internationalization with Django" },
    "content": {
      "rendered": "\n<p>The internationalization framework allows you to easily mark strings for translation, both in Python code and in your templates. It relies on the GNU gettext toolset to generate and manage message files. A <strong>message file</strong> is a plain text file that represents a language. It contains a part, or all, of the translation strings found in your application and their respective translations for a single language. Message files have the <code>.po</code> extension. Once the translation is done, message files are compiled to offer rapid access to translated strings. The compiled translation files have the <code>.mo</code> extension.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The internationalization framework allows you to easily mark strings for translation, both in Python code and in your templates. It relies on the GNU gettext toolset to generate and manage message files. A message file is a plain text file that represents a language. It contains a part, or all, of the translation strings found in your application and their&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/internationalization-with-django/\">Continue reading <span class=\"screen-reader-text\">Internationalization with Django</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3910" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3910"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3910/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3911,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3910/revisions/3911"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3910"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3910"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3910"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3912,
    "date": "2022-06-29T06:40:32",
    "date_gmt": "2022-06-29T06:40:32",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3912" },
    "modified": "2022-06-29T06:40:32",
    "modified_gmt": "2022-06-29T06:40:32",
    "slug": "internationalization-and-localization-settings",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/internationalization-and-localization-settings/",
    "title": { "rendered": "Internationalization and localization settings" },
    "content": {
      "rendered": "\n<p>Django provides&nbsp;<a></a>several settings for internationalization. The following&nbsp;<a></a>settings are&nbsp;the most relevant ones:</p>\n\n\n\n<ul><li><code>USE_I18N</code>: A Boolean that specifies whether Django&#8217;s translation system is enabled. This is <code>True</code> by default.</li><li><code>USE_L10N</code>: A Boolean indicating whether localized formatting is enabled. When active, localized formats are used to represent dates and numbers. This is <code>False</code> by default.</li><li><code>USE_TZ</code>: A Boolean that specifies whether datetimes are timezone-aware. When you create a project with the <code>startproject</code> command, this is set to <code>True</code>.</li><li><code>LANGUAGE_CODE</code>: The default language code for the project. This is in standard language ID format, for example, <code>'en-us'</code> for American English, or <code>'en-gb'</code> for British English. This setting requires <code>USE_I18N</code> to be set to <code>True</code> in order to take effect. You can find a list of valid language IDs at http://www.i18nguy.com/unicode/language-identifiers.html.</li><li><code>LANGUAGES</code>: A tuple that contains available languages for the project. They come in two tuples of a <strong>language code</strong> and <strong>language name</strong>. You can see the list of available languages at <code>django.conf.global_settings</code>. When you choose which languages your site will be available in, you set <code>LANGUAGES</code> to a subset of that list.</li><li><code>LOCALE_PATHS</code>: A list of directories where Django looks for message files containing translations for the project.</li><li><code>TIME_ZONE</code>: A string that represents the timezone for the project. This is set to <code>'UTC'</code> when you create a new project using the <code>startproject</code> command. You can set it to any other timezone, such as <code>'Europe/Madrid'</code>.</li></ul>\n\n\n\n<p>These are some of the internationalization and localization settings available. You can find the full list at https://docs.djangoproject.com/en/3.0/ref/settings/#globalization-i18n-l10n.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django provides&nbsp;several settings for internationalization. The following&nbsp;settings are&nbsp;the most relevant ones: USE_I18N: A Boolean that specifies whether Django&#8217;s translation system is enabled. This is True by default. USE_L10N: A Boolean indicating whether localized formatting is enabled. When active, localized formats are used to represent dates and numbers. This is False by default. USE_TZ: A Boolean that specifies whether datetimes are&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/internationalization-and-localization-settings/\">Continue reading <span class=\"screen-reader-text\">Internationalization and localization settings</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3912" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3912"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3912/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3913,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3912/revisions/3913"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3912"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3912"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3912"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3914,
    "date": "2022-06-29T06:41:03",
    "date_gmt": "2022-06-29T06:41:03",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3914" },
    "modified": "2022-06-29T06:41:03",
    "modified_gmt": "2022-06-29T06:41:03",
    "slug": "internationalization-management-commands",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/internationalization-management-commands/",
    "title": { "rendered": "Internationalization management commands" },
    "content": {
      "rendered": "\n<p>Django&nbsp;<a></a>includes the following management commands to manage translations:</p>\n\n\n\n<ul><li><code>makemessages</code>: This runs over the source tree to find all strings marked for translation and creates or updates the&nbsp;<code>.po</code>&nbsp;message files in the&nbsp;<code>locale</code>&nbsp;directory. A single&nbsp;<code>.po</code>&nbsp;file is created for each language.</li><li><code>compilemessages</code>: This compiles the existing&nbsp;<code>.po</code>&nbsp;message files to&nbsp;<code>.mo</code>&nbsp;files that are used to retrieve translations.</li></ul>\n\n\n\n<p>You will need the gettext toolkit to be able to create, update, and compile message files. Most Linux distributions include the gettext toolkit. If you are using macOS, probably the simplest way to install it is via Homebrew, at https://brew.sh/, with the command <code>brew install gettext</code>. You might also need to force link it with the command <code>brew link --force gettext</code>. For Windows, follow the steps at https://docs.djangoproject.com/en/3.0/topics/i18n/translation/#gettext-on-windows.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django&nbsp;includes the following management commands to manage translations: makemessages: This runs over the source tree to find all strings marked for translation and creates or updates the&nbsp;.po&nbsp;message files in the&nbsp;locale&nbsp;directory. A single&nbsp;.po&nbsp;file is created for each language. compilemessages: This compiles the existing&nbsp;.po&nbsp;message files to&nbsp;.mo&nbsp;files that are used to retrieve translations. You will need the gettext&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/internationalization-management-commands/\">Continue reading <span class=\"screen-reader-text\">Internationalization management commands</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3914" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3914"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3914/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3915,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3914/revisions/3915"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3914"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3914"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3914"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3916,
    "date": "2022-06-29T06:41:30",
    "date_gmt": "2022-06-29T06:41:30",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3916" },
    "modified": "2022-06-29T06:41:30",
    "modified_gmt": "2022-06-29T06:41:30",
    "slug": "how-to-add-translations-to-a-django-project",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-to-add-translations-to-a-django-project/",
    "title": { "rendered": "How to add translations to a Django project" },
    "content": {
      "rendered": "\n<p>Let&#8217;s take&nbsp;<a></a>a look at the process of internationalizing your project. You will need to do the following:</p>\n\n\n\n<ol><li>Mark strings for translation in your Python code and your templates</li><li>Run the&nbsp;<code>makemessages</code>&nbsp;command to create or update message files that include all translation strings from your code</li><li>Translate the strings contained in the message files and compile them using the&nbsp;<code>compilemessages</code>&nbsp;management command</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s take&nbsp;a look at the process of internationalizing your project. You will need to do the following: Mark strings for translation in your Python code and your templates Run the&nbsp;makemessages&nbsp;command to create or update message files that include all translation strings from your code Translate the strings contained in the message files and compile them&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/how-to-add-translations-to-a-django-project/\">Continue reading <span class=\"screen-reader-text\">How to add translations to a Django project</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3916" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3916"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3916/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3917,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3916/revisions/3917"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3916"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3916"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3916"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3918,
    "date": "2022-06-29T06:41:54",
    "date_gmt": "2022-06-29T06:41:54",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3918" },
    "modified": "2022-06-29T06:41:54",
    "modified_gmt": "2022-06-29T06:41:54",
    "slug": "how-django-determines-the-current-language",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-django-determines-the-current-language/",
    "title": { "rendered": "How Django determines the current language" },
    "content": {
      "rendered": "\n<p>Django comes&nbsp;<a></a>with a middleware that determines the current language based on the request data. This is the&nbsp;<code>LocaleMiddleware</code>&nbsp;middleware that resides in&nbsp;<code>django.middleware.locale.LocaleMiddleware</code>&nbsp;performs the following tasks:</p>\n\n\n\n<ol><li>If you are using&nbsp;<code>i18n_patterns</code>, that is, you are using translated URL patterns, it looks for a language prefix in the requested URL to determine the&nbsp;current language.</li><li>If no language prefix is found, it looks for an existing&nbsp;<code>LANGUAGE_SESSION_KEY</code>&nbsp;in the current user&#8217;s session.</li><li>If the language is not set in the session, it looks for an existing cookie with the current language. A custom name for this cookie can be provided in the&nbsp;<code>LANGUAGE_COOKIE_NAME</code>&nbsp;setting. By default, the name for this cookie is&nbsp;<code>django_language</code>.</li><li>If no cookie is found, it looks for the&nbsp;<code>Accept-Language</code>&nbsp;HTTP header of&nbsp;the&nbsp;request.</li><li>If the&nbsp;<code>Accept-Language</code>&nbsp;header does not specify a language, Django uses the&nbsp;language defined in the&nbsp;<code>LANGUAGE_CODE</code>&nbsp;setting.</li></ol>\n\n\n\n<p>By default, Django will&nbsp;<a></a>use the language defined in the&nbsp;<code>LANGUAGE_CODE</code>&nbsp;setting unless you are using&nbsp;<code>LocaleMiddleware</code>. The process described here only applies when using this middleware.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django comes&nbsp;with a middleware that determines the current language based on the request data. This is the&nbsp;LocaleMiddleware&nbsp;middleware that resides in&nbsp;django.middleware.locale.LocaleMiddleware&nbsp;performs the following tasks: If you are using&nbsp;i18n_patterns, that is, you are using translated URL patterns, it looks for a language prefix in the requested URL to determine the&nbsp;current language. If no language prefix is found,&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/how-django-determines-the-current-language/\">Continue reading <span class=\"screen-reader-text\">How Django determines the current language</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3918" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3918"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3918/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3919,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3918/revisions/3919"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3918"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3918"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3918"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3920,
    "date": "2022-06-29T06:42:37",
    "date_gmt": "2022-06-29T06:42:37",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3920" },
    "modified": "2022-06-29T06:42:37",
    "modified_gmt": "2022-06-29T06:42:37",
    "slug": "preparing-your-project-for-internationalization",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/preparing-your-project-for-internationalization/",
    "title": { "rendered": "Preparing your project for internationalization" },
    "content": {
      "rendered": "\n<p>Let&#8217;s prepare your project to use different languages. You are going to create an English and a Spanish&nbsp;<a></a>version for your shop. Edit the&nbsp;<code>settings.py</code>&nbsp;file of your project and add the following&nbsp;<code>LANGUAGES</code>&nbsp;setting to it. Place it next to the&nbsp;<code>LANGUAGE_CODE</code>&nbsp;setting:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>LANGUAGES = (\n    ('en', 'English'),\n    ('es', 'Spanish'),\n)\n</code></pre>\n\n\n\n<p>The&nbsp;<code>LANGUAGES</code>&nbsp;setting contains two tuples that consist of a language code and a&nbsp;name. Language codes can be locale-specific, such as&nbsp;<code>en-us</code>&nbsp;or&nbsp;<code>en-gb</code>, or generic, such as&nbsp;<code>en</code>. With this setting, you specify that your application will only be available in English and Spanish. If you don&#8217;t define a custom&nbsp;<code>LANGUAGES</code>&nbsp;setting, the site will be available in all the languages that Django is translated into.</p>\n\n\n\n<p>Make your&nbsp;<code>LANGUAGE_CODE</code>&nbsp;setting look as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>LANGUAGE_CODE = 'en'\n</code></pre>\n\n\n\n<p>Add&nbsp;<code>'django.middleware.locale.LocaleMiddleware'</code>&nbsp;to the&nbsp;<code>MIDDLEWARE</code>&nbsp;setting. Make sure that this middleware comes after&nbsp;<code>SessionMiddleware</code>&nbsp;because&nbsp;<code>LocaleMiddleware</code>&nbsp;needs to use session data. It also has to be placed before&nbsp;<code>CommonMiddleware</code>&nbsp;because the latter needs an active language to resolve the requested URL. The&nbsp;<code>MIDDLEWARE</code>&nbsp;setting should now look as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>MIDDLEWARE = &#91;\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    <strong>'django.middleware.locale.LocaleMiddleware',</strong>\n    'django.middleware.common.CommonMiddleware',\n    <em># ...</em>\n]\n</code></pre>\n\n\n\n<p>The order&nbsp;<a></a>of middleware classes is very important because each middleware can depend on data set by other middleware executed previously. Middleware is applied for requests in order of&nbsp;appearance in&nbsp;<code>MIDDLEWARE</code>, and in reverse order for responses.</p>\n\n\n\n<p>Create the following directory structure inside the main project directory, next to the&nbsp;<code>manage.py</code>&nbsp;file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>locale/\n    en/\n    es/\n</code></pre>\n\n\n\n<p>The&nbsp;<code>locale</code>&nbsp;directory is the place where message files for your application will reside. Edit the&nbsp;<code>settings.py</code>&nbsp;file again and add the following setting to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>LOCALE_PATHS = (\n    os.path.join(BASE_DIR, 'locale/'),\n)\n</code></pre>\n\n\n\n<p>The&nbsp;<code>LOCALE_PATHS</code>&nbsp;setting specifies the directories where Django has to look for translation files. Locale paths that appear first have the highest precedence.</p>\n\n\n\n<p>When you use the&nbsp;<code>makemessages</code>&nbsp;command from your project directory, message files will be generated in the&nbsp;<code>locale/</code>&nbsp;path you created. However, for applications that contain a&nbsp;<code>locale/</code>&nbsp;directory, message files will be generated in that directory.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s prepare your project to use different languages. You are going to create an English and a Spanish&nbsp;version for your shop. Edit the&nbsp;settings.py&nbsp;file of your project and add the following&nbsp;LANGUAGES&nbsp;setting to it. Place it next to the&nbsp;LANGUAGE_CODE&nbsp;setting: The&nbsp;LANGUAGES&nbsp;setting contains two tuples that consist of a language code and a&nbsp;name. Language codes can be locale-specific, such&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/preparing-your-project-for-internationalization/\">Continue reading <span class=\"screen-reader-text\">Preparing your project for internationalization</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3920" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3920"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3920/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3921,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3920/revisions/3921"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3920"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3920"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3920"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3922,
    "date": "2022-06-29T06:43:02",
    "date_gmt": "2022-06-29T06:43:02",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3922" },
    "modified": "2022-06-29T06:43:02",
    "modified_gmt": "2022-06-29T06:43:02",
    "slug": "translating-python-code",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-python-code/",
    "title": { "rendered": "Translating Python code" },
    "content": {
      "rendered": "\n<p>To translate&nbsp;<a></a>literals in your Python code, you can mark strings for translation using the&nbsp;<code>gettext()</code>&nbsp;function included in&nbsp;<code>django.utils.translation</code>. This function translates the message and returns a string. The convention is to import this function&nbsp;as a shorter alias named&nbsp;<code>_</code>&nbsp;(underscore character).</p>\n\n\n\n<p>You can find all the documentation about translations at https://docs.djangoproject.com/en/3.0/topics/i18n/translation/.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>To translate&nbsp;literals in your Python code, you can mark strings for translation using the&nbsp;gettext()&nbsp;function included in&nbsp;django.utils.translation. This function translates the message and returns a string. The convention is to import this function&nbsp;as a shorter alias named&nbsp;_&nbsp;(underscore character). You can find all the documentation about translations at https://docs.djangoproject.com/en/3.0/topics/i18n/translation/.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3922" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3922"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3922/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3923,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3922/revisions/3923"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3922"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3922"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3922"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3924,
    "date": "2022-06-29T06:43:21",
    "date_gmt": "2022-06-29T06:43:21",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3924" },
    "modified": "2022-06-29T06:43:21",
    "modified_gmt": "2022-06-29T06:43:21",
    "slug": "standard-translations",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/standard-translations/",
    "title": { "rendered": "Standard translations" },
    "content": {
      "rendered": "\n<p>The following&nbsp;<a></a>code shows how to mark a string for translation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.utils.translation import gettext as _\noutput = _('Text to be translated.')\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The following&nbsp;code shows how to mark a string for translation:</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3924" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3924"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3924/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3925,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3924/revisions/3925"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3924"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3924"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3924"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3926,
    "date": "2022-06-29T06:43:43",
    "date_gmt": "2022-06-29T06:43:43",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3926" },
    "modified": "2022-06-29T06:43:43",
    "modified_gmt": "2022-06-29T06:43:43",
    "slug": "lazy-translations",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/lazy-translations/",
    "title": { "rendered": "Lazy translations" },
    "content": {
      "rendered": "\n<p>Django includes&nbsp;<strong>lazy</strong>&nbsp;versions for all of its translation functions, which have the suffix&nbsp;<code>_lazy()</code>. When using the lazy functions, strings are translated when the value is accessed, rather than when the function is called (this is why they are translated&nbsp;<strong>lazily</strong>). The lazy&nbsp;<a></a>translation functions come in handy when strings marked for translation are in paths that are executed when modules are loaded.</p>\n\n\n\n<p>Using&nbsp;<code>gettext_lazy()</code>&nbsp;instead of&nbsp;<code>gettext()</code>&nbsp;means that strings are translated when the value is accessed. Django offers a lazy version for all translation functions.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django includes&nbsp;lazy&nbsp;versions for all of its translation functions, which have the suffix&nbsp;_lazy(). When using the lazy functions, strings are translated when the value is accessed, rather than when the function is called (this is why they are translated&nbsp;lazily). The lazy&nbsp;translation functions come in handy when strings marked for translation are in paths that are executed&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/lazy-translations/\">Continue reading <span class=\"screen-reader-text\">Lazy translations</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3926" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3926"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3926/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3927,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3926/revisions/3927"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3926"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3926"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3926"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3928,
    "date": "2022-06-29T06:44:05",
    "date_gmt": "2022-06-29T06:44:05",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3928" },
    "modified": "2022-06-29T06:44:05",
    "modified_gmt": "2022-06-29T06:44:05",
    "slug": "translations-including-variables",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translations-including-variables/",
    "title": { "rendered": "Translations including variables" },
    "content": {
      "rendered": "\n<p>The strings&nbsp;<a></a>marked for translation can include placeholders to include variables in the translations. The following code is an example of a translation string with a&nbsp;placeholder:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.utils.translation import gettext as _\nmonth = _('April')\nday = '14'\noutput = _('Today is %(month)s %(day)s') % {'month': month,\n                                            'day': day}\n</code></pre>\n\n\n\n<p>By using placeholders, you can reorder the text variables. For example, an English translation of the previous example might be&nbsp;<em>today is April 14</em>, while the Spanish one might be&nbsp;<em>hoy es 14 de Abril</em>. Always use string interpolation instead of positional interpolation when you have more than one parameter for the translation string. By&nbsp;doing so, you will be able to reorder the placeholder text.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The strings&nbsp;marked for translation can include placeholders to include variables in the translations. The following code is an example of a translation string with a&nbsp;placeholder: By using placeholders, you can reorder the text variables. For example, an English translation of the previous example might be&nbsp;today is April 14, while the Spanish one might be&nbsp;hoy es&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/translations-including-variables/\">Continue reading <span class=\"screen-reader-text\">Translations including variables</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3928" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3928"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3928/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3929,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3928/revisions/3929"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3928"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3928"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3928"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3930,
    "date": "2022-06-29T06:44:27",
    "date_gmt": "2022-06-29T06:44:27",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3930" },
    "modified": "2022-06-29T06:44:27",
    "modified_gmt": "2022-06-29T06:44:27",
    "slug": "plural-forms-in-translations",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/plural-forms-in-translations/",
    "title": { "rendered": "Plural forms in translations" },
    "content": {
      "rendered": "\n<p>For plural forms, you can use&nbsp;<code>ngettext()</code>&nbsp;and&nbsp;<code>ngettext_lazy()</code>. These functions translate&nbsp;<a></a>singular and plural forms depending on an argument that indicates the number of objects. The following example shows how to use them:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>output = ngettext('there is %(count)d product',\n                  'there are %(count)d products',\n                  count) % {'count': count}\n</code></pre>\n\n\n\n<p>Now that&nbsp;<a></a>you know the basics about translating literals in your Python code, it&#8217;s time to apply translations to your project.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>For plural forms, you can use&nbsp;ngettext()&nbsp;and&nbsp;ngettext_lazy(). These functions translate&nbsp;singular and plural forms depending on an argument that indicates the number of objects. The following example shows how to use them: Now that&nbsp;you know the basics about translating literals in your Python code, it&#8217;s time to apply translations to your project.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3930" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3930"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3930/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3931,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3930/revisions/3931"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3930"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3930"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3930"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3933,
    "date": "2022-06-29T06:45:36",
    "date_gmt": "2022-06-29T06:45:36",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3933" },
    "modified": "2022-06-29T06:45:36",
    "modified_gmt": "2022-06-29T06:45:36",
    "slug": "translating-your-own-code",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-your-own-code/",
    "title": { "rendered": "Translating your own code" },
    "content": {
      "rendered": "\n<p>Edit the&nbsp;<code>settings.py</code>&nbsp;file of your project, import the&nbsp;<code>gettext_lazy()</code>&nbsp;function, and&nbsp;change&nbsp;<a></a>the&nbsp;<code>LANGUAGES</code>&nbsp;setting as follows to translate the language names:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.utils.translation import gettext_lazy as _\nLANGUAGES = (\n    ('en', _('English')),\n    ('es', _('Spanish')),\n)\n</code></pre>\n\n\n\n<p>Here, you use the&nbsp;<code>gettext_lazy()</code>&nbsp;function instead of&nbsp;<code>gettext()</code>&nbsp;to avoid a circular import, thus translating the languages&#8217; names when they are accessed.</p>\n\n\n\n<p>Open the shell and run the following command from your project directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin makemessages --all\n</code></pre>\n\n\n\n<p>You should see the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>processing locale es\nprocessing locale en\n</code></pre>\n\n\n\n<p>Take a look at the&nbsp;<code>locale/</code>&nbsp;directory. You should see a file structure like the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>en/\n    LC_MESSAGES/\n        django.po\nes/\n    LC_MESSAGES/\n        django.po\n</code></pre>\n\n\n\n<p>A&nbsp;<code>.po</code>&nbsp;message file has been created for each language. Open&nbsp;<code>es/LC_MESSAGES/django.po</code>&nbsp;with a text editor. At the end of the file, you should be able to see the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#: myshop/settings.py:118\nmsgid \"English\"\nmsgstr \"\"\n#: myshop/settings.py:119\nmsgid \"Spanish\"\nmsgstr \"\"\n</code></pre>\n\n\n\n<p>Each translation string is preceded by a comment showing details about the file and the line where it was found. Each translation includes two strings:</p>\n\n\n\n<ul><li><code>msgid</code>: The translation string as it appears in the source code.</li><li><code>msgstr</code>: The language translation, which is empty by default. This is where you have to enter the actual translation for the given string.</li></ul>\n\n\n\n<p>Fill in the&nbsp;<code>msgstr</code>&nbsp;translations for the given&nbsp;<code>msgid</code>&nbsp;string, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#: myshop/settings.py:118\nmsgid \"English\"\nmsgstr <strong>\"Inglés\"</strong>\n#: myshop/settings.py:119\nmsgid \"Spanish\"\nmsgstr <strong>\"Español\"</strong>\n</code></pre>\n\n\n\n<p>Save the&nbsp;<a></a>modified message file, open the shell, and run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin compilemessages\n</code></pre>\n\n\n\n<p>If everything goes well, you should see an output like the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>processing file django.po in myshop/locale/en/LC_MESSAGES\nprocessing file django.po in myshop/locale/es/LC_MESSAGES\n</code></pre>\n\n\n\n<p>The output gives you information about the message files that are being compiled. Take a look at the&nbsp;<code>locale</code>&nbsp;directory of the&nbsp;<code>myshop</code>&nbsp;project again. You should see the following files:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>en/\n    LC_MESSAGES/\n        django.mo\n        django.po\nes/\n    LC_MESSAGES/\n        django.mo\n        django.po\n</code></pre>\n\n\n\n<p>You can see that a&nbsp;<code>.mo</code>&nbsp;compiled message file has been generated for each language.</p>\n\n\n\n<p>You have translated the language names themselves. Now, let&#8217;s translate the model field names that are displayed in the site. Edit the&nbsp;<code>models.py</code>&nbsp;file of the&nbsp;<code>orders</code>&nbsp;application and add names marked for translation for the&nbsp;<code>Order</code>&nbsp;model fields as&nbsp;follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from django.utils.translation import gettext_lazy as _</strong>\nclass Order(models.Model):\n    first_name = models.CharField(<strong>_('first name')</strong>,\n                                  max_length=50)\n    last_name = models.CharField(<strong>_('last name')</strong>,\n                                 max_length=50)\n    email = models.EmailField(<strong>_('e-mail')</strong>)\n    address = models.CharField(<strong>_('address')</strong>,\n                               max_length=250)\n    postal_code = models.CharField(<strong>_('postal code')</strong>,\n                                   max_length=20)\n    city = models.CharField(<strong>_('city')</strong>,\n                            max_length=100)\n    # ...\n</code></pre>\n\n\n\n<p>You have added names for the fields that are displayed when a user is placing a new order. These are&nbsp;<code>first_name</code>,&nbsp;<code>last_name</code>,&nbsp;<code>email</code>,&nbsp;<code>address</code>,&nbsp;<code>postal_code</code>, and&nbsp;<code>city</code>. Remember&nbsp;<a></a>that you can also use the&nbsp;<code>verbose_name</code>&nbsp;attribute to name the fields.</p>\n\n\n\n<p>Create the following directory structure inside the&nbsp;<code>orders</code>&nbsp;application directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>locale/\n    en/\n    es/\n</code></pre>\n\n\n\n<p>By creating a&nbsp;<code>locale</code>&nbsp;directory, translation strings of this application will be stored in a message file under this directory instead of the main messages file. In this way, you can generate separate translation files for each application.</p>\n\n\n\n<p>Open the shell from the project directory and run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin makemessages --all\n</code></pre>\n\n\n\n<p>You should see the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>processing locale es\nprocessing locale en\n</code></pre>\n\n\n\n<p>Open the&nbsp;<code>locale/es/LC_MESSAGES/django.po</code>&nbsp;file of the&nbsp;<code>order</code>&nbsp;application using a text editor. You will see the translation strings for the&nbsp;<code>Order</code>&nbsp;model. Fill in the following&nbsp;<code>msgstr</code>&nbsp;translations for the given&nbsp;<code>msgid</code>&nbsp;strings:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#: orders/models.py:11\nmsgid \"first name\"\nmsgstr <strong>\"nombre\"</strong>\n#: orders/models.py:12\nmsgid \"last name\"\nmsgstr <strong>\"apellidos\"</strong>\n#: orders/models.py:13\nmsgid \"e-mail\"\nmsgstr <strong>\"e-mail\"</strong>\n#: orders/models.py:13\nmsgid \"address\"\nmsgstr <strong>\"dirección\"</strong>\n#: orders/models.py:14\nmsgid \"postal code\"\nmsgstr <strong>\"código postal\"</strong>\n#: orders/models.py:15\nmsgid \"city\"\nmsgstr <strong>\"ciudad\"</strong>\n</code></pre>\n\n\n\n<p>After you have finished adding the translations, save the file.</p>\n\n\n\n<p>Besides a text editor, you can use Poedit to edit translations. Poedit is a software for editing translations that uses gettext. It is available for Linux, Windows, and macOS. You can download Poedit from https://poedit.net/.</p>\n\n\n\n<p>Let&#8217;s also&nbsp;<a></a>translate the forms of your project. The&nbsp;<code>OrderCreateForm</code>&nbsp;of the&nbsp;<code>orders</code>&nbsp;application does not have to be translated, since it is a&nbsp;<code>ModelForm</code>&nbsp;and it uses the&nbsp;<code>verbose_name</code>&nbsp;attribute of the&nbsp;<code>Order</code>&nbsp;model fields for the form field labels. You are&nbsp;going to translate the forms of the&nbsp;<code>cart</code>&nbsp;and&nbsp;<code>coupons</code>&nbsp;applications.</p>\n\n\n\n<p>Edit the&nbsp;<code>forms.py</code>&nbsp;file inside the&nbsp;<code>cart</code>&nbsp;application directory and add a&nbsp;<code>label</code>&nbsp;attribute to the&nbsp;<code>quantity</code>&nbsp;field of the&nbsp;<code>CartAddProductForm</code>, and then mark this field&nbsp;for translation, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms\n<strong>from django.utils.translation import gettext_lazy as _</strong>\nPRODUCT_QUANTITY_CHOICES = &#91;(i, str(i)) for i in range(1, 21)]\nclass CartAddProductForm(forms.Form):\n    quantity = forms.TypedChoiceField(\n                                choices=PRODUCT_QUANTITY_CHOICES,\n                                coerce=int,\n                                <strong>label=_('Quantity')</strong>)\n    override = forms.BooleanField(required=False,\n                                  initial=False,\n                                  widget=forms.HiddenInput)\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>forms.py</code>&nbsp;file of the&nbsp;<code>coupons</code>&nbsp;application and translate the&nbsp;<code>CouponApplyForm</code>&nbsp;form, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms\n<strong>from django.utils.translation import gettext_lazy as _</strong>\nclass CouponApplyForm(forms.Form):\n    code = forms.CharField(<strong>label=_('Coupon')</strong>)\n</code></pre>\n\n\n\n<p>You have&nbsp;<a></a>added a label to the&nbsp;<code>code</code>&nbsp;field and marked it for translation.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Edit the&nbsp;settings.py&nbsp;file of your project, import the&nbsp;gettext_lazy()&nbsp;function, and&nbsp;change&nbsp;the&nbsp;LANGUAGES&nbsp;setting as follows to translate the language names: Here, you use the&nbsp;gettext_lazy()&nbsp;function instead of&nbsp;gettext()&nbsp;to avoid a circular import, thus translating the languages&#8217; names when they are accessed. Open the shell and run the following command from your project directory: You should see the following output: Take a look&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/translating-your-own-code/\">Continue reading <span class=\"screen-reader-text\">Translating your own code</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3933" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3933"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3933/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3934,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3933/revisions/3934"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3933"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3933"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3933"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3935,
    "date": "2022-06-29T06:45:59",
    "date_gmt": "2022-06-29T06:45:59",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3935" },
    "modified": "2022-06-29T06:45:59",
    "modified_gmt": "2022-06-29T06:45:59",
    "slug": "translating-templates",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-templates/",
    "title": { "rendered": "Translating templates" },
    "content": {
      "rendered": "\n<p>Django offers the <code>{% trans %}</code> and <code>{% blocktrans %}</code> template tags to translate strings in templates. In order to use the translation template tags, you have to add <code>{% load i18n %}</code> at the top of your template to load them.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django offers the {% trans %} and {% blocktrans %} template tags to translate strings in templates. In order to use the translation template tags, you have to add {% load i18n %} at the top of your template to load them.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3935" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3935"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3935/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3936,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3935/revisions/3936"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3935"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3935"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3935"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3937,
    "date": "2022-06-29T06:46:26",
    "date_gmt": "2022-06-29T06:46:26",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3937" },
    "modified": "2022-06-29T06:46:26",
    "modified_gmt": "2022-06-29T06:46:26",
    "slug": "the-trans-template-tag",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/the-trans-template-tag/",
    "title": { "rendered": "The {% trans %} template tag" },
    "content": {
      "rendered": "\n<p>The&nbsp;<code>{% trans %}</code>&nbsp;template tag allows you to mark a literal for translation. Internally, Django executes&nbsp;<code>gettext()</code>&nbsp;on the given text. This&nbsp;is how to&nbsp;<a></a>mark a string for translation in a template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% trans \"Text to be translated\" %}\n</code></pre>\n\n\n\n<p>You can use&nbsp;<code>as</code>&nbsp;to store the translated content in a variable that you can use throughout your template. The following example stores the translated text in a&nbsp;variable called&nbsp;<code>greeting</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% trans \"Hello!\" as greeting %}\n&lt;h1&gt;{{ greeting }}&lt;/h1&gt;\n</code></pre>\n\n\n\n<p>The&nbsp;<code>{% trans %}</code>&nbsp;tag is useful for simple translation strings, but it can&#8217;t handle content for translation that includes variables.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;{% trans %}&nbsp;template tag allows you to mark a literal for translation. Internally, Django executes&nbsp;gettext()&nbsp;on the given text. This&nbsp;is how to&nbsp;mark a string for translation in a template: You can use&nbsp;as&nbsp;to store the translated content in a variable that you can use throughout your template. The following example stores the translated text in a&nbsp;variable called&nbsp;greeting:&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/the-trans-template-tag/\">Continue reading <span class=\"screen-reader-text\">The {% trans %} template tag</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3937" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3937"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3937/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3938,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3937/revisions/3938"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3937"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3937"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3937"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3939,
    "date": "2022-06-29T06:46:54",
    "date_gmt": "2022-06-29T06:46:54",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3939" },
    "modified": "2022-06-29T06:46:54",
    "modified_gmt": "2022-06-29T06:46:54",
    "slug": "the-blocktrans-template-tag",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/the-blocktrans-template-tag/",
    "title": { "rendered": "The {% blocktrans %} template tag" },
    "content": {
      "rendered": "\n<p>The&nbsp;<code>{% blocktrans %}</code>&nbsp;template tag allows you to mark content that includes literals and variable&nbsp;<a></a>content using placeholders. The following example shows you&nbsp;how to use the&nbsp;<code>{% blocktrans %}</code>&nbsp;tag, including a&nbsp;<code>name</code>&nbsp;variable in the content for&nbsp;translation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% blocktrans %}Hello {{ name }}!{% endblocktrans %}\n</code></pre>\n\n\n\n<p>You can use&nbsp;<code>with</code>&nbsp;to include template expressions, such as accessing object attributes or applying template filters to variables. You always have to use placeholders for these. You can&#8217;t&nbsp;<a></a>access expressions or object attributes inside the&nbsp;<code>blocktrans</code>&nbsp;block. The following example shows you how to use&nbsp;<code>with</code>&nbsp;to include an object attribute to which the&nbsp;<code>capfirst</code>&nbsp;filter is applied:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% blocktrans with name=user.name|capfirst %}\n  Hello {{ name }}!\n{% endblocktrans %}\n</code></pre>\n\n\n\n<p>Use the&nbsp;<code>{% blocktrans %}</code>&nbsp;tag instead of&nbsp;<code>{% trans %}</code>&nbsp;when you need to include variable content in your translation string.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;{% blocktrans %}&nbsp;template tag allows you to mark content that includes literals and variable&nbsp;content using placeholders. The following example shows you&nbsp;how to use the&nbsp;{% blocktrans %}&nbsp;tag, including a&nbsp;name&nbsp;variable in the content for&nbsp;translation: You can use&nbsp;with&nbsp;to include template expressions, such as accessing object attributes or applying template filters to variables. You always have to use placeholders&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/the-blocktrans-template-tag/\">Continue reading <span class=\"screen-reader-text\">The {% blocktrans %} template tag</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3939" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3939"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3939/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3940,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3939/revisions/3940"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3939"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3939"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3939"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3942,
    "date": "2022-06-29T06:48:43",
    "date_gmt": "2022-06-29T06:48:43",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3942" },
    "modified": "2022-06-29T07:19:21",
    "modified_gmt": "2022-06-29T07:19:21",
    "slug": "translating-the-shop-templates",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-the-shop-templates/",
    "title": { "rendered": "Translating the shop templates" },
    "content": {
      "rendered": "\n<p>Edit the&nbsp;<code>shop/base.html</code>&nbsp;template of the&nbsp;<code>shop</code>&nbsp;application. Make sure that you load the&nbsp;<code>i18n</code>&nbsp;tag at&nbsp;<a></a>the top of the template and mark strings for translation, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>{% load i18n %}</strong>\n{% load static %}\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\" /&gt;\n  &lt;title&gt;\n    {% block title %}<strong>{% trans \"My shop\" %}</strong>{% endblock %}\n  &lt;/title&gt;\n  &lt;link href=\"{% static \"css/base.css\" %}\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"header\"&gt;\n    &lt;a href=\"/\" class=\"logo\"&gt;<strong>{% trans \"My shop\" %}</strong>&lt;/a&gt;\n  &lt;/div&gt;\n  &lt;div id=\"subheader\"&gt;\n    &lt;div class=\"cart\"&gt;\n      {% with total_items=cart|length %}\n        {% if total_items &gt; 0 %}\n          <strong>{% trans \"Your cart\" %}:</strong>\n          &lt;a href=\"{% url \"cart:cart_detail\" %}\"&gt;\n<strong>            {% blocktrans with total=cart.get_total_price count items=total_items %}</strong>\n<strong>              {{ items }} item, ${{ total }}</strong>\n<strong>            {% plural %}</strong>\n<strong>              {{ items }} items, ${{ total }}</strong>\n<strong>            {% endblocktrans %}</strong>\n          &lt;/a&gt;\n        {% else %}\n          <strong>{% trans \"Your cart is empty.\" %}</strong>\n        {% endif %}\n      {% endwith %}\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=\"content\"&gt;\n    {% block content %}\n    {% endblock %}\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n\n\n<p>Make sure that&nbsp;<a></a>no template tag is split across multiple lines.</p>\n\n\n\n<p>Notice the&nbsp;<code>{% blocktrans %}</code>&nbsp;tag to display the&nbsp;cart&#8217;s summary. The cart&#8217;s summary was previously as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{{ total_items }} item{{ total_items|pluralize }},\n${{ cart.get_total_price }}\n</code></pre>\n\n\n\n<p>You changed it and now you use&nbsp;<code>{% blocktrans with ... %}</code>&nbsp;to set up the placeholder&nbsp;<code>total</code>&nbsp;with the value of&nbsp;<code>cart.get_total_price</code>&nbsp;(the object method called here). You also use&nbsp;<code>count</code>, which allows you to set a variable for counting objects for Django to select the right plural form. You set the&nbsp;<code>items</code>&nbsp;variable to count objects with the value of&nbsp;<code>total_items</code>. This allows you to set a translation for the singular and plural forms, which you separate with the&nbsp;<code>{% plural %}</code>&nbsp;tag within the&nbsp;<code>{% blocktrans %}</code>&nbsp;block. The resulting code is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% blocktrans with total=cart.get_total_price count items=total_items %}\n  {{ items }} item, ${{ total }}\n{% plural %}\n  {{ items }} items, ${{ total }}\n{% endblocktrans %}\n</code></pre>\n\n\n\n<p>Next, edit the&nbsp;<code>shop/product/detail.html</code>&nbsp;template of the&nbsp;<code>shop</code>&nbsp;application and load the&nbsp;<code>i18n</code>&nbsp;tags at the top of it, but after the&nbsp;<code>{% extends %}</code>&nbsp;tag, which always has&nbsp;to be the first tag in the template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% load i18n %}\n</code></pre>\n\n\n\n<p>Then, find the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type=\"submit\" value=\"Add to cart\"&gt;\n</code></pre>\n\n\n\n<p>Replace it with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type=\"submit\" value=<strong>\"{% trans \"Add to cart\" %}\"</strong>&gt;\n</code></pre>\n\n\n\n<p>Now, translate the&nbsp;<code>orders</code>&nbsp;application template. Edit the&nbsp;<code>orders/order/create.html</code>&nbsp;template&nbsp;<a></a>of the&nbsp;<code>orders</code>&nbsp;application and mark text for translation, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% extends \"shop/base.html\" %}\n<strong>{% load i18n %}</strong>\n{% block title %}\n  <strong>{% trans \"Checkout\" %}</strong>\n{% endblock %}\n{% block content %}\n  &lt;h1<strong>&gt;{% trans \"Checkout\" %}</strong>&lt;/h1&gt;\n  &lt;div class=\"order-info\"&gt;\n    &lt;h3&gt;<strong>{% trans \"Your order\" %}</strong>&lt;/h3&gt;\n    &lt;ul&gt;\n      {% for item in cart %}\n        &lt;li&gt;\n          {{ item.quantity }}x {{ item.product.name }}\n          &lt;span&gt;${{ item.total_price }}&lt;/span&gt;\n        &lt;/li&gt;\n      {% endfor %}\n      {% if cart.coupon %}\n        &lt;li&gt;\n          <strong>{% blocktrans with code=cart.coupon.code discount=cart.coupon.discount %}</strong>\n            <strong>\"{{ code }}\" ({{ discount }}% off)</strong>\n          <strong>{% endblocktrans %}</strong>\n          &lt;span class=\"neg\"&gt;- ${{ cart.get_discount|floatformat:2 }}&lt;/span&gt;\n        &lt;/li&gt;\n      {% endif %}\n    &lt;/ul&gt;\n    &lt;p&gt;<strong>{% trans \"Total\" %}:</strong> ${{\n    cart.get_total_price_after_discount|floatformat:2 }}&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;form method=\"post\" class=\"order-form\"&gt;\n    {{ form.as_p }}\n    &lt;p&gt;&lt;input type=\"submit\" value<strong>=\"{% trans \"Place order\" %}</strong>\"&gt;&lt;/p&gt;\n    {% csrf_token %}\n  &lt;/form&gt;\n{% endblock %}\n</code></pre>\n\n\n\n<p>Make sure that no template tag is split across multiple lines. Take a look at the following files in the code that accompanies to see how strings have been marked for translation:</p>\n\n\n\n<ul><li>The&nbsp;<code>shop</code>&nbsp;application: Template&nbsp;<code>shop/product/list.html</code></li><li>The&nbsp;<code>orders</code>&nbsp;application: Template&nbsp;<code>orders/order/created.html</code></li><li>The&nbsp;<code>cart</code>&nbsp;application: Template&nbsp;<code>cart/detail.html</code></li></ul>\n\n\n\n<p>You can find the source code at https://github.com/PacktPublishing/Django-3-by-Example/tree/master/.</p>\n\n\n\n<p>Let&#8217;s update the message files to include the new translation strings. Open the shell and run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin makemessages --all\n</code></pre>\n\n\n\n<p>The&nbsp;<code>.po</code>&nbsp;files are inside the&nbsp;<code>locale</code>&nbsp;directory of the&nbsp;<code>myshop</code>&nbsp;project and you&#8217;ll see that the&nbsp;<code>orders</code>&nbsp;application now contains all the strings that you marked for translation.</p>\n\n\n\n<p>Edit the <code>.po</code> translation files of the project and the <code>orders</code> application, and include Spanish translations in the <code>msgstr</code>. You can also use the translated <code>.po</code> files in the source code that accompanies.</p>\n\n\n\n<p>Run the following command to compile the translation files:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin compilemessages\n</code></pre>\n\n\n\n<p>You will see the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>processing file django.po in myshop/locale/en/LC_MESSAGES\nprocessing file django.po in myshop/locale/es/LC_MESSAGES\nprocessing file django.po in myshop/orders/locale/en/LC_MESSAGES\nprocessing file django.po in myshop/orders/locale/es/LC_MESSAGES\n</code></pre>\n\n\n\n<p>A&nbsp;<code>.mo</code>&nbsp;file containing compiled translations has been generated for each&nbsp;<code>.po</code>&nbsp;translation file.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Edit the&nbsp;shop/base.html&nbsp;template of the&nbsp;shop&nbsp;application. Make sure that you load the&nbsp;i18n&nbsp;tag at&nbsp;the top of the template and mark strings for translation, as follows: Make sure that&nbsp;no template tag is split across multiple lines. Notice the&nbsp;{% blocktrans %}&nbsp;tag to display the&nbsp;cart&#8217;s summary. The cart&#8217;s summary was previously as follows: You changed it and now you use&nbsp;{% blocktrans&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/translating-the-shop-templates/\">Continue reading <span class=\"screen-reader-text\">Translating the shop templates</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3942" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3942"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3942/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3943,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3942/revisions/3943"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3942"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3942"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3942"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3944,
    "date": "2022-06-29T06:50:14",
    "date_gmt": "2022-06-29T06:50:14",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3944" },
    "modified": "2022-06-29T06:50:14",
    "modified_gmt": "2022-06-29T06:50:14",
    "slug": "using-the-rosetta-translation-interface",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/using-the-rosetta-translation-interface/",
    "title": { "rendered": "Using the Rosetta translation interface" },
    "content": {
      "rendered": "\n<p>Rosetta is a third-party application that allows you to edit translations using the&nbsp;same interface&nbsp;<a></a>as the Django administration site. Rosetta makes it easy to edit&nbsp;<code>.po</code>&nbsp;files and it updates compiled translation files. Let&#8217;s add it to your project.</p>\n\n\n\n<p>Install Rosetta via&nbsp;<code>pip</code>&nbsp;using this command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install django-rosetta==0.9.3\n</code></pre>\n\n\n\n<p>Then, add&nbsp;<code>'rosetta'</code>&nbsp;to the&nbsp;<code>INSTALLED_APPS</code>&nbsp;setting in your project&#8217;s&nbsp;<code>settings.py</code>&nbsp;file, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;\n    <em># ...</em>\n    <strong>'rosetta',</strong>\n]\n</code></pre>\n\n\n\n<p>You need to add Rosetta&#8217;s URLs to your main URL configuration. Edit the main&nbsp;<code>urls.py</code>&nbsp;file of your project and add the following URL pattern to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>urlpatterns = &#91;\n    # ...\n    <strong>path('rosetta/', include('rosetta.urls')),</strong>\n    path('', include('shop.urls', namespace='shop')),\n]\n</code></pre>\n\n\n\n<p>Make sure&nbsp;<a></a>you place it before the&nbsp;<code>shop.urls</code>&nbsp;pattern to avoid an undesired pattern&nbsp;match.</p>\n\n\n\n<p>Open&nbsp;<code>http://127.0.0.1:8000/admin/</code>&nbsp;and log in with a superuser. Then, navigate to&nbsp;<code>http://127.0.0.1:8000/rosetta/</code>&nbsp;in your browser. In the&nbsp;<strong>Filter</strong>&nbsp;menu, click&nbsp;<strong>THIRD PARTY</strong>&nbsp;to display all the available message files, including those that belong to the&nbsp;<code>orders</code>&nbsp;application. You should see a list of existing languages, as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_05.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.5: The Rosetta administration interface</p>\n\n\n\n<p>Click the&nbsp;<strong>Myshop</strong>&nbsp;link under the&nbsp;<strong>Spanish</strong>&nbsp;section to edit the Spanish translations. You should see a list of translation strings, as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_06.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.6: Editing Spanish translations using Rosetta</p>\n\n\n\n<p>You can&nbsp;<a></a>enter the translations under the&nbsp;<strong>SPANISH</strong>&nbsp;column. The&nbsp;<strong>OCCURRENCE(S)</strong>&nbsp;column displays the files and line of code where each translation string was found.</p>\n\n\n\n<p>Translations that include placeholders will appear as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_07.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.7: Translations including placeholders</p>\n\n\n\n<p>Rosetta uses a different background color to display placeholders. When you translate content, make sure that you keep placeholders untranslated. For example, take the following string:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>%<em>(items)</em>s items, $%<em>(total)</em>s\n</code></pre>\n\n\n\n<p>It is translated into Spanish as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>%<em>(items)</em>s productos, $%<em>(total)</em>s\n</code></pre>\n\n\n\n<p>You can take a look at the source code that comes along to use the same Spanish translations for your project.</p>\n\n\n\n<p>When you finish editing translations, click the&nbsp;<strong>Save and translate next block</strong>&nbsp;button to save the translations to the&nbsp;<code>.po</code>&nbsp;file. Rosetta compiles the message file when you save translations, so there is no need for you to run the&nbsp;<code>compilemessages</code>&nbsp;command. However, Rosetta requires write access to the&nbsp;<code>locale</code>&nbsp;directories to write the message files. Make sure that the directories have valid permissions.</p>\n\n\n\n<p>If you want&nbsp;<a></a>other users to be able to edit translations, open&nbsp;<code>http://127.0.0.1:8000/admin/auth/group/add/</code>&nbsp;in your browser and create a&nbsp;new group named&nbsp;<code>translators</code>. Then, access&nbsp;<code>http://127.0.0.1:8000/admin/auth/user/</code>&nbsp;to edit the users to whom you want to grant permissions so that they can edit translations. When editing a user, under the&nbsp;<strong>Permissions</strong>&nbsp;section, add the&nbsp;<code>translators</code>&nbsp;group to the&nbsp;<strong>Chosen Groups</strong>&nbsp;for each user. Rosetta is only available to&nbsp;superusers or users who belong to the&nbsp;<code>translators</code>&nbsp;group.</p>\n\n\n\n<p>You can read Rosetta&#8217;s documentation at https://django-rosetta.readthedocs.io/.</p>\n\n\n\n<p>When you add new translations to your production environment, if you serve Django with a real web server, you will have to reload your server after running the&nbsp;<code>compilemessages</code>&nbsp;command, or after saving the translations with Rosetta, for changes to take effect.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Rosetta is a third-party application that allows you to edit translations using the&nbsp;same interface&nbsp;as the Django administration site. Rosetta makes it easy to edit&nbsp;.po&nbsp;files and it updates compiled translation files. Let&#8217;s add it to your project. Install Rosetta via&nbsp;pip&nbsp;using this command: Then, add&nbsp;&#8216;rosetta&#8217;&nbsp;to the&nbsp;INSTALLED_APPS&nbsp;setting in your project&#8217;s&nbsp;settings.py&nbsp;file, as follows: You need to add Rosetta&#8217;s URLs&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/using-the-rosetta-translation-interface/\">Continue reading <span class=\"screen-reader-text\">Using the Rosetta translation interface</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3944" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3944"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3944/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3945,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3944/revisions/3945"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3944"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3944"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3944"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3946,
    "date": "2022-06-29T06:50:36",
    "date_gmt": "2022-06-29T06:50:36",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3946" },
    "modified": "2022-06-29T06:50:36",
    "modified_gmt": "2022-06-29T06:50:36",
    "slug": "fuzzy-translations",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/fuzzy-translations/",
    "title": { "rendered": "Fuzzy translations" },
    "content": {
      "rendered": "\n<p>You might have noticed that there is a <strong>FUZZY</strong> column in Rosetta. This is not a Rosetta feature; it is provided by gettext. If the fuzzy flag is active for a translation, it will not be included in the compiled message files. This flag marks translation strings that need to be reviewed by a translator. When <code>.po</code> files are updated with new translation strings, it is possible that some translation strings will automatically be flagged as fuzzy. This happens when gettext finds some <code>msgid</code> that has been slightly modified. gettext pairs it with what it thinks was the old translation and flags it as fuzzy for review. The translator should then review fuzzy translations, remove the fuzzy flag, and compile the translation file again.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You might have noticed that there is a FUZZY column in Rosetta. This is not a Rosetta feature; it is provided by gettext. If the fuzzy flag is active for a translation, it will not be included in the compiled message files. This flag marks translation strings that need to be reviewed by a translator. When .po files are updated with&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/fuzzy-translations/\">Continue reading <span class=\"screen-reader-text\">Fuzzy translations</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3946" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3946"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3946/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3947,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3946/revisions/3947"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3946"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3946"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3946"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3949,
    "date": "2022-06-29T06:51:31",
    "date_gmt": "2022-06-29T06:51:31",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3949" },
    "modified": "2022-06-29T06:51:31",
    "modified_gmt": "2022-06-29T06:51:31",
    "slug": "url-patterns-for-internationalization",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/url-patterns-for-internationalization/",
    "title": { "rendered": "URL patterns for internationalization" },
    "content": {
      "rendered": "\n<p>Django offers&nbsp;<a></a>internationalization capabilities for URLs. It includes two main features for internationalized URLs:</p>\n\n\n\n<ul><li><strong>Language prefix in URL patterns</strong>: Adding a language prefix to URLs to&nbsp;serve each&nbsp;<a></a>language version under a different base URL</li><li><strong>Translated URL patterns</strong>: Translating URL patterns so that every URL is&nbsp;different&nbsp;<a></a>for each language</li></ul>\n\n\n\n<p>A reason for translating URLs is to optimize your site for search engines. By adding&nbsp;a&nbsp;language&nbsp;<a></a>prefix to your patterns, you will be able to index a URL for each language instead of a single URL for all of them. Furthermore, by translating URLs into each language, you will provide search engines with URLs that will rank better for&nbsp;each&nbsp;language.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django offers&nbsp;internationalization capabilities for URLs. It includes two main features for internationalized URLs: Language prefix in URL patterns: Adding a language prefix to URLs to&nbsp;serve each&nbsp;language version under a different base URL Translated URL patterns: Translating URL patterns so that every URL is&nbsp;different&nbsp;for each language A reason for translating URLs is to optimize your site&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/url-patterns-for-internationalization/\">Continue reading <span class=\"screen-reader-text\">URL patterns for internationalization</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3949" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3949"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3949/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3950,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3949/revisions/3950"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3949"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3949"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3949"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3952,
    "date": "2022-06-29T06:52:03",
    "date_gmt": "2022-06-29T06:52:03",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3952" },
    "modified": "2022-06-29T06:52:03",
    "modified_gmt": "2022-06-29T06:52:03",
    "slug": "adding-a-language-prefix-to-url-patterns",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/adding-a-language-prefix-to-url-patterns/",
    "title": { "rendered": "Adding a language prefix to URL patterns" },
    "content": {
      "rendered": "\n<p>Django allows you to add a language prefix to your URL patterns. For example, the English version&nbsp;<a></a>of your site can be served under a path starting&nbsp;<code>/en/</code>, and the Spanish version under&nbsp;<code>/es/</code>. To use languages in URL patterns, you have to use the&nbsp;<code>LocaleMiddleware</code>&nbsp;provided by Django. The framework will use it to identify the current language from the requested URL. You added it previously to the&nbsp;<code>MIDDLEWARE</code>&nbsp;setting of your project, so you don&#8217;t need to do it now.</p>\n\n\n\n<p>Let&#8217;s add a language prefix to your URL patterns. Edit the main&nbsp;<code>urls.py</code>&nbsp;file of the&nbsp;<code>myshop</code>&nbsp;project and add&nbsp;<code>i18n_patterns()</code>, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from django.conf.urls.i18n import i18n_patterns</strong>\nurlpatterns = <strong>i18n_patterns(</strong>\n path('admin/', admin.site.urls),\n path('cart/', include('cart.urls', namespace='cart')),\n path('orders/', include('orders.urls', namespace='orders')),\n path('payment/', include('payment.urls', namespace='payment')),\n path('coupons/', include('coupons.urls', namespace='coupons')),\n path('rosetta/', include('rosetta.urls')),\n path('', include('shop.urls', namespace='shop')),\n<strong>)</strong>\n</code></pre>\n\n\n\n<p>You can combine non-translatable standard URL patterns and patterns under&nbsp;<code>i18n_patterns</code>&nbsp;so that some patterns include a language prefix and others don&#8217;t. However, it&#8217;s better to use translated URLs only to avoid the possibility that a carelessly translated URL matches a non-translated URL pattern.</p>\n\n\n\n<p>Run the development server and open&nbsp;<code>http://127.0.0.1:8000/</code>&nbsp;in your browser. Django will perform the steps described previously in the&nbsp;<em>How Django determines the current language</em>&nbsp;section to determine the current language, and it will redirect you to the requested URL, including the language prefix. Take a look at the URL in&nbsp;your browser; it should&nbsp;<a></a>now look like&nbsp;<code>http://127.0.0.1:8000/en/</code>. The current language is the one set by the&nbsp;<code>Accept-Language</code>&nbsp;header of your browser if it is Spanish or English; otherwise, it is the default&nbsp;<code>LANGUAGE_CODE</code>&nbsp;(English) defined in&nbsp;your settings.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django allows you to add a language prefix to your URL patterns. For example, the English version&nbsp;of your site can be served under a path starting&nbsp;/en/, and the Spanish version under&nbsp;/es/. To use languages in URL patterns, you have to use the&nbsp;LocaleMiddleware&nbsp;provided by Django. The framework will use it to identify the current language from&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/adding-a-language-prefix-to-url-patterns/\">Continue reading <span class=\"screen-reader-text\">Adding a language prefix to URL patterns</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3952" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3952"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3952/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3953,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3952/revisions/3953"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3952"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3952"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3952"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3954,
    "date": "2022-06-29T06:52:35",
    "date_gmt": "2022-06-29T06:52:35",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3954" },
    "modified": "2022-06-29T06:52:35",
    "modified_gmt": "2022-06-29T06:52:35",
    "slug": "translating-url-patterns",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-url-patterns/",
    "title": { "rendered": "Translating URL patterns" },
    "content": {
      "rendered": "\n<p>Django supports translated strings in URL patterns. You can use a different translation for each&nbsp;<a></a>language for a single URL pattern. You can mark URL patterns for translation in the same way as you would with literals, using the&nbsp;<code>gettext_lazy()</code>&nbsp;function.</p>\n\n\n\n<p>Edit the main&nbsp;<code>urls.py</code>&nbsp;file of the&nbsp;<code>myshop</code>&nbsp;project and add translation strings to the regular expressions of the URL patterns for the&nbsp;<code>cart</code>,&nbsp;<code>orders</code>,&nbsp;<code>payment</code>, and&nbsp;<code>coupons</code>&nbsp;applications, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from django.utils.translation import gettext_lazy as _</strong>\nurlpatterns = i18n_patterns<strong>(</strong>\n path(<strong>_('</strong>admin/<strong>')</strong>, admin.site.urls),\n path(<strong>_(</strong>'cart/<strong>')</strong>, include('cart.urls', namespace='cart')),\n path(<strong>_(</strong>'orders/<strong>')</strong>, include('orders.urls', namespace='orders')),\n path(<strong>_('</strong>payment/<strong>')</strong>, include('payment.urls', namespace='payment')),\n path(<strong>_('</strong>coupons/<strong>')</strong>, include('coupons.urls', namespace='coupons')),\n path('rosetta/', include('rosetta.urls')),\n path('', include('shop.urls', namespace='shop')),\n<strong>)</strong>\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>urls.py</code>&nbsp;file of the&nbsp;<code>orders</code>&nbsp;application and mark URL patterns for translation, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from django.utils.translation import gettext_lazy as _</strong>\nurlpatterns = &#91;\n    path(<strong>_('</strong>create/<strong>')</strong>, views.order_create, name='order_create'),\n    # ...\n]\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>urls.py</code>&nbsp;file of the&nbsp;<code>payment</code>&nbsp;application and change the code to the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from django.utils.translation import gettext_lazy as _</strong>\nurlpatterns = &#91;\n    path(<strong>_('</strong>process/<strong>')</strong>, views.payment_process, name='process'),\n    path(<strong>_('</strong>done/<strong>')</strong>, views.payment_done, name='done'),\n    path(<strong>_('</strong>canceled/<strong>')</strong>, views.payment_canceled, name='canceled'),\n]\n</code></pre>\n\n\n\n<p>You don&#8217;t need to translate the URL patterns of the&nbsp;<code>shop</code>&nbsp;application, since they are built with variables and do not include any other literals.</p>\n\n\n\n<p>Open the&nbsp;<a></a>shell and run the next command to update the message files with the new translations:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>django-admin makemessages --all\n</code></pre>\n\n\n\n<p>Make sure the development server is running. Open&nbsp;<code>http://127.0.0.1:8000/en/rosetta/</code>&nbsp;in your browser and click the&nbsp;<strong>Myshop</strong>&nbsp;link under the&nbsp;<strong>Spanish</strong>&nbsp;section. Now you will see the URL patterns for translation. You can click on&nbsp;<strong>Untranslated only</strong>&nbsp;to only see the strings that have not been translated yet. You can now translate the URLs.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django supports translated strings in URL patterns. You can use a different translation for each&nbsp;language for a single URL pattern. You can mark URL patterns for translation in the same way as you would with literals, using the&nbsp;gettext_lazy()&nbsp;function. Edit the main&nbsp;urls.py&nbsp;file of the&nbsp;myshop&nbsp;project and add translation strings to the regular expressions of the URL patterns&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/translating-url-patterns/\">Continue reading <span class=\"screen-reader-text\">Translating URL patterns</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3954" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3954"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3954/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3956,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3954/revisions/3956"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3954"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3954"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3954"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3958,
    "date": "2022-06-29T06:53:07",
    "date_gmt": "2022-06-29T06:53:07",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3958" },
    "modified": "2022-06-29T06:53:07",
    "modified_gmt": "2022-06-29T06:53:07",
    "slug": "allowing-users-to-switch-language",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/allowing-users-to-switch-language/",
    "title": { "rendered": "Allowing users to switch language" },
    "content": {
      "rendered": "\n<p>Since you&nbsp;<a></a>are serving content that is available in multiple languages, you should let&nbsp;your users switch the site&#8217;s language. You are going to add a language selector to your site. The language selector will consist of a list of available languages displayed using links.</p>\n\n\n\n<p>Edit the&nbsp;<code>shop/base.html</code>&nbsp;template of the&nbsp;<code>shop</code>&nbsp;application and locate the following lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id=\"header\"&gt;\n  &lt;a href=\"/\" class=\"logo\"&gt;{% trans \"My shop\" %}&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>Replace them with the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id=\"header\"&gt;\n  &lt;a href=\"/\" class=\"logo\"&gt;{% trans \"My shop\" %}&lt;/a&gt;\n  <strong>{% get_current_language as LANGUAGE_CODE %}</strong>\n  <strong>{% get_available_languages as LANGUAGES %}</strong>\n  <strong>{% get_language_info_list for LANGUAGES as languages %}</strong>\n  <strong>&lt;div class=\"languages\"&gt;</strong>\n    <strong>&lt;p&gt;{% trans \"Language\" %}:&lt;/p&gt;</strong>\n    <strong>&lt;ul class=\"languages\"&gt;</strong>\n      <strong>{% for language in languages %}</strong>\n        <strong>&lt;li&gt;</strong>\n          <strong>&lt;a href=\"/{{ language.code }}/\"</strong>\n          <strong>{% if language.code == LANGUAGE_CODE %} class=\"selected\"{% endif %}&gt;</strong>\n            <strong>{{ language.name_local }}</strong>\n          <strong>&lt;/a&gt;</strong>\n        <strong>&lt;/li&gt;</strong>\n      <strong>{% endfor %}</strong>\n    <strong>&lt;/ul&gt;</strong>\n  <strong>&lt;/div&gt;</strong>\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>Make sure that no template tag is split into multiple lines.</p>\n\n\n\n<p>This is how you build your language selector:</p>\n\n\n\n<ol><li>You load the internationalization tags using&nbsp;<code>{% load i18n %}</code></li><li>You use the&nbsp;<code>{% get_current_language %}</code>&nbsp;tag to retrieve the current language</li><li>You get the languages defined in the&nbsp;<code>LANGUAGES</code>&nbsp;setting using the&nbsp;<code>{% get_available_languages %}</code>&nbsp;template tag</li><li>You use the tag&nbsp;<code>{% get_language_info_list %}</code>&nbsp;to provide easy access to the language attributes</li><li>You build an HTML list to display all available languages and you add a&nbsp;<code>selected</code>&nbsp;class attribute to the current active language</li></ol>\n\n\n\n<p>In the&nbsp;<a></a>code for the language selector, you used the template tags provided by&nbsp;<code>i18n</code>, based on the languages available in the settings of your project. Now open&nbsp;<code>http://127.0.0.1:8000/</code>&nbsp;in your browser and take a look. You should see the language selector in the top right-hand corner of the site, as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_08.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.8: The product list page, including a language selector in the site header</p>\n\n\n\n<p>Users can now easily switch to their preferred language by clicking on it.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Since you&nbsp;are serving content that is available in multiple languages, you should let&nbsp;your users switch the site&#8217;s language. You are going to add a language selector to your site. The language selector will consist of a list of available languages displayed using links. Edit the&nbsp;shop/base.html&nbsp;template of the&nbsp;shop&nbsp;application and locate the following lines: Replace them with&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/allowing-users-to-switch-language/\">Continue reading <span class=\"screen-reader-text\">Allowing users to switch language</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3958" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3958"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3958/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3959,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3958/revisions/3959"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3958"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3958"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3958"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3960,
    "date": "2022-06-29T06:53:28",
    "date_gmt": "2022-06-29T06:53:28",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3960" },
    "modified": "2022-06-29T06:53:28",
    "modified_gmt": "2022-06-29T06:53:28",
    "slug": "translating-models-with-django-parler",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-models-with-django-parler/",
    "title": { "rendered": "Translating models with django-parler" },
    "content": {
      "rendered": "\n<p>Django does not provide a solution for translating models out of the box. You have to implement&nbsp;<a></a>your own solution to manage content stored in different languages, or use a third-party module for model translation. There are&nbsp;<a></a>several third-party applications that allow you to translate model fields. Each of them takes a different approach to storing and accessing translations. One of these applications is django-parler. This module offers a very effective way to translate models and it integrates smoothly with Django&#8217;s administration site.</p>\n\n\n\n<p>django-parler generates a separate database table for each model that contains translations. This table includes all the translated fields and a foreign key for the original object that the translation belongs to. It also contains a language field, since&nbsp;each row stores the content for a single language.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Django does not provide a solution for translating models out of the box. You have to implement&nbsp;your own solution to manage content stored in different languages, or use a third-party module for model translation. There are&nbsp;several third-party applications that allow you to translate model fields. Each of them takes a different approach to storing and&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/translating-models-with-django-parler/\">Continue reading <span class=\"screen-reader-text\">Translating models with django-parler</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3960" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3960"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3960/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3962,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3960/revisions/3962"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3960"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3960"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3960"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3963,
    "date": "2022-06-29T06:54:02",
    "date_gmt": "2022-06-29T06:54:02",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3963" },
    "modified": "2022-06-29T06:54:02",
    "modified_gmt": "2022-06-29T06:54:02",
    "slug": "installing-django-parler",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/installing-django-parler/",
    "title": { "rendered": "Installing django-parler" },
    "content": {
      "rendered": "\n<p>Install&nbsp;<code><a></a></code><code>django-parler</code>&nbsp;via&nbsp;<code>pip</code>&nbsp;using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install django-parler==2.0.1\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>settings.py</code>&nbsp;file of your project and add&nbsp;<code>'parler'</code>&nbsp;to the&nbsp;<code>INSTALLED_APPS</code>&nbsp;setting, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;\n    <em># ...</em>\n    <strong>'parler',</strong>\n]\n</code></pre>\n\n\n\n<p>Also, add the following code to your settings:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>PARLER_LANGUAGES = {\n    None: (\n        {'code': 'en'},\n        {'code': 'es'},\n    ),\n    'default': {\n        'fallback': 'en',\n        'hide_untranslated': False,\n    }\n}\n</code></pre>\n\n\n\n<p>This setting defines the available languages,&nbsp;<code>en</code>&nbsp;and&nbsp;<code>es</code>, for&nbsp;<code>django-parler</code>. You specify the default language&nbsp;<code>en</code>&nbsp;and indicate that&nbsp;<code>django-parler</code>&nbsp;should not hide untranslated content.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Install&nbsp;django-parler&nbsp;via&nbsp;pip&nbsp;using the following command: Edit the&nbsp;settings.py&nbsp;file of your project and add&nbsp;&#8216;parler&#8217;&nbsp;to the&nbsp;INSTALLED_APPS&nbsp;setting, as follows: Also, add the following code to your settings: This setting defines the available languages,&nbsp;en&nbsp;and&nbsp;es, for&nbsp;django-parler. You specify the default language&nbsp;en&nbsp;and indicate that&nbsp;django-parler&nbsp;should not hide untranslated content.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3963" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3963"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3963/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3964,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3963/revisions/3964"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3963"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3963"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3963"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3965,
    "date": "2022-06-29T06:54:38",
    "date_gmt": "2022-06-29T06:54:38",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3965" },
    "modified": "2022-06-29T06:54:38",
    "modified_gmt": "2022-06-29T06:54:38",
    "slug": "translating-model-fields",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/translating-model-fields/",
    "title": { "rendered": "Translating model fields" },
    "content": {
      "rendered": "\n<p>Let&#8217;s add&nbsp;<a></a>translations for your product catalog.&nbsp;<code>django-parler</code>&nbsp;provides a&nbsp;<code>TranslatableModel</code>&nbsp;model class and a&nbsp;<code>TranslatedFields</code>&nbsp;wrapper to translate model fields. Edit the&nbsp;<code>models.py</code>&nbsp;file inside the&nbsp;<code>shop</code>&nbsp;application directory and add&nbsp;the following import:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from parler.models import TranslatableModel, TranslatedFields\n</code></pre>\n\n\n\n<p>Then, modify the&nbsp;<code>Category</code>&nbsp;model to make the&nbsp;<code>name</code>&nbsp;and&nbsp;<code>slug</code>&nbsp;fields translatable, as&nbsp;follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Category(<strong>TranslatableModel</strong>):\n    <strong>translations = TranslatedFields(</strong>\n        <strong>name = models.CharField(max_length=200,</strong>\n                                <strong>db_index=True),</strong>\n        <strong>slug = models.SlugField(max_length=200,</strong>\n                                <strong>db_index=True,</strong>\n                                <strong>unique=True)</strong>\n    <strong>)</strong>\n</code></pre>\n\n\n\n<p>The&nbsp;<code>Category</code>&nbsp;model now inherits from&nbsp;<code>TranslatableModel</code>&nbsp;instead of&nbsp;<code>models.Model</code>&nbsp;and both the&nbsp;<code>name</code>&nbsp;and&nbsp;<code>slug</code>&nbsp;fields are included in the&nbsp;<code>TranslatedFields</code>&nbsp;wrapper.</p>\n\n\n\n<p>Edit the&nbsp;<code>Product</code>&nbsp;model to add translations for the&nbsp;<code>name</code>,&nbsp;<code>slug</code>, and&nbsp;<code>description</code>&nbsp;fields, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product(<strong>TranslatableModel</strong>):\n    <strong>translations = TranslatedFields(</strong>\n        <strong>name = models.CharField(max_length=200, db_index=True),</strong>\n        <strong>slug = models.SlugField(max_length=200, db_index=True),</strong>\n        <strong>description = models.TextField(blank=True)</strong>\n    <strong>)</strong>\n    category = models.ForeignKey(Category,\n                                 related_name='products')\n    image = models.ImageField(upload_to='products/%Y/%m/%d',\n                              blank=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    available = models.BooleanField(default=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n</code></pre>\n\n\n\n<p><code>django-parler</code>&nbsp;manages translations by generating another model for each translatable model. In the following schema, you can see the fields of the&nbsp;<code>Product</code>&nbsp;model and what the generated&nbsp;<code>ProductTranslation</code>&nbsp;model will look like:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_09.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.9: The Product model and related ProductTranslation model generated by django-parler</p>\n\n\n\n<p>The&nbsp;<code>ProductTranslation</code>&nbsp;model generated by&nbsp;<code>django-parler</code>&nbsp;includes the&nbsp;<code>name</code>,&nbsp;<code>slug</code>, and&nbsp;<code>description</code>&nbsp;translatable fields, a&nbsp;<code>language_code</code>&nbsp;field, and a&nbsp;<code>ForeignKey</code>&nbsp;for the master&nbsp;<code>Product</code>&nbsp;object. There is a one-to-many relationship from&nbsp;<code>Product</code>&nbsp;to&nbsp;<code>ProductTranslation</code>. A&nbsp;<code>ProductTranslation</code>&nbsp;object will exist for&nbsp;each available language&nbsp;<a></a>of each&nbsp;<code>Product</code>&nbsp;object.</p>\n\n\n\n<p>Since Django uses a separate table for translations, there are some Django features that you can&#8217;t use. It is not possible to use a default ordering by a translated field. You can filter by translated fields in queries, but you can&#8217;t include a translatable field&nbsp;in the&nbsp;<code>ordering Meta</code>&nbsp;options.</p>\n\n\n\n<p>Edit the&nbsp;<code>models.py</code>&nbsp;file of the&nbsp;<code>shop</code>&nbsp;application and comment out the&nbsp;<code>ordering</code>&nbsp;attribute of the&nbsp;<code>Category Meta</code>&nbsp;class:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Category(TranslatableModel):\n    <em># ...</em>\n    class Meta:\n        <strong><em># ordering = ('name',)</em></strong>\n        verbose_name = 'category'\n        verbose_name_plural = 'categories'\n</code></pre>\n\n\n\n<p>You also have to comment out the&nbsp;<code>ordering</code>&nbsp;and&nbsp;<code>index_together</code>&nbsp;attributes of the&nbsp;<code>Product Meta</code>&nbsp;class. The current version of&nbsp;<code>django-parler</code>&nbsp;does not provide support to validate&nbsp;<code>index_together</code>. Comment out the&nbsp;<code>Product Meta</code>&nbsp;class, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product(TranslatableModel):\n    # ...\n    <strong># class Meta:</strong>\n    <strong>#    ordering = ('-name',)</strong>\n    <strong>#    index_together = (('id', 'slug'),)</strong>\n</code></pre>\n\n\n\n<p>You can read more about the <code>django-parler</code> module&#8217;s compatibility with Django at https://django-parler.readthedocs.io/en/latest/compatibility.html.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s add&nbsp;translations for your product catalog.&nbsp;django-parler&nbsp;provides a&nbsp;TranslatableModel&nbsp;model class and a&nbsp;TranslatedFields&nbsp;wrapper to translate model fields. Edit the&nbsp;models.py&nbsp;file inside the&nbsp;shop&nbsp;application directory and add&nbsp;the following import: Then, modify the&nbsp;Category&nbsp;model to make the&nbsp;name&nbsp;and&nbsp;slug&nbsp;fields translatable, as&nbsp;follows: The&nbsp;Category&nbsp;model now inherits from&nbsp;TranslatableModel&nbsp;instead of&nbsp;models.Model&nbsp;and both the&nbsp;name&nbsp;and&nbsp;slug&nbsp;fields are included in the&nbsp;TranslatedFields&nbsp;wrapper. Edit the&nbsp;Product&nbsp;model to add translations for the&nbsp;name,&nbsp;slug, and&nbsp;description&nbsp;fields, as follows: django-parler&nbsp;manages translations by&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/translating-model-fields/\">Continue reading <span class=\"screen-reader-text\">Translating model fields</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3965" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3965"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3965/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3966,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3965/revisions/3966"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3965"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3965"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3965"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3967,
    "date": "2022-06-29T06:56:51",
    "date_gmt": "2022-06-29T06:56:51",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3967" },
    "modified": "2022-06-29T06:56:51",
    "modified_gmt": "2022-06-29T06:56:51",
    "slug": "integrating-translations-into-the-administration-site",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/integrating-translations-into-the-administration-site/",
    "title": {
      "rendered": "Integrating translations into the administration site"
    },
    "content": {
      "rendered": "\n<p><code>django-parler</code>&nbsp;<a></a>integrates smoothly with the Django administration site. It includes a&nbsp;<code>TranslatableAdmin</code>&nbsp;class that overrides the&nbsp;<code>ModelAdmin</code>&nbsp;class provided by Django to manage model translations.</p>\n\n\n\n<p>Edit the&nbsp;<code>admin.py</code>&nbsp;file of the&nbsp;<code>shop</code>&nbsp;application and add the following import to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from parler.admin import TranslatableAdmin\n</code></pre>\n\n\n\n<p>Modify the&nbsp;<code>CategoryAdmin</code>&nbsp;and&nbsp;<code>ProductAdmin</code>&nbsp;classes to inherit from&nbsp;<code>TranslatableAdmin</code>&nbsp;instead of&nbsp;<code>ModelAdmin</code>.&nbsp;<code>django-parler</code>&nbsp;doesn&#8217;t support the&nbsp;<code>prepopulated_fields</code>&nbsp;attribute, but it does support the&nbsp;<code>get_prepopulated_fields()</code>&nbsp;method that provides the same functionality. Let&#8217;s change this accordingly. Edit the&nbsp;<code>admin.py</code>&nbsp;file to make it look as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django.contrib import admin\n<strong>from parler.admin import TranslatableAdmin</strong>\nfrom .models import Category, Product\n@admin.register(Category)\nclass CategoryAdmin(<strong>TranslatableAdmin</strong>):\n    list_display = &#91;'name', 'slug']\n    <strong>def get_prepopulated_fields(self, request, obj=None):</strong>\n        <strong>return {'slug': ('name',)}</strong>\n@admin.register(Product)\nclass ProductAdmin(<strong>TranslatableAdmin</strong>):\n    list_display = &#91;'name', 'slug', 'price',\n                    'available', 'created', 'updated']\n    list_filter = &#91;'available', 'created', 'updated']\n    list_editable = &#91;'price', 'available']\n    <strong>def get_prepopulated_fields(self, request, obj=None):</strong>\n        <strong>return {'slug': ('name',)}</strong>\n</code></pre>\n\n\n\n<p>You have adapted the administration site to work with the new translated models. You can&nbsp;<a></a>now sync the database with the model changes that you made.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>django-parler&nbsp;integrates smoothly with the Django administration site. It includes a&nbsp;TranslatableAdmin&nbsp;class that overrides the&nbsp;ModelAdmin&nbsp;class provided by Django to manage model translations. Edit the&nbsp;admin.py&nbsp;file of the&nbsp;shop&nbsp;application and add the following import to it: Modify the&nbsp;CategoryAdmin&nbsp;and&nbsp;ProductAdmin&nbsp;classes to inherit from&nbsp;TranslatableAdmin&nbsp;instead of&nbsp;ModelAdmin.&nbsp;django-parler&nbsp;doesn&#8217;t support the&nbsp;prepopulated_fields&nbsp;attribute, but it does support the&nbsp;get_prepopulated_fields()&nbsp;method that provides the same functionality. Let&#8217;s change this accordingly. Edit the&nbsp;admin.py&nbsp;file&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/integrating-translations-into-the-administration-site/\">Continue reading <span class=\"screen-reader-text\">Integrating translations into the administration site</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3967" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3967"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3967/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3968,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3967/revisions/3968"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3967"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3967"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3967"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3969,
    "date": "2022-06-29T06:57:19",
    "date_gmt": "2022-06-29T06:57:19",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3969" },
    "modified": "2022-06-29T06:57:19",
    "modified_gmt": "2022-06-29T06:57:19",
    "slug": "creating-migrations-for-model-translations",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/creating-migrations-for-model-translations/",
    "title": { "rendered": "Creating migrations for model translations" },
    "content": {
      "rendered": "\n<p>Open the&nbsp;<a></a>shell and run the following command to create a new migration for the model translations:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py makemigrations shop --name \"translations\"\n</code></pre>\n\n\n\n<p>You will see the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Migrations for 'shop':\n  shop/migrations/0002_translations.py\n    - Change Meta options on category\n    - Change Meta options on product\n    - Remove field name from category\n    - Remove field slug from category\n    - Alter index_together for product (0 constraint(s))\n    - Remove field description from product\n    - Remove field name from product\n    - Remove field slug from product\n    - Create model ProductTranslation\n    - Create model CategoryTranslation\n</code></pre>\n\n\n\n<p>This migration automatically includes the&nbsp;<code>CategoryTranslation</code>&nbsp;and&nbsp;<code>ProductTranslation</code>&nbsp;models created dynamically by&nbsp;<code>django-parler</code>. It&#8217;s important to note that this migration deletes the previous existing fields from your models. This means that you will lose that data and will need to set your categories and products again in the administration site after running it.</p>\n\n\n\n<p>Edit the file&nbsp;<code>migrations/0002_translations.py</code>&nbsp;of the&nbsp;<code>shop</code>&nbsp;application and replace the two occurrences of the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bases=(parler.models.TranslatedFieldsModelMixin, models.Model),\n</code></pre>\n\n\n\n<p>with the following one:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bases=(parler.models.TranslatableModel, models.Model),\n</code></pre>\n\n\n\n<p>This is a fix for a minor issue found in the&nbsp;<code>django-parler</code>&nbsp;version you are using. This change is necessary to prevent the migration from failing when applying it. This issue is related to creating translations for existing fields in the model and will&nbsp;probably be fixed in newer&nbsp;<code>django-parler</code>&nbsp;versions.</p>\n\n\n\n<p>Run the following command to apply the migration:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py migrate shop\n</code></pre>\n\n\n\n<p>You will see an output that ends with the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Applying shop.0002_translations... OK\n</code></pre>\n\n\n\n<p>Your models are now synchronized with the database.</p>\n\n\n\n<p>Run the&nbsp;<a></a>development server using&nbsp;<code>python manage.py runserver</code>&nbsp;and open&nbsp;<code>http://127.0.0.1:8000/en/admin/shop/category/</code>&nbsp;in your browser. You will see that existing categories lost their name and slug due to deleting those fields and using the translatable models generated by&nbsp;<code>django-parler</code>&nbsp;instead. Click on a&nbsp;category to edit it. You will see that the&nbsp;<strong>Change category</strong>&nbsp;page includes two different tabs, one for English and one for Spanish translations:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_10.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.10: The category edit form, including language tabs added by django-parler</p>\n\n\n\n<p>Make sure that you fill in a name and slug for all existing categories. Also, add a&nbsp;Spanish translation for each of them and click the&nbsp;<strong>SAVE</strong>&nbsp;button. Make sure that&nbsp;you save the changes before you switch tab or you will lose them.</p>\n\n\n\n<p>After completing the data for existing categories, open&nbsp;<code>http://127.0.0.1:8000/en/admin/shop/product/</code>&nbsp;and edit each of the products, providing an English and Spanish name, a slug, and a description.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Open the&nbsp;shell and run the following command to create a new migration for the model translations: You will see the following output: This migration automatically includes the&nbsp;CategoryTranslation&nbsp;and&nbsp;ProductTranslation&nbsp;models created dynamically by&nbsp;django-parler. It&#8217;s important to note that this migration deletes the previous existing fields from your models. This means that you will lose that data and will&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/creating-migrations-for-model-translations/\">Continue reading <span class=\"screen-reader-text\">Creating migrations for model translations</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3969" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3969"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3969/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3970,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3969/revisions/3970"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3969"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3969"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3969"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3971,
    "date": "2022-06-29T06:58:16",
    "date_gmt": "2022-06-29T06:58:16",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3971" },
    "modified": "2022-06-29T06:58:16",
    "modified_gmt": "2022-06-29T06:58:16",
    "slug": "adapting-views-for-translations",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/adapting-views-for-translations/",
    "title": { "rendered": "Adapting views for translations" },
    "content": {
      "rendered": "\n<p>You have&nbsp;<a></a>to adapt your&nbsp;<code>shop</code>&nbsp;views to use translation QuerySets. Run the following command to open the Python shell:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py shell\n</code></pre>\n\n\n\n<p>Let&#8217;s take a look at how you can retrieve and query translation fields. To get the object with translatable fields translated in a specific language, you can use Django&#8217;s&nbsp;<code>activate()</code>&nbsp;function, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; from shop.models import Product\n&gt;&gt;&gt; from django.utils.translation import activate\n&gt;&gt;&gt; activate('es')\n&gt;&gt;&gt; product=Product.objects.first()\n&gt;&gt;&gt; product.name\n'Té verde'\n</code></pre>\n\n\n\n<p>Another way to do this is by using the&nbsp;<code>language()</code>&nbsp;manager provided by django-parler, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; product=Product.objects.language('en').first()\n&gt;&gt;&gt; product.name\n'Green tea'\n</code></pre>\n\n\n\n<p>When you access translated fields, they are resolved using the current language. You&nbsp;can set a different current language for an object to access that specific translation, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; product.set_current_language('es')\n&gt;&gt;&gt; product.name\n'Té verde'\n&gt;&gt;&gt; product.get_current_language()\n'es'\n</code></pre>\n\n\n\n<p>When performing a QuerySet using&nbsp;<code>filter()</code>, you can filter using the related translation objects with the&nbsp;<code>translations__</code>&nbsp;syntax, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; Product.objects.filter(translations__name='Green tea')\n&lt;TranslatableQuerySet &#91;&lt;Product: Té verde&gt;]&gt;\n</code></pre>\n\n\n\n<p>Let&#8217;s adapt the product catalog views. Edit the&nbsp;<code>views.py</code>&nbsp;file of the&nbsp;<code>shop</code>&nbsp;application and, in the&nbsp;<code>product_list</code>&nbsp;view, find the following line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>category = get_object_or_404(Category, slug=category_slug)\n</code></pre>\n\n\n\n<p>Replace it with the following ones:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>language = request.LANGUAGE_CODE</strong>\ncategory = get_object_or_404(Category,\n                             <strong>translations__language_code=language,</strong>\n                             <strong>translations__slug=category_slug</strong>)\n</code></pre>\n\n\n\n<p>Then, edit the&nbsp;<code>product_detail</code>&nbsp;view and find the following lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>product = get_object_or_404(Product,\n                            id=id,\n                            slug=slug,\n                            available=True)\n</code></pre>\n\n\n\n<p>Replace&nbsp;<a></a>them with the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>language = request.LANGUAGE_CODE</strong>\nproduct = get_object_or_404(Product,\n                            id=id,\n                            <strong>translations__language_code=language,</strong>\n                            <strong>translations__slug=slug,</strong>\n                            available=True)\n</code></pre>\n\n\n\n<p>The&nbsp;<code>product_list</code>&nbsp;and&nbsp;<code>product_detail</code>&nbsp;views are now adapted to retrieve objects using translated fields. Run the development server and open&nbsp;<code>http://127.0.0.1:8000/es/</code>&nbsp;in your browser. You should see the product list&nbsp;page, including all products translated into Spanish:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_11.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.11: The Spanish version of the product list page</p>\n\n\n\n<p>Now, each product&#8217;s URL is built using the&nbsp;<code>slug</code>&nbsp;field translated into the current language. For example, the URL for a product in Spanish is&nbsp;<code>http://127.0.0.1:8000/es/2/te-rojo/</code>, whereas in English, the URL is&nbsp;<code>http://127.0.0.1:8000/en/2/red-tea/</code>. If you navigate to a product detail page,&nbsp;you will see the translated URL and the contents of the selected language, as&nbsp;shown in the following example:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_12.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.12: The Spanish version of the product detail page</p>\n\n\n\n<p>If you want to know more about <code>django-parler</code>, you can find the full documentation at https://django-parler.readthedocs.io/en/latest/.</p>\n\n\n\n<p>You have&nbsp;<a></a>learned how to translate Python code, templates, URL patterns, and model fields. To complete the internationalization and localization process, you need to use localized formatting for dates, times, and numbers as well.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You have&nbsp;to adapt your&nbsp;shop&nbsp;views to use translation QuerySets. Run the following command to open the Python shell: Let&#8217;s take a look at how you can retrieve and query translation fields. To get the object with translatable fields translated in a specific language, you can use Django&#8217;s&nbsp;activate()&nbsp;function, as follows: Another way to do this is by&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/adapting-views-for-translations/\">Continue reading <span class=\"screen-reader-text\">Adapting views for translations</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3971" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3971"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3971/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3972,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3971/revisions/3972"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3971"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3971"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3971"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3973,
    "date": "2022-06-29T06:58:45",
    "date_gmt": "2022-06-29T06:58:45",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3973" },
    "modified": "2022-06-29T06:58:45",
    "modified_gmt": "2022-06-29T06:58:45",
    "slug": "format-localization",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/format-localization/",
    "title": { "rendered": "Format localization" },
    "content": {
      "rendered": "\n<p>Depending on the user&#8217;s locale, you might want to display dates, times, and numbers in different formats. Localized formatting can be activated by changing the&nbsp;<code>USE_L10N</code>&nbsp;setting to&nbsp;<code>True</code>&nbsp;in the&nbsp;<code>settings.py</code>&nbsp;file of your project.</p>\n\n\n\n<p>When <code>USE_L10N</code> is enabled, Django will try to use a locale-specific format whenever it outputs a value in a template. You can see that decimal numbers in the English version of your site are displayed with a dot separator for decimal places, while in the Spanish version, they are displayed using a comma. This is due to the locale formats specified for the <code>es</code> locale by Django. You can take a look at the Spanish formatting configuration at https://github.com/django/django/blob/stable/3.0.x/django/conf/locale/es/formats.py.</p>\n\n\n\n<p>Normally, you will set the&nbsp;<code>USE_L10N</code>&nbsp;setting to&nbsp;<code>True</code>&nbsp;and let Django apply the format localization for each locale. However, there might be situations in which you don&#8217;t want to use localized values. This is especially relevant when outputting JavaScript or JSON that has to provide a machine-readable format.</p>\n\n\n\n<p>Django offers a&nbsp;<code>{% localize %}</code>&nbsp;template tag that allows you to turn on/off localization for template fragments. This gives you control over localized formatting. You will have&nbsp;<a></a>to load the&nbsp;<code>l10n</code>&nbsp;tags to be able to use this template tag. The following is an example of how to turn localization on and off in a template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% load l10n %}\n{% localize on %}\n  {{ value }}\n{% endlocalize %}\n{% localize off %}\n  {{ value }}\n{% endlocalize %}\n</code></pre>\n\n\n\n<p>Django also offers the&nbsp;<code>localize</code>&nbsp;and&nbsp;<code>unlocalize</code>&nbsp;template filters to force or avoid the localization of a value. These filters can be applied as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{{ value|localize }}\n{{ value|unlocalize }}\n</code></pre>\n\n\n\n<p>You can also create custom format files to specify locale formatting. You can find further information about format localization at https://docs.djangoproject.com/en/3.0/topics/i18n/formatting/.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Depending on the user&#8217;s locale, you might want to display dates, times, and numbers in different formats. Localized formatting can be activated by changing the&nbsp;USE_L10N&nbsp;setting to&nbsp;True&nbsp;in the&nbsp;settings.py&nbsp;file of your project. When USE_L10N is enabled, Django will try to use a locale-specific format whenever it outputs a value in a template. You can see that decimal numbers in the&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/format-localization/\">Continue reading <span class=\"screen-reader-text\">Format localization</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3973" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3973"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3973/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3974,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3973/revisions/3974"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3973"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3973"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3973"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3975,
    "date": "2022-06-29T06:59:19",
    "date_gmt": "2022-06-29T06:59:19",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3975" },
    "modified": "2022-06-29T06:59:19",
    "modified_gmt": "2022-06-29T06:59:19",
    "slug": "using-django-localflavor-to-validate-form-fields",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/using-django-localflavor-to-validate-form-fields/",
    "title": { "rendered": "Using django-localflavor to validate form fields" },
    "content": {
      "rendered": "\n<p><code>django-localflavor</code>&nbsp;is a third-party module that contains a collection of utils, such as form fields or&nbsp;<a></a>model fields, that are specific for each country. It&#8217;s very useful for validating local regions, local phone numbers, identity card numbers, social security numbers, and so on. The package is organized into a series of modules named after ISO 3166 country codes.</p>\n\n\n\n<p>Install&nbsp;<code>django-localflavor</code>&nbsp;using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install django-localflavor==3.0.1\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>settings.py</code>&nbsp;file of your project and add&nbsp;<code>localflavor</code>&nbsp;to the&nbsp;<code>INSTALLED_APPS</code>&nbsp;setting, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSTALLED_APPS = &#91;\n    <em># ...</em>\n    <strong>'localflavor',</strong>\n]\n</code></pre>\n\n\n\n<p>You are going to add the United States&#8217; zip code field so that a valid United States zip code is required to create a new order.</p>\n\n\n\n<p>Edit the&nbsp;<code>forms.py</code>&nbsp;file of the&nbsp;<code>orders</code>&nbsp;application and make it look as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from django import forms\n<strong>from localflavor.us.forms import USZipCodeField</strong>\nfrom .models import Order\nclass OrderCreateForm(forms.ModelForm):\n    <strong>postal_code = USZipCodeField()</strong>\n    class Meta:\n        model = Order\n        fields = &#91;'first_name', 'last_name', 'email', 'address',\n                  'postal_code', 'city']\n</code></pre>\n\n\n\n<p>You import the&nbsp;<code>USZipCodeField</code>&nbsp;field from the&nbsp;<code>us</code>&nbsp;package of&nbsp;<code>localflavor</code>&nbsp;and&nbsp;use it for the&nbsp;<code>postal_code</code>&nbsp;field of the&nbsp;<code>OrderCreateForm</code>&nbsp;form.</p>\n\n\n\n<p>Run the&nbsp;<a></a>development server and open&nbsp;<code>http://127.0.0.1:8000/en/orders/create/</code>&nbsp;in your browser. Fill in all fields, enter a three-letter zip code, and then submit the form. You will get the following validation error that is raised by&nbsp;<code>USZipCodeField</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a zip code in the format XXXXX or XXXXX-XXXX.\n</code></pre>\n\n\n\n<p>This is just a brief example of how to use a custom field from <code>localflavor</code> in your own project for validation purposes. The local components provided by <code>localflavor</code> are very useful for adapting your application to specific countries. You can read the <code>django-localflavor</code> documentation and see all available local components for each country at https://django-localflavor.readthedocs.io/en/latest/.</p>\n\n\n\n<p>Next, you are going to build a recommendation engine into your shop.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>django-localflavor&nbsp;is a third-party module that contains a collection of utils, such as form fields or&nbsp;model fields, that are specific for each country. It&#8217;s very useful for validating local regions, local phone numbers, identity card numbers, social security numbers, and so on. The package is organized into a series of modules named after ISO 3166 country&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/using-django-localflavor-to-validate-form-fields/\">Continue reading <span class=\"screen-reader-text\">Using django-localflavor to validate form fields</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3975" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3975"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3975/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3976,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3975/revisions/3976"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3975"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3975"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3975"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3978,
    "date": "2022-06-29T07:00:25",
    "date_gmt": "2022-06-29T07:00:25",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3978" },
    "modified": "2022-06-29T07:00:25",
    "modified_gmt": "2022-06-29T07:00:25",
    "slug": "building-a-recommendation-engine",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/building-a-recommendation-engine/",
    "title": { "rendered": "Building a recommendation engine" },
    "content": {
      "rendered": "\n<p>A recommendation engine is a system that predicts the preference or rating that a&nbsp;user would give to an item. The system selects relevant items for a user based on their behavior and&nbsp;<a></a>the knowledge it has about them. Nowadays, recommendation systems are used in many online services. They help users by selecting the stuff they might be interested in from the vast amount of available data that is irrelevant to them. Offering good recommendations enhances user engagement. E-commerce sites&nbsp;also benefit from offering relevant product recommendations by increasing their average revenue per user.</p>\n\n\n\n<p>You are going to create a simple, yet powerful, recommendation engine that suggests&nbsp;products that are usually bought together. You will suggest products based&nbsp;on historical sales, thus identifying products that are usually bought together. You are going to suggest&nbsp;<a></a>complementary products in two different scenarios:</p>\n\n\n\n<ul><li><strong>Product detail page</strong>: You will display a list of products that are usually bought with&nbsp;<a></a>the given product. This will be displayed as&nbsp;<em>users who bought this also bought X, Y, Z</em>. You need a data structure that allows you to store the number of times that each product has been bought together with the product being displayed.</li><li><strong>Cart detail page</strong>: Based on&nbsp;<a></a>the products users add to the cart, you are going to suggest products that are usually bought together with these ones. In this case, the score you calculate to obtain related products has to be aggregated.</li></ul>\n\n\n\n<p>You are going to use Redis to store products that are purchased together. Remember that you already used Redis, <em>Tracking User Actions</em>. If you haven&#8217;t installed Redis yet, you can find installation instructions.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A recommendation engine is a system that predicts the preference or rating that a&nbsp;user would give to an item. The system selects relevant items for a user based on their behavior and&nbsp;the knowledge it has about them. Nowadays, recommendation systems are used in many online services. They help users by selecting the stuff they might&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/building-a-recommendation-engine/\">Continue reading <span class=\"screen-reader-text\">Building a recommendation engine</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3978" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3978"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3978/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3979,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3978/revisions/3979"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3978"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3978"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3978"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  },
  {
    "id": 3980,
    "date": "2022-06-29T07:01:44",
    "date_gmt": "2022-06-29T07:01:44",
    "guid": { "rendered": "https://java.foobrdigital.com/?p=3980" },
    "modified": "2022-06-29T07:01:44",
    "modified_gmt": "2022-06-29T07:01:44",
    "slug": "recommending-products-based-on-previous-purchases",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/recommending-products-based-on-previous-purchases/",
    "title": {
      "rendered": "Recommending products based on previous purchases"
    },
    "content": {
      "rendered": "\n<p>You will recommend products to users based on what they have added to the cart. You are going to&nbsp;<a></a>store a key in Redis for each product bought on your site. The product key will contain a Redis sorted set with scores. You will increment the score by 1 for each product bought together every time a new purchase is completed. The sorted set will allow you to give scores to products that are bought together.</p>\n\n\n\n<p>Remember to install&nbsp;<code>redis-py</code>&nbsp;in your environment using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install redis==3.4.1\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>settings.py</code>&nbsp;file of your project and add the following settings to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>REDIS_HOST = 'localhost'\nREDIS_PORT = 6379\nREDIS_DB = 1\n</code></pre>\n\n\n\n<p>These are the settings required to establish a connection with the Redis server. Create a new file inside the&nbsp;<code>shop</code>&nbsp;application directory and name it&nbsp;<code>recommender.py</code>. Add the following code to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import redis\nfrom django.conf import settings\nfrom .models import Product\n<em># connect to redis</em>\nr = redis.Redis(host=settings.REDIS_HOST,\n                port=settings.REDIS_PORT,\n                db=settings.REDIS_DB)\nclass Recommender(object):\n    def get_product_key(self, id):\n        return f'product:{id}:purchased_with'\n    def products_bought(self, products):\n        product_ids = &#91;p.id for p in products]\n        for product_id in product_ids:\n            for with_id in product_ids:\n                # get the other products bought with each product\n                if product_id != with_id:\n                    # increment score for product purchased together\n                    r.zincrby(self.get_product_key(product_id),\n                              1,\n                              with_id)\n</code></pre>\n\n\n\n<p>This is the&nbsp;<code>Recommender</code>&nbsp;class that will allow you to store product purchases and retrieve product suggestions for a given product or products.</p>\n\n\n\n<p>The&nbsp;<code>get_product_key()</code>&nbsp;method&nbsp;<a></a>receives an ID of a&nbsp;<code>Product</code>&nbsp;object and builds the Redis key for the sorted set where related products are stored, which looks like&nbsp;<code>product:[id]:purchased_with</code>.</p>\n\n\n\n<p>The&nbsp;<code>products_bought()</code>&nbsp;method receives a list of&nbsp;<code>Product</code>&nbsp;objects that have been bought together (that is, belong to the same order).</p>\n\n\n\n<p>In this method, you perform the following tasks:</p>\n\n\n\n<ol><li>You get the product IDs for the given&nbsp;<code>Product</code>&nbsp;objects.</li><li>You iterate over the product IDs. For each ID, you iterate again over the product IDs and skip the same product so that you get the products that are&nbsp;bought together with each product.</li><li>You get the Redis product key for each product bought using the&nbsp;<code>get_product_id()</code>&nbsp;method. For a product with an ID of&nbsp;<code>33</code>, this method returns the key&nbsp;<code>product:33:purchased_with</code>. This is the key for the sorted set that contains the product IDs of products that were bought together with this one.</li><li>You increment the score of each product ID contained in the sorted set by 1. The score represents the times another product has been bought together with the given product.</li></ol>\n\n\n\n<p>You now have a method to store and score the products that were bought together. Next, you need a&nbsp;<a></a>method to retrieve the products that were bought together for a list of given products. Add the following&nbsp;<code>suggest_products_for()</code>&nbsp;method to the&nbsp;<code>Recommender</code>&nbsp;class:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def suggest_products_for(self, products, max_results=6):\n    product_ids = &#91;p.id for p in products]\n    if len(products) == 1:\n<em>        # only 1 product</em>\n        suggestions = r.zrange(\n                         self.get_product_key(product_ids&#91;0]),\n                         0, -1, desc=True)&#91;:max_results]\n    else:\n<em>        # generate a temporary key</em>\n        flat_ids = ''.join(&#91;str(id) for id in product_ids])\n        tmp_key = f'tmp_{flat_ids}'\n<em>        # multiple products, combine scores of all products</em>\n<em>        # store the resulting sorted set in a temporary key</em>\n        keys = &#91;self.get_product_key(id) for id in product_ids]\n        r.zunionstore(tmp_key, keys)\n<em>        # remove ids for the products the recommendation is for</em>\n        r.zrem(tmp_key, *product_ids)\n<em>        # get the product ids by their score, descendant sort</em>\n        suggestions = r.zrange(tmp_key, 0, -1,\n                               desc=True)&#91;:max_results]\n<em>        # remove the temporary key</em>\n        r.delete(tmp_key)\n    suggested_products_ids = &#91;int(id) for id in suggestions]\n<em>    # get suggested products and sort by order of appearance</em>\n    suggested_products = list(Product.objects.filter(id__in=suggested_products_ids))\n    suggested_products.sort(key=lambda x: suggested_products_ids.index(x.id))\n    return suggested_products\n</code></pre>\n\n\n\n<p>The&nbsp;<code>suggest_products_for()</code>&nbsp;method receives the following parameters:</p>\n\n\n\n<ul><li><code>products</code>: This is a list of&nbsp;<code>Product</code>&nbsp;objects to get recommendations for. It&nbsp;can&nbsp;contain one or more products.</li><li><code>max_results</code>: This is an integer that represents the maximum number of&nbsp;recommendations to return.</li></ul>\n\n\n\n<p>In this method, you perform the following actions:</p>\n\n\n\n<ol><li>You get the product IDs for the given <code>Product</code> objects.</li><li>If only one product is given, you retrieve the ID of the products that were bought together with the given product, ordered by the total number of times that they were bought together. To do so, you use Redis&#8217; <code>ZRANGE</code> command. You limit the number of results to the number specified in the <code>max_results</code> attribute (<code>6</code> by default).</li><li>If more than one product is given, you generate a temporary Redis key built with the IDs of the products.</li><li>You combine and sum all scores for the items contained in the sorted set of each of the given products. This is done using the Redis <code>ZUNIONSTORE</code> command. The <code>ZUNIONSTORE</code> command performs a union of the sorted sets with the given keys, and stores the aggregated sum of scores of the elements in a new Redis key. You can read more about this command at https://redis.io/commands/ZUNIONSTORE. You save the aggregated scores in the temporary key.</li><li>Since you are aggregating scores, you might obtain the same products you are getting recommendations for. You remove them from the generated sorted set using the <code>ZREM</code> command.</li><li>You retrieve the IDs of the products from the temporary key, ordered by their score using the <code>ZRANGE</code> command. You limit the number of results to the number specified in the <code>max_results</code> attribute. Then, you remove the temporary key.</li><li>Finally, you get the <code>Product</code> objects with the given IDs and you order the products in the same order as them.</li></ol>\n\n\n\n<p>For practical purposes, let&#8217;s also add a method to clear the recommendations. Add the following method to the&nbsp;<code>Recommender</code>&nbsp;class:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def clear_purchases(self):\n    for id in Product.objects.values_list('id', flat=True):\n        r.delete(self.get_product_key(id))\n</code></pre>\n\n\n\n<p>Let&#8217;s try your recommendation engine. Make sure you include several&nbsp;<code>Product</code>&nbsp;objects in the database and initialize the Redis server using the following command from the shell in your Redis directory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>src/redis-server\n</code></pre>\n\n\n\n<p>Open another shell and run the following command to open the Python shell:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python manage.py shell\n</code></pre>\n\n\n\n<p>Make sure that you have at least four different products in your database. Retrieve four different products by their names:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; from shop.models import Product\n&gt;&gt;&gt; black_tea = Product.objects.get(translations__name='Black tea')\n&gt;&gt;&gt; red_tea = Product.objects.get(translations__name='Red tea')\n&gt;&gt;&gt; green_tea = Product.objects.get(translations__name='Green tea')\n&gt;&gt;&gt; tea_powder = Product.objects.get(translations__name='Tea powder')\n</code></pre>\n\n\n\n<p>Then, add some&nbsp;<a></a>test purchases to the recommendation engine:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; from shop.recommender import Recommender\n&gt;&gt;&gt; r = Recommender()\n&gt;&gt;&gt; r.products_bought(&#91;black_tea, red_tea])\n&gt;&gt;&gt; r.products_bought(&#91;black_tea, green_tea])\n&gt;&gt;&gt; r.products_bought(&#91;red_tea, black_tea, tea_powder])\n&gt;&gt;&gt; r.products_bought(&#91;green_tea, tea_powder])\n&gt;&gt;&gt; r.products_bought(&#91;black_tea, tea_powder])\n&gt;&gt;&gt; r.products_bought(&#91;red_tea, green_tea])\n</code></pre>\n\n\n\n<p>You have stored the following scores:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>black_tea:  red_tea (2), tea_powder (2), green_tea (1)\nred_tea:    black_tea (2), tea_powder (1), green_tea (1)\ngreen_tea:  black_tea (1), tea_powder (1), red_tea(1)\ntea_powder: black_tea (2), red_tea (1), green_tea (1)\n</code></pre>\n\n\n\n<p>Let&#8217;s activate a language to retrieve translated products and get product recommendations to buy together with a given single product:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; from django.utils.translation import activate\n&gt;&gt;&gt; activate('en')\n&gt;&gt;&gt; r.suggest_products_for(&#91;black_tea])\n&#91;&lt;Product: Tea powder&gt;, &lt;Product: Red tea&gt;, &lt;Product: Green tea&gt;]\n&gt;&gt;&gt; r.suggest_products_for(&#91;red_tea])\n&#91;&lt;Product: Black tea&gt;, &lt;Product: Tea powder&gt;, &lt;Product: Green tea&gt;]\n&gt;&gt;&gt; r.suggest_products_for(&#91;green_tea])\n&#91;&lt;Product: Black tea&gt;, &lt;Product: Tea powder&gt;, &lt;Product: Red tea&gt;]\n&gt;&gt;&gt; r.suggest_products_for(&#91;tea_powder])\n&#91;&lt;Product: Black tea&gt;, &lt;Product: Red tea&gt;, &lt;Product: Green tea&gt;]\n</code></pre>\n\n\n\n<p>You can see that the order for recommended products is based on their score. Let&#8217;s get recommendations for multiple products with aggregated scores:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&gt;&gt;&gt; r.suggest_products_for(&#91;black_tea, red_tea])\n&#91;&lt;Product: Tea powder&gt;, &lt;Product: Green tea&gt;]\n&gt;&gt;&gt; r.suggest_products_for(&#91;green_tea, red_tea])\n&#91;&lt;Product: Black tea&gt;, &lt;Product: Tea powder&gt;]\n&gt;&gt;&gt; r.suggest_products_for(&#91;tea_powder, black_tea])\n&#91;&lt;Product: Red tea&gt;, &lt;Product: Green tea&gt;]\n</code></pre>\n\n\n\n<p>You can see that the order of the suggested products matches the aggregated scores. For example, products suggested for&nbsp;<code>black_tea</code>&nbsp;and&nbsp;<code>red_tea</code>&nbsp;are&nbsp;<code>tea_powder</code>&nbsp;(<code>2+1</code>) and&nbsp;<code>green_tea</code>&nbsp;(<code>1+1</code>).</p>\n\n\n\n<p>You have&nbsp;<a></a>verified that your recommendation algorithm works as expected. Let&#8217;s now display recommendations for products on your site.</p>\n\n\n\n<p>Edit the&nbsp;<code>views.py</code>&nbsp;file of the&nbsp;<code>shop</code>&nbsp;application. Add the functionality to retrieve a maximum of four recommended products in the&nbsp;<code>product_detail</code>&nbsp;view, as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from .recommender import Recommender</strong>\ndef product_detail(request, id, slug):\n    language = request.LANGUAGE_CODE\n    product = get_object_or_404(Product,\n                                id=id,\n                                translations__language_code=language,\n                                translations__slug=slug,\n                                available=True)\n    cart_product_form = CartAddProductForm()\n    <strong>r = Recommender()</strong>\n    <strong>recommended_products = r.suggest_products_for(&#91;product], 4)</strong>\n    return render(request,\n                  'shop/product/detail.html',\n                  {'product': product,\n                  'cart_product_form': cart_product_form,\n                  <strong>'recommended_products': recommended_products</strong>})\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>shop/product/detail.html</code>&nbsp;template of the&nbsp;<code>shop</code>&nbsp;application and add the following code after&nbsp;<code>{{ product.description|linebreaks }}</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% if recommended_products %}\n  &lt;div class=\"recommendations\"&gt;\n    &lt;h3&gt;{% trans \"People who bought this also bought\" %}&lt;/h3&gt;\n    {% for p in recommended_products %}\n      &lt;div class=\"item\"&gt;\n        &lt;a href=\"{{ p.get_absolute_url }}\"&gt;\n          &lt;img src=\"{% if p.image %}{{ p.image.url }}{% else %}\n          {% static  \"img/no_image.png\" %}{% endif %}\"&gt;\n        &lt;/a&gt;\n        &lt;p&gt;&lt;a href=\"{{ p.get_absolute_url }}\"&gt;{{ p.name }}&lt;/a&gt;&lt;/p&gt;\n      &lt;/div&gt;\n    {% endfor %}\n  &lt;/div&gt;\n{% endif %}\n</code></pre>\n\n\n\n<p>Run the development server and open&nbsp;<code>http://127.0.0.1:8000/en/</code>&nbsp;in your browser. Click on any&nbsp;<a></a>product to view its details. You should see that recommended products are displayed below the product, as shown in the following screenshot:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_13.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.13: The product detail page, including recommended products</p>\n\n\n\n<p>You are also going to include product recommendations in the cart. The recommendations will be based on the products that the user has added to the cart.</p>\n\n\n\n<p>Edit&nbsp;<code>views.py</code>&nbsp;inside the&nbsp;<code>cart</code>&nbsp;application, import the&nbsp;<code>Recommender</code>&nbsp;class, and edit the&nbsp;<code>cart_detail</code>&nbsp;view to make it look as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code><strong>from shop.recommender import Recommender</strong>\ndef cart_detail(request):\n    cart = Cart(request)\n    for item in cart:\n        item&#91;'update_quantity_form'] = CartAddProductForm(initial={\n                            'quantity': item&#91;'quantity'],\n                            'override': True})\n    coupon_apply_form = CouponApplyForm()\n    <strong>r = Recommender()</strong>\n    <strong>cart_products = &#91;item&#91;'product'] for item in cart]</strong>\n    <strong>recommended_products = r.suggest_products_for(cart_products,</strong>\n<strong>                                                  max_results=4)</strong>\nreturn render(request,\n              'cart/detail.html',\n              {'cart': cart,\n               'coupon_apply_form': coupon_apply_form,\n               <strong>'recommended_products': recommended_products</strong>})\n</code></pre>\n\n\n\n<p>Edit the&nbsp;<code>cart/detail.html</code>&nbsp;template of the&nbsp;<code>cart</code>&nbsp;application and add the following code&nbsp;<a></a>just after the&nbsp;<code>&lt;/table&gt;</code>&nbsp;HTML tag:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% if recommended_products %}\n  &lt;div class=\"recommendations cart\"&gt;\n    &lt;h3&gt;{% trans \"People who bought this also bought\" %}&lt;/h3&gt;\n    {% for p in recommended_products %}\n      &lt;div class=\"item\"&gt;\n        &lt;a href=\"{{ p.get_absolute_url }}\"&gt;\n          &lt;img src=\"{% if p.image %}{{ p.image.url }}{% else %}\n          {% static \"img/no_image.png\" %}{% endif %}\"&gt;\n        &lt;/a&gt;\n        &lt;p&gt;&lt;a href=\"{{ p.get_absolute_url }}\"&gt;{{ p.name }}&lt;/a&gt;&lt;/p&gt;\n      &lt;/div&gt;\n    {% endfor %}\n  &lt;/div&gt;\n{% endif %}\n</code></pre>\n\n\n\n<p>Open&nbsp;<code>http://127.0.0.1:8000/en/</code>&nbsp;in your browser and add a couple of products to your cart. When you navigate to&nbsp;<code>http://127.0.0.1:8000/en/cart/</code>, you should see the aggregated product recommendations for the items in the cart, as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://learning.oreilly.com/api/v2/epubs/urn:orm:book:9781838981952/files/Images/B14981_09_14.png\" alt=\"\"/></figure>\n\n\n\n<p>Figure 9.14: The shopping cart detail page, including recommended products</p>\n\n\n\n<p>Congratulations! You have&nbsp;<a></a>built a complete recommendation engine using Django and Redis.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You will recommend products to users based on what they have added to the cart. You are going to&nbsp;store a key in Redis for each product bought on your site. The product key will contain a Redis sorted set with scores. You will increment the score by 1 for each product bought together every time&hellip; <a class=\"more-link\" href=\"https://java.foobrdigital.com/recommending-products-based-on-previous-purchases/\">Continue reading <span class=\"screen-reader-text\">Recommending products based on previous purchases</span></a></p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [133],
    "tags": [],
    "_links": {
      "self": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3980" }
      ],
      "collection": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts" }
      ],
      "about": [
        { "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post" }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=3980"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3980/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 3981,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/3980/revisions/3981"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=3980"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=3980"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=3980"
        }
      ],
      "curies": [
        { "name": "wp", "href": "https://api.w.org/{rel}", "templated": true }
      ]
    }
  }
]
