[{"id":5115,"date":"2022-12-04T06:42:30","date_gmt":"2022-12-04T06:42:30","guid":{"rendered":"https://angular.foobrdigital.com/?p=5115"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"what-is-rxjs","status":"publish","type":"post","link":"https://angular.foobrdigital.com/what-is-rxjs/","title":{"rendered":"What is RxJS?"},"content":{"rendered":"\n<p id=\"faf4\">It’s distracting when someone teaches you a new thing without first defining what that thing is.&nbsp;<a href=\"https://rxjs-dev.firebaseapp.com/\" rel=\"noreferrer noopener\" target=\"_blank\">RxJS</a>&nbsp;stands for&nbsp;<a href=\"http://reactivex.io/\" rel=\"noreferrer noopener\" target=\"_blank\">Reactive Extensions</a>&nbsp;for JavaScript. It’s a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type: the&nbsp;<strong>Observable</strong>&nbsp;and three satellite types:&nbsp;<strong>Observer</strong>,&nbsp;<strong>Scheduler</strong>, and&nbsp;<strong>Subject</strong>. RxJS also provides over 100 operators inspired by Array extras — for example, map, filter, reduce, every, and more — to allow handling asynchronous events as collections.</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://miro.medium.com/max/200/1*b_CokII2C2_7-FagtSfrQA.png\" alt=\"\"/><figcaption class=\"wp-element-caption\">RxJS Logo</figcaption></figure>\n\n\n\n<p id=\"656f\">Now there’s another big distraction! By defining RxJS for you, I’ve introduced a ton of loaded concepts that you might not understand yet. That’s okay if you don’t understand them yet! This series of articles is dedicated to people who might not understand all of those concepts yet, and I’m about to explain them to you. I’m not going to explain computer science basics such as libraries or arrays and collections. Before you read this article you will need to know at least that much.</p>\n","protected":false},"excerpt":{"rendered":"<p>It’s distracting when someone teaches you a new thing without first defining what that thing is.&nbsp;RxJS&nbsp;stands for&nbsp;Reactive Extensions&nbsp;for JavaScript. It’s a library for composing asynchronous and event-based programs by using observable sequences. It provides one core type: the&nbsp;Observable&nbsp;and three satellite types:&nbsp;Observer,&nbsp;Scheduler, and&nbsp;Subject. RxJS also provides over 100 operators inspired by Array extras — for example, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5115"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5115"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5115/revisions"}],"predecessor-version":[{"id":5116,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5115/revisions/5116"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5115"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5115"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5115"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5117,"date":"2022-12-04T06:28:05","date_gmt":"2022-12-04T06:28:05","guid":{"rendered":"https://angular.foobrdigital.com/?p=5117"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"what-are-asynchronous-programs","status":"publish","type":"post","link":"https://angular.foobrdigital.com/what-are-asynchronous-programs/","title":{"rendered":"What Are Asynchronous Programs?"},"content":{"rendered":"\n<p id=\"6efd\">Web applications have changed a ton over the years from being simple static pages to animated monstrosities to server-side rendered screen-dumps, to asynchronous single-page applications. There are hundreds of minor steps and innovations in between and even after those big steps, but I’d say we’re still in the era of the single page application. Heretofore I will refer to them as SPAs.</p>\n\n\n\n<p id=\"0d35\">Old-fashioned websites required refreshing of the entire page in order to go to another page — even if a lot of the pieces of that web page remained the same such as the sidebar, navigation bar, or footer section. These were mainly collections of files just moved onto a server where each page was just a static thing and you had links that moved you between them. That sucked because you had to wait for things to load every time and the screen would constantly repaint the entire thing even in situations where everything should look exactly the same. What saved us from this pain was AJAX.</p>\n\n\n\n<p id=\"737e\">AJAX —&nbsp;<strong>A</strong>synchronous&nbsp;<strong>J</strong>avaScript&nbsp;<strong>A</strong>nd&nbsp;<strong>X</strong>ML — was every developer’s dream because you can:</p>\n\n\n\n<ul>\n<li>Read data from a web server — after the page has loaded</li>\n\n\n\n<li>Update a web page without reloading the page</li>\n\n\n\n<li>Send data to a web server — in the background</li>\n</ul>\n\n\n\n<p id=\"49c9\">It’s not a programming language, just a method of doing the above things using a combination of browsers’ built-in XMLHttpRequest object and JavaScript + HTML DOM—if you need to dynamically change something on the page visually.</p>\n\n\n\n<p id=\"40d7\">This concept became the foundation of the SPA which has allowed endlessly more powerful applications to be built for the Internet. So what is asynchronous? The answer is any logic that isn’t done by the application synchronously. That isn’t a fulfilling answer though, so let me break it down further.</p>\n\n\n\n<p id=\"9497\">To display useful data to your user on their screen, you first need to have that data in your application. If you need data that your application doesn’t have hard-coded into it, then you’ll have to get that data from somewhere, usually a server on the internet somewhere. To get that data you’re going to have to make an HttpRequest to that server asking for it. The thing is, it’s impossible to know exactly how long it will take before that server will deliver your data to your application. Therefore it took an indefinite amount of time to accomplish that piece of logic giving you the data you asked for. The response didn’t come synchronously — or line after line of code — instead it came whenever it came. Usually, you’ve written some code prepared to do something with that data upon receipt. That’s why it’s called asynchronous.</p>\n","protected":false},"excerpt":{"rendered":"<p>Web applications have changed a ton over the years from being simple static pages to animated monstrosities to server-side rendered screen-dumps, to asynchronous single-page applications. There are hundreds of minor steps and innovations in between and even after those big steps, but I’d say we’re still in the era of the single page application. Heretofore [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5117"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5117"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5117/revisions"}],"predecessor-version":[{"id":5118,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5117/revisions/5118"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5117"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5117"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5117"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5119,"date":"2022-12-04T06:28:19","date_gmt":"2022-12-04T06:28:19","guid":{"rendered":"https://angular.foobrdigital.com/?p=5119"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"what-are-event-based-programs","status":"publish","type":"post","link":"https://angular.foobrdigital.com/what-are-event-based-programs/","title":{"rendered":"What Are Event-based Programs?"},"content":{"rendered":"\n<p id=\"d0c9\">The paradigm of event-driven programming is a pretty simple concept. You build your program so that it reacts to user actions — such as mouse clicks, key presses, and voice-activation — sensor outputs, or messages containing data from other programs — including programs running on other servers. In Angular, all of your logic is based on such events. So it makes perfect sense that Angular decided to include RxJS as a core library, because RxJS is about making it easy to react to events.</p>\n\n\n\n<p id=\"4c3c\">Even though RxJS is requisite for the Angular framework, some developers opt into not using it more than absolutely necessary. Part of the reason they do this is that we were reacting to events long before RxJS existed using callbacks and promises. Another part of the reason some developers don’t use RxJS much is that it adds a learning curve to your development and even though observables are here to stay, it’s not always easy to justify learning a new thing when you’re heads-down working on building new features and fixing bugs for your company. I’d argue that we constantly need to be improving our knowledge and skillsets — even if it’s on our own time — but even if it’s necessary, it’s not always easy to make time for it.</p>\n","protected":false},"excerpt":{"rendered":"<p>The paradigm of event-driven programming is a pretty simple concept. You build your program so that it reacts to user actions — such as mouse clicks, key presses, and voice-activation — sensor outputs, or messages containing data from other programs — including programs running on other servers. In Angular, all of your logic is based on such [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5119"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5119"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5119/revisions"}],"predecessor-version":[{"id":5120,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5119/revisions/5120"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5119"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5119"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5119"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5121,"date":"2022-12-04T06:28:31","date_gmt":"2022-12-04T06:28:31","guid":{"rendered":"https://angular.foobrdigital.com/?p=5121"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"what-is-an-observable","status":"publish","type":"post","link":"https://angular.foobrdigital.com/what-is-an-observable/","title":{"rendered":"What Is An Observable?"},"content":{"rendered":"\n<p id=\"48b2\">An observable represents the idea of an invokable collection of future values or events. For now, I just want you to think of it as a tool in your programming for handling asynchronous logic. I’ll go into greater depth on observables in the upcoming lessons.</p>\n","protected":false},"excerpt":{"rendered":"<p>An observable represents the idea of an invokable collection of future values or events. For now, I just want you to think of it as a tool in your programming for handling asynchronous logic. I’ll go into greater depth on observables in the upcoming lessons.</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5121"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5121"}],"version-history":[{"count":2,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5121/revisions"}],"predecessor-version":[{"id":5123,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5121/revisions/5123"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5121"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5121"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5121"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5124,"date":"2022-12-04T06:30:47","date_gmt":"2022-12-04T06:30:47","guid":{"rendered":"https://angular.foobrdigital.com/?p=5124"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"rxjs-in-angular","status":"publish","type":"post","link":"https://angular.foobrdigital.com/rxjs-in-angular/","title":{"rendered":"RxJS in Angular"},"content":{"rendered":"\n<p id=\"7d54\">While RxJS isn’t only used in Angular, it is a proud member of the Angular ecosystem. But it might not have been if it weren’t for&nbsp;</p>\n\n\n\n<p>Ben Lesh.</p>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://miro.medium.com/max/800/1*pshLZm-pYeC6FaQmL8lInQ.jpeg\" alt=\"Ben Lesh presenting at ng-conf 2018\"/><figcaption class=\"wp-element-caption\">Ben Lesh presenting at ng-conf 2018</figcaption></figure>\n\n\n\n<h2 id=\"2af8\">A Brief History</h2>\n\n\n\n<p id=\"e29c\">During the early, early days of Angular 2, a new hire named Ben Lesh that had recently come from working at Netflix shared his ideas around async with Igor Minar and Misko Hevery. He concluded that promises weren’t the ideal abstraction of async primarily because of a lack of sufficient handling of cancellation. Ben set up a meeting between those two and Jafar Husain, the Cross-Team Technical Lead for the Netflix UIs.</p>\n\n\n\n<h2 id=\"9f37\">Where is RxJS Today?</h2>\n\n\n\n<p id=\"eee4\">The following features in Angular leverage Observables by default:</p>\n\n\n\n<ul>\n<li><strong>Routing&nbsp;</strong>emits parameters via a paramMap Observable</li>\n\n\n\n<li><strong>FormControl&nbsp;</strong>emits a value via a valueChanges Observable</li>\n\n\n\n<li><strong>HttpClient&nbsp;</strong>emits the response via an Observable</li>\n\n\n\n<li><strong>Output/event-emitters</strong>&nbsp;generate Observables</li>\n\n\n\n<li>Angular has a built-in&nbsp;<strong>Async pipe</strong>&nbsp;for automatically unwrapping observable-contained values in templates.</li>\n</ul>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://miro.medium.com/max/1400/1*f18o2zj1kJuqYhnci_Z-0Q.png\" alt=\"A bunch of well known company logos that use ReactiveX for their products.\"/><figcaption class=\"wp-element-caption\">There are many others + every company that uses Angular!</figcaption></figure>\n\n\n\n<p id=\"bb4b\">Here are some other really cool facts about RxJS today:</p>\n\n\n\n<ul>\n<li>RxJS became the cornerstone of state in Angular, for example NgRx.</li>\n\n\n\n<li>The Angular Team embraced RxJS in much of the Angular ecosystem</li>\n\n\n\n<li>RxJS is the #1 requested subject at ng-conf</li>\n\n\n\n<li>20,000 other libraries depend on RxJS, and currently, it almost has more downloads than Angular and React combined times 2 at approximately 23 million per week.</li>\n\n\n\n<li>An adaptation of Reactive Extensions is available for idiomatic Java, Scala, C#, C++, Clojure, Python, Groovy, JRuby, and other programming languages.</li>\n</ul>\n\n\n\n<h2 id=\"3b54\">The Future of RxJS</h2>\n\n\n\n<p id=\"3d57\">RxJS is Open-sourced Software which is marvelous because you can dig into the source code and see how it works. It also means that the community controls how RxJS will evolve, not just a single company. The problem with open-sourced software is that it’s practically impossible to predict when new versions will become available. That’s because the people working on it are all volunteers — as is the nature of OSS.</p>\n\n\n\n<p id=\"d38d\">Want the future of RxJS to come sooner? Consider joining the team of people working on it by contributing to it on GitHub.</p>\n\n\n\n<h2 id=\"ed4b\">Next Major Version of RxJS</h2>\n\n\n\n<figure class=\"wp-block-image\"><img decoding=\"async\" src=\"https://miro.medium.com/max/824/1*kJCEX-JC3v3DA3iJ4DZjLg.png\" alt=\"RxJs 6 was 93KB and RxJS 7 will be 57KB. That’s smaller!\"/><figcaption class=\"wp-element-caption\">Significantly smaller!</figcaption></figure>\n\n\n\n<p id=\"1f1d\">At the time of writing this article, RxJS version 7 is still being worked on. It will include the following changes and more:</p>\n\n\n\n<ul>\n<li>Better TypeScript typings</li>\n\n\n\n<li>The toPromise operator is changing to firstValueFrom and lastValueFrom</li>\n\n\n\n<li>RxJS is smaller</li>\n\n\n\n<li>RxJS supports the latest TypeScript version: Typescript 4.1</li>\n</ul>\n","protected":false},"excerpt":{"rendered":"<p>While RxJS isn’t only used in Angular, it is a proud member of the Angular ecosystem. But it might not have been if it weren’t for&nbsp; Ben Lesh. A Brief History During the early, early days of Angular 2, a new hire named Ben Lesh that had recently come from working at Netflix shared his [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5124"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5124"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5124/revisions"}],"predecessor-version":[{"id":5125,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5124/revisions/5125"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5124"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5124"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5124"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5126,"date":"2022-12-04T06:31:23","date_gmt":"2022-12-04T06:31:23","guid":{"rendered":"https://angular.foobrdigital.com/?p=5126"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"overview-of-observables","status":"publish","type":"post","link":"https://angular.foobrdigital.com/overview-of-observables/","title":{"rendered":"Overview of Observables"},"content":{"rendered":"\n<p id=\"2d0d\">Let’s do a quick recap on what observables are and how we use them.</p>\n\n\n\n<p id=\"f701\">Observables are a collection of values over time that we use to contain data retrieved asynchronously. They serve as a complete replacement for promises in our web applications and provide more benefits on top of it.</p>\n\n\n\n<p id=\"562a\">Using observables helps you in the following ways:</p>\n\n\n\n<ul>\n<li>Your code becomes more reactive.</li>\n\n\n\n<li>You can compose your observables&nbsp;<mark>in</mark>&nbsp;many useful ways.</li>\n\n\n\n<li>They allow you to pass streams containing one or many pieces of data.</li>\n\n\n\n<li>Use them without data if you want to send signals to other parts of your code, but don’t need to pass data.</li>\n\n\n\n<li>You can subscribe to an observable in many different places at once.</li>\n\n\n\n<li>You can terminate observables by completing them and you can unsubscribe from them.</li>\n</ul>\n\n\n\n<p id=\"24a4\">It’s important to remember that observables won’t do anything until you subscribe to them. I’ll show you how to subscribe to observables later in upcoming lectures.</p>\n","protected":false},"excerpt":{"rendered":"<p>Let’s do a quick recap on what observables are and how we use them. Observables are a collection of values over time that we use to contain data retrieved asynchronously. They serve as a complete replacement for promises in our web applications and provide more benefits on top of it. Using observables helps you in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5126"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5126"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5126/revisions"}],"predecessor-version":[{"id":5127,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5126/revisions/5127"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5126"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5126"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5126"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5128,"date":"2022-12-04T06:31:42","date_gmt":"2022-12-04T06:31:42","guid":{"rendered":"https://angular.foobrdigital.com/?p=5128"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"4-ways-to-create-observables-in-angular","status":"publish","type":"post","link":"https://angular.foobrdigital.com/4-ways-to-create-observables-in-angular/","title":{"rendered":"4 Ways to Create Observables In Angular"},"content":{"rendered":"\n<p id=\"d3d2\">There are several ways to create observables in Angular:</p>\n\n\n\n<ol>\n<li>Using one of several features in Angular that generate observables.</li>\n\n\n\n<li>Using a library that works with Angular.</li>\n\n\n\n<li>Using an RxJS creation operator.</li>\n\n\n\n<li>Using an RxJS subject.</li>\n</ol>\n\n\n\n<p id=\"148f\">Let’s dive into each of these and see how to make use of these.</p>\n\n\n\n<h2 id=\"b12a\">Angular Features Generate Observables</h2>\n\n\n\n<p id=\"2aa5\">In the last article of this series we discussed how RxJS came about in Angular 2 and beyond. Thanks to those early adopters and pioneers of RxJS it has advanced and been improved in significant ways since then. When Angular needs to return most pieces of data it does so using Observables. Here’s an incomplete list of features that do this:</p>\n\n\n\n<ul>\n<li>HttpClient: GET, POST, DELETE, etc.</li>\n\n\n\n<li>Routing: RouterEvents, Router, ActivatedRoute</li>\n\n\n\n<li>Events: FromEvent, EventEmitters</li>\n\n\n\n<li>Angular Material: Dialogs, various CDK features, etc.</li>\n</ul>\n","protected":false},"excerpt":{"rendered":"<p>There are several ways to create observables in Angular: Let’s dive into each of these and see how to make use of these. Angular Features Generate Observables In the last article of this series we discussed how RxJS came about in Angular 2 and beyond. Thanks to those early adopters and pioneers of RxJS it [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5128"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5128"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5128/revisions"}],"predecessor-version":[{"id":5129,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5128/revisions/5129"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5128"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5128"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5128"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5130,"date":"2022-12-04T06:33:42","date_gmt":"2022-12-04T06:33:42","guid":{"rendered":"https://angular.foobrdigital.com/?p=5130"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"functional-programming-in-the-frontend-world","status":"publish","type":"post","link":"https://angular.foobrdigital.com/functional-programming-in-the-frontend-world/","title":{"rendered":"Functional Programming in the Frontend World"},"content":{"rendered":"\n<p>Even though Functional Programming (FP) has been around for many years, the adoption has been slow in mainstream development. Some of its best practices are today more or less consensual, but for example only recently we started to see libraries capable of true function composition, like the latest <a href=\"https://lodash.com/\">lodash</a> with first class FP support, or Ramda.</p>\n\n\n\n<p>Frontend programming is inherently asynchronous, and there has always been something missing to allow the building of frontends in a functional-like way.</p>\n","protected":false},"excerpt":{"rendered":"<p>Even though Functional Programming (FP) has been around for many years, the adoption has been slow in mainstream development. Some of its best practices are today more or less consensual, but for example only recently we started to see libraries capable of true function composition, like the latest lodash with first class FP support, or Ramda. Frontend programming [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5130"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5130"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5130/revisions"}],"predecessor-version":[{"id":5131,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5130/revisions/5131"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5130"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5130"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5130"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5132,"date":"2022-12-04T06:34:04","date_gmt":"2022-12-04T06:34:04","guid":{"rendered":"https://angular.foobrdigital.com/?p=5132"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"a-new-asynchronous-programming-concept-the-stream","status":"publish","type":"post","link":"https://angular.foobrdigital.com/a-new-asynchronous-programming-concept-the-stream/","title":{"rendered":"A new asynchronous programming concept &#8211; the stream"},"content":{"rendered":"\n<p>The notion that is missing and which is the heart of Functional Reactive Programing might very well be the&nbsp;<code>stream</code>.</p>\n\n\n\n<p>A stream is a sequence of values in time, its as simple as that. Take for example the following stream of numeric values, where each value is issued every one second:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0, 1, 2, 3 ,4 \n</code></pre>\n\n\n\n<p>Another example of a stream is a sequence of mouse click events, with the x and y mouse coordinates of the mouse click:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>(100,200), (110, 300), (400, 50) ...\n</code></pre>\n\n\n\n<p>Everything that happens in the browser can be seen as a stream: the sequence of browser events that are triggered when the user interacts with the page, data arriving from the server, timeouts getting triggered.</p>\n\n\n\n<p>Streams seem to be a good model to describe how a frontend program actually works. But is it possible to comfortably build a readable program around that notion?</p>\n","protected":false},"excerpt":{"rendered":"<p>The notion that is missing and which is the heart of Functional Reactive Programing might very well be the&nbsp;stream. A stream is a sequence of values in time, its as simple as that. Take for example the following stream of numeric values, where each value is issued every one second: Another example of a stream [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5132"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5132"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5132/revisions"}],"predecessor-version":[{"id":5133,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5132/revisions/5133"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5132"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5132"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5132"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5134,"date":"2022-12-04T06:34:21","date_gmt":"2022-12-04T06:34:21","guid":{"rendered":"https://angular.foobrdigital.com/?p=5134"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"a-new-asynchronous-development-primitive-the-observable","status":"publish","type":"post","link":"https://angular.foobrdigital.com/a-new-asynchronous-development-primitive-the-observable/","title":{"rendered":"A new asynchronous development primitive &#8211; The Observable"},"content":{"rendered":"\n<p>In order for the notion of stream to be useful to build a program, we need a way to create streams, subscribe to them, react to new values, and combine streams together to build new ones.</p>\n\n\n\n<p>Also notice the similarity of the numeric stream above to something more familiar:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0, 1, 2, 3, 4]\n</code></pre>\n\n\n\n<p>It looks&nbsp;<em>a lot</em>&nbsp;like a plain Javascript Array!</p>\n\n\n\n<p>Arrays are data structures that are really easy to manipulate and combine to produce new arrays, thanks to its&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">extended API</a>. Look at all those data manipulation methods, and imagine that streams could be combined using these and many other functional programming operators.</p>\n\n\n\n<p>This combination of a stream with a set of functional operators to transform streams leads us to the notion of Observable. Think of it as your API for tapping into a stream. You can use it to define a stream, subscribe to it and transform it.</p>\n\n\n\n<p>An important thing to bear in mind is that&nbsp;<strong>observables are not streams</strong>, those are two different concepts.What we need at this point is a library that implements the Observable primitive, and thats where RxJs comes in.</p>\n","protected":false},"excerpt":{"rendered":"<p>In order for the notion of stream to be useful to build a program, we need a way to create streams, subscribe to them, react to new values, and combine streams together to build new ones. Also notice the similarity of the numeric stream above to something more familiar: It looks&nbsp;a lot&nbsp;like a plain Javascript [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5134"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5134"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5134/revisions"}],"predecessor-version":[{"id":5135,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5134/revisions/5135"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5134"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5134"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5134"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5136,"date":"2022-12-04T06:34:51","date_gmt":"2022-12-04T06:34:51","guid":{"rendered":"https://angular.foobrdigital.com/?p=5136"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"introducing-rxjs","status":"publish","type":"post","link":"https://angular.foobrdigital.com/introducing-rxjs/","title":{"rendered":"Introducing RxJs"},"content":{"rendered":"\n<p>RxJs stands for Reactive Extensions for Javascript, and it&#8217;s an implementation of Observables for Javascript.</p>\n\n\n\n<p>To see it in action, here is the same numeric stream that we mentioned above, defined using RxJs:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(1000).pipe(take(5));</code></pre>\n\n\n\n<p>This line of code defines an Observable that emits values every second. Five values will be emitted, and then the Observable will complete and no more values will be emitted.</p>\n","protected":false},"excerpt":{"rendered":"<p>RxJs stands for Reactive Extensions for Javascript, and it&#8217;s an implementation of Observables for Javascript. To see it in action, here is the same numeric stream that we mentioned above, defined using RxJs: This line of code defines an Observable that emits values every second. Five values will be emitted, and then the Observable will [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5136"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5136"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5136/revisions"}],"predecessor-version":[{"id":5137,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5136/revisions/5137"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5136"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5136"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5136"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5138,"date":"2022-12-04T06:35:03","date_gmt":"2022-12-04T06:35:03","guid":{"rendered":"https://angular.foobrdigital.com/?p=5138"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"understanding-operators-and-the-pipe-syntax","status":"publish","type":"post","link":"https://angular.foobrdigital.com/understanding-operators-and-the-pipe-syntax/","title":{"rendered":"Understanding operators and the pipe syntax"},"content":{"rendered":"\n<p>The&nbsp;<code>take(5)</code>&nbsp;call is an example of how to use the&nbsp;<code>take</code>&nbsp;operator, which is one of the many RxJs operators available.</p>\n\n\n\n<p>An operator is a function that takes an Observable, and returns another Observable. In this case, we take the&nbsp;<code>interval(1000)</code>&nbsp;Observable, that emits values every second forever, and we create a new derived Observable that only emits values for 5 seconds and then stops.</p>\n\n\n\n<p>The pipe syntax makes an anology of how RxJs operators and Unix pipes are somewhat similar: the values of one observable are transformed by an operator to produce another Observable, just like in Unix a value is transformed via a pipe by another process in order to produce a new value.</p>\n\n\n\n<p>Now that we have the notions of Stream, Observable and operator, we are now ready to introduce the notion of Functional Reactive Programming.</p>\n","protected":false},"excerpt":{"rendered":"<p>The&nbsp;take(5)&nbsp;call is an example of how to use the&nbsp;take&nbsp;operator, which is one of the many RxJs operators available. An operator is a function that takes an Observable, and returns another Observable. In this case, we take the&nbsp;interval(1000)&nbsp;Observable, that emits values every second forever, and we create a new derived Observable that only emits values for [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5138"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5138"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5138/revisions"}],"predecessor-version":[{"id":5139,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5138/revisions/5139"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5138"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5138"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5138"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5140,"date":"2022-12-04T06:35:12","date_gmt":"2022-12-04T06:35:12","guid":{"rendered":"https://angular.foobrdigital.com/?p=5140"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"introducing-functional-reactive-programming","status":"publish","type":"post","link":"https://angular.foobrdigital.com/introducing-functional-reactive-programming/","title":{"rendered":"Introducing Functional Reactive Programming"},"content":{"rendered":"\n<p>Functional Reactive Programming (FRP) is a paradigm for software development that says that entire programs can be built uniquely around the notion of streams. Not only frontend programs, but any program in general.</p>\n\n\n\n<p>While developing in this paradigm, development consists of creating or identifying the streams of values your program is interested in, combining them together and finally subscribing to those streams to produce a reaction to new values.</p>\n","protected":false},"excerpt":{"rendered":"<p>Functional Reactive Programming (FRP) is a paradigm for software development that says that entire programs can be built uniquely around the notion of streams. Not only frontend programs, but any program in general. While developing in this paradigm, development consists of creating or identifying the streams of values your program is interested in, combining them [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5140"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5140"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5140/revisions"}],"predecessor-version":[{"id":5141,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5140/revisions/5141"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5140"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5140"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5140"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5142,"date":"2022-12-04T06:35:27","date_gmt":"2022-12-04T06:35:27","guid":{"rendered":"https://angular.foobrdigital.com/?p=5142"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"the-core-goal-of-frp","status":"publish","type":"post","link":"https://angular.foobrdigital.com/the-core-goal-of-frp/","title":{"rendered":"The core goal of FRP"},"content":{"rendered":"\n<p>The main idea of FRP is to build programs in a declarative-only way, by defining what are the streams, how they are linked together and what happens if a new stream value arrives over time.</p>\n\n\n\n<p>Programs such as this can be built with very little to no application state variables, which are in general a source of errors. To make it clearer: the application&nbsp;<em>does</em>&nbsp;have state, but that state it&#8217;s typically stored on certain streams or in the DOM, not on the application code itself.</p>\n\n\n\n<h4 id=\"statelessuisbutwhichpart\">Stateless UIs, but which part?</h4>\n\n\n\n<p>This absence of state is meant mostly for smart components that have data services injected. Pure components can consume observables but might want to keep some internal state variables in practice, think for example an&nbsp;<code>isOpen</code>&nbsp;flag for a dropdown.</p>\n","protected":false},"excerpt":{"rendered":"<p>The main idea of FRP is to build programs in a declarative-only way, by defining what are the streams, how they are linked together and what happens if a new stream value arrives over time. Programs such as this can be built with very little to no application state variables, which are in general a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5142"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5142"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5142/revisions"}],"predecessor-version":[{"id":5143,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5142/revisions/5143"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5142"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5142"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5142"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5144,"date":"2022-12-04T06:36:07","date_gmt":"2022-12-04T06:36:07","guid":{"rendered":"https://angular.foobrdigital.com/?p=5144"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"the-essential-of-how-observables-work","status":"publish","type":"post","link":"https://angular.foobrdigital.com/the-essential-of-how-observables-work/","title":{"rendered":"The essential of how Observables work"},"content":{"rendered":"\n<p>Let&#8217;s go back to the simple numeric sequence Observable presented before, and add a side effect to it:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(1000)\n           .pipe(\n               take(5),\n               tap(i => console.log(i) )\n           );\n</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\">\n<p>Note that you probably want to avoid the&nbsp;<code>tap()</code>&nbsp;operator as its only purpose is to produce side effects</p>\n</blockquote>\n\n\n\n<p>If we run this program, you might be surprised by the fact that nothing gets printed to the console! This is because of one of the main properties of this type of Observable.</p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s go back to the simple numeric sequence Observable presented before, and add a side effect to it: Note that you probably want to avoid the&nbsp;tap()&nbsp;operator as its only purpose is to produce side effects If we run this program, you might be surprised by the fact that nothing gets printed to the console! This [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5144"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5144"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5144/revisions"}],"predecessor-version":[{"id":5145,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5144/revisions/5145"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5144"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5144"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5144"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5146,"date":"2022-12-04T06:36:41","date_gmt":"2022-12-04T06:36:41","guid":{"rendered":"https://angular.foobrdigital.com/?p=5146"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"observables-are-either-hot-or-cold","status":"publish","type":"post","link":"https://angular.foobrdigital.com/observables-are-either-hot-or-cold/","title":{"rendered":"Observables are either hot or cold"},"content":{"rendered":"\n<p>If this plain Observable has no subscribers, it will not be triggered!<br>The observable is said to be cold because it does not generate new values if no subscriptions exist. To get the numeric values printed to the console, we need to subscribe to the Observable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>obs.subscribe();\n</code></pre>\n\n\n\n<p>With this, we do get the numeric values printed to the console. But what happens if we add two subscribers to this observable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(1000)\n           .pipe(\n               take(5),\n               tap(i => console.log(\"obs value \"+ i) )\n           );\n\nobs.subscribe(value => console.log(\"observer 1 received \" + value));\n\nobs.subscribe(value => console.log(\"observer 2 received \" + value));</code></pre>\n\n\n\n<p>What&#8217;s happening here is that the Observable named&nbsp;<code>obs</code>&nbsp;has a side-effect: its prints to the console via the&nbsp;<code>tap()</code>&nbsp;operator. Then two subscribers are added to&nbsp;<code>obs</code>, each one printing the result value to the console as well. This is the output of the console:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>obs value 0\nobserver 1 received 0\nobs value 0\nobserver 2 received 0\n\nobs value 1\nobserver 1 received 1\nobs value 1\nobserver 2 received 1\n</code></pre>\n\n\n\n<p>Looks like the side effect is being called twice! This leads to a second important property of Observables.</p>\n","protected":false},"excerpt":{"rendered":"<p>If this plain Observable has no subscribers, it will not be triggered!The observable is said to be cold because it does not generate new values if no subscriptions exist. To get the numeric values printed to the console, we need to subscribe to the Observable: With this, we do get the numeric values printed to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5146"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5146"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5146/revisions"}],"predecessor-version":[{"id":5147,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5146/revisions/5147"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5146"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5146"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5146"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5148,"date":"2022-12-04T06:37:04","date_gmt":"2022-12-04T06:37:04","guid":{"rendered":"https://angular.foobrdigital.com/?p=5148"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"observables-are-not-shared-by-default","status":"publish","type":"post","link":"https://angular.foobrdigital.com/observables-are-not-shared-by-default/","title":{"rendered":"Observables are not shared by default"},"content":{"rendered":"\n<p>When we create a subscriber, we are setting up a whole new separate processing chain. The&nbsp;<code>obs</code>&nbsp;variable is just a definition, a blueprint of how an a functional processing chain of operators should be set up from the source of the event up until the sink of the event, when that sink (the observer) is attached.</p>\n\n\n\n<p>Being&nbsp;<code>obs</code>&nbsp;just a blueprint of how to build an operation chain, what happens when we subscribe two observers is that two separate processing chains are set up, causing the side effect to be printed twice, once for each chain.</p>\n\n\n\n<p>There are ways to define other types of Observables where the side-effect would only be called once (see further). The important is to realize that we should keep two things in mind at all times when dealing with observables:</p>\n\n\n\n<ul>\n<li>is the observable hot or cold?</li>\n\n\n\n<li>is the observable shared or not?</li>\n</ul>\n","protected":false},"excerpt":{"rendered":"<p>When we create a subscriber, we are setting up a whole new separate processing chain. The&nbsp;obs&nbsp;variable is just a definition, a blueprint of how an a functional processing chain of operators should be set up from the source of the event up until the sink of the event, when that sink (the observer) is attached. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5148"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5148"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5148/revisions"}],"predecessor-version":[{"id":5149,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5148/revisions/5149"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5148"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5148"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5148"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5150,"date":"2022-12-04T06:37:14","date_gmt":"2022-12-04T06:37:14","guid":{"rendered":"https://angular.foobrdigital.com/?p=5150"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"commonly-used-rxjs-operators-in-angular","status":"publish","type":"post","link":"https://angular.foobrdigital.com/commonly-used-rxjs-operators-in-angular/","title":{"rendered":"Commonly used RxJs operators in Angular"},"content":{"rendered":"\n<p>There are many functional operators that can be used to combine Observables, so let&#8217;s focus here on some of the most commonly used ones and how they can be used in an Angular application.</p>\n\n\n\n<p>Namely, we are going to see how some of those operators can be used in common tasks like form validation.</p>\n\n\n\n<h4 id=\"howdoesangularuseobservables\">How does Angular use Observables</h4>\n\n\n\n<p>Angular currently uses RxJs Observables in two different ways:</p>\n\n\n\n<ul>\n<li>as an internal implementation mechanism, to implement some of its core logic like&nbsp;<code>EventEmitter</code></li>\n\n\n\n<li>as part of its public API, namely in Forms and the HTTP module</li>\n</ul>\n","protected":false},"excerpt":{"rendered":"<p>There are many functional operators that can be used to combine Observables, so let&#8217;s focus here on some of the most commonly used ones and how they can be used in an Angular application. Namely, we are going to see how some of those operators can be used in common tasks like form validation. How [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5150"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5150"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5150/revisions"}],"predecessor-version":[{"id":5151,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5150/revisions/5151"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5150"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5150"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5150"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5152,"date":"2022-12-04T06:38:18","date_gmt":"2022-12-04T06:38:18","guid":{"rendered":"https://angular.foobrdigital.com/?p=5152"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"the-map-operator","status":"publish","type":"post","link":"https://angular.foobrdigital.com/the-map-operator/","title":{"rendered":"The map operator"},"content":{"rendered":"\n<p>The map operator is probably the most well-known functional programming operator out there, and Observable of course provides it. The map operator simply takes an Observable, and adds a transforming function that processes the output of the stream. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(500)\n           .pipe(\n               take(5),\n               map(i => 2 * i ) \n           );\n</code></pre>\n\n\n\n<p>It&#8217;s important to realize that the output of <code>map</code> is still another observable. What we have here is still only a definition of an operation chain. We still need to subscribe to this observable to get an output out of it.</p>\n","protected":false},"excerpt":{"rendered":"<p>The map operator is probably the most well-known functional programming operator out there, and Observable of course provides it. The map operator simply takes an Observable, and adds a transforming function that processes the output of the stream. For example: It&#8217;s important to realize that the output of map is still another observable. What we have here [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5152"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5152"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5152/revisions"}],"predecessor-version":[{"id":5153,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5152/revisions/5153"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5152"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5152"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5152"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5154,"date":"2022-12-04T06:38:57","date_gmt":"2022-12-04T06:38:57","guid":{"rendered":"https://angular.foobrdigital.com/?p=5154"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"map-and-filter-used-to-do-form-validation","status":"publish","type":"post","link":"https://angular.foobrdigital.com/map-and-filter-used-to-do-form-validation/","title":{"rendered":"Map and filter used to do form validation"},"content":{"rendered":"\n<p>Another commonly used operator is&nbsp;<code>filter</code>. In Angular, forms can be handled as observables that we subscribe to. Meaning that the value of the whole form is itself an observable, and that the value of each individual field is itself an observable. Let&#8217;s take for example a simple form:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form &#91;ngForm]=\"form\" (ngSubmit)=\"onSubmit()\">\n   &lt;p>\n        &lt;label>First Name:&lt;/label>\n        &lt;input type=\"text\" ngControl=\"firstName\">\n   &lt;/p>\n&lt;/form></code></pre>\n\n\n\n<p>The use of&nbsp;<code>ngForm</code>&nbsp;allows binding the form to a variable of type<br><code>FormGroup</code>&nbsp;in the component controller. There we can use that variable to access the form observable via&nbsp;<code>form.valueChanges</code>.</p>\n\n\n\n<p>Using the observable, we can combine the map and filter operations to get an uppercase and validated version of the form content:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.form.valueChanges\n    .pipe(\n        map((value) => {\n            value.firstName = value.firstName.toUpperCase();\n            return value;\n        }),\n        filter((value) => this.form.valid)\n    )\n    .subscribe(validValue => ...);\n        </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Another commonly used operator is&nbsp;filter. In Angular, forms can be handled as observables that we subscribe to. Meaning that the value of the whole form is itself an observable, and that the value of each individual field is itself an observable. Let&#8217;s take for example a simple form: The use of&nbsp;ngForm&nbsp;allows binding the form to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5154"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5154"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5154/revisions"}],"predecessor-version":[{"id":5155,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5154/revisions/5155"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5154"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5154"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5154"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5156,"date":"2022-12-04T06:39:58","date_gmt":"2022-12-04T06:39:58","guid":{"rendered":"https://angular.foobrdigital.com/?p=5156"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"the-reduce-operator-and-why-you-probably-dont-need-it","status":"publish","type":"post","link":"https://angular.foobrdigital.com/the-reduce-operator-and-why-you-probably-dont-need-it/","title":{"rendered":"The reduce operator, and why you probably don&#8217;t need it"},"content":{"rendered":"\n<p>There has been some talk recently on the Flux architecture, and how to use it to build Angular applications. The main idea is to have a single atom of state for the whole application, subscribe to it and create new values of it using reducer functions.</p>\n\n\n\n<p>Crucial to that way of building frontends is the&nbsp;<code>reduce</code>&nbsp;functional operator, which is at the heart of&nbsp;<a href=\"http://redux.js.org/\">Redux</a>. RxJs observables also provide a reduce operator, so let&#8217;s see how that looks:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(500).pipe(take(5));\n\nvar reduced = obs.pipe(\n  reduce((state, value) => state + value , 0)\n);\n\nreduced.subscribe(total => console.log(\"total =\" + total));</code></pre>\n\n\n\n<p>What is happening here is that given the&nbsp;<code>obs</code>&nbsp;observable, we create a second observable named&nbsp;<code>reduced</code>. Reduce emits a value when the stream&nbsp;<code>obs</code>&nbsp;closes and whose single value is the total sum of all elements in the stream. The output in the console is this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>total = 10\n</code></pre>\n\n\n\n<p>So reduce emits the end total of the accumulation, which is true to the functional definition of the operator. But this is not what we want in the case that observable contained the application state instead of a numeric value.</p>\n","protected":false},"excerpt":{"rendered":"<p>There has been some talk recently on the Flux architecture, and how to use it to build Angular applications. The main idea is to have a single atom of state for the whole application, subscribe to it and create new values of it using reducer functions. Crucial to that way of building frontends is the&nbsp;reduce&nbsp;functional [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5156"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5156"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5156/revisions"}],"predecessor-version":[{"id":5157,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5156/revisions/5157"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5156"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5156"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5156"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5158,"date":"2022-12-04T06:40:47","date_gmt":"2022-12-04T06:40:47","guid":{"rendered":"https://angular.foobrdigital.com/?p=5158"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"the-scan-operator","status":"publish","type":"post","link":"https://angular.foobrdigital.com/the-scan-operator/","title":{"rendered":"The scan operator"},"content":{"rendered":"\n<p>You might be interested in the intermediate values of the reduce process, and might want to know what is the state of the observable after each element is reduced and react to that instead of only to the final result of the reduction operation. Especially because the reduced stream might never close!</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(500).pipe(take(5));\n\nvar scanObs = obs.pipe(\n  scan((state, value) => state + value , 0)\n);\n\nscanObs.subscribe(total => console.log(total));</code></pre>\n\n\n\n<p>Again we created a second observable based on&nbsp;<code>obs</code>, and have subscribed to it. The result is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n1\n3\n6\n10\n</code></pre>\n\n\n\n<p>We can see in the console the intermediate results of the accumulation process, and not only the final result.</p>\n","protected":false},"excerpt":{"rendered":"<p>You might be interested in the intermediate values of the reduce process, and might want to know what is the state of the observable after each element is reduced and react to that instead of only to the final result of the reduction operation. Especially because the reduced stream might never close! Again we created [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5158"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5158"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5158/revisions"}],"predecessor-version":[{"id":5159,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5158/revisions/5159"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5158"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5158"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5158"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5160,"date":"2022-12-04T06:41:19","date_gmt":"2022-12-04T06:41:19","guid":{"rendered":"https://angular.foobrdigital.com/?p=5160"},"modified":"2022-12-04T06:42:30","modified_gmt":"2022-12-04T06:42:30","slug":"the-share-operator","status":"publish","type":"post","link":"https://angular.foobrdigital.com/the-share-operator/","title":{"rendered":"The share operator"},"content":{"rendered":"\n<p>One important property we saw at the beginning of this post, is that when we subscribe to an observable, it triggers the instantiation of a separate processing chain. The&nbsp;<code>share</code>&nbsp;operator allows us to share a single subscription of a processing chain with other subscribers. Take for example the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const obs = interval(500)\n    .pipe(\n        take(5),\n        tap(i => console.log(\"obs value \"+ i)),\n        shareReplay()\n    );\n\nobs.subscribe(value => console.log(\"observer 1 received \" + value));\n\nobs.subscribe(value => console.log(\"observer 2 received \" + value));</code></pre>\n\n\n\n<p>This creates the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>obs value 0\nobserver 1 received 0\nobserver 2 received 0\n\nobs value 1\nobserver 1 received 1\nobserver 2 received 1\n</code></pre>\n\n\n\n<p>We can see the side effect inside the&nbsp;<code>tap</code>&nbsp;call is only printed once instead of twice.</p>\n","protected":false},"excerpt":{"rendered":"<p>One important property we saw at the beginning of this post, is that when we subscribe to an observable, it triggers the instantiation of a separate processing chain. The&nbsp;share&nbsp;operator allows us to share a single subscription of a processing chain with other subscribers. Take for example the following: This creates the following output: We can [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[291,1],"tags":[],"_links":{"self":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5160"}],"collection":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5160"}],"version-history":[{"count":1,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5160/revisions"}],"predecessor-version":[{"id":5161,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/posts/5160/revisions/5161"}],"wp:attachment":[{"href":"https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5160"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5160"},{"taxonomy":"post_tag","embeddable":true,"href":"https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5160"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]