[
  {
    "id": 2194,
    "date": "2022-04-19T09:43:38",
    "date_gmt": "2022-04-19T09:43:38",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2194"
    },
    "modified": "2022-04-19T09:45:09",
    "modified_gmt": "2022-04-19T09:45:09",
    "slug": "explain-jdk-jre-and-jvm",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/explain-jdk-jre-and-jvm/",
    "title": {
      "rendered": "Explain JDK, JRE and JVM?"
    },
    "content": {
      "rendered": "\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><td><strong>JDK</strong></td><td><strong>JRE</strong></td><td><strong>JVM</strong></td></tr><tr><td>It stands for Java Development Kit.</td><td>It stands for Java Runtime Environment.</td><td>It stands for Java Virtual Machine.</td></tr><tr><td>It is the tool necessary to compile, document and package Java programs.</td><td>JRE refers to a runtime environment in which Java bytecode can be executed.</td><td>It is an abstract machine. It is a specification that provides a run-time environment in which Java bytecode can be executed.</td></tr><tr><td>It contains JRE + development tools.</td><td>It\u2019s an implementation of the JVM which physically exists.</td><td>JVM follows three notations: Specification,&nbsp;<strong>Implementation,&nbsp;</strong>and&nbsp;<strong>Runtime Instance</strong>.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>JDK JRE JVM It stands for Java Development Kit. It stands for Java Runtime Environment. It stands for Java Virtual Machine. It is the tool necessary to compile, document and package Java programs. JRE refers to a runtime environment in which Java bytecode can be executed. It is an abstract machine. It is a specification [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2194"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2194"
        }
      ],
      "version-history": [
        {
          "count": 2,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2194/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2200,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2194/revisions/2200"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2194"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2194"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2194"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2197,
    "date": "2022-04-19T09:44:16",
    "date_gmt": "2022-04-19T09:44:16",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2197"
    },
    "modified": "2022-04-19T09:44:16",
    "modified_gmt": "2022-04-19T09:44:16",
    "slug": "explain-public-static-void-mainstring-args-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/explain-public-static-void-mainstring-args-in-java/",
    "title": {
      "rendered": "Explain public static void main(String args[]) in Java."
    },
    "content": {
      "rendered": "\n<p>main() in Java is the entry point for any Java program. It is always written as&nbsp;<strong>public&nbsp;static void main(String[] args)</strong>.</p>\n\n\n\n<ul><li><strong>public</strong>: Public is an access modifier,&nbsp;which is used to specify who can access this method. Public means that this Method will be accessible by any Class.</li><li><strong>static</strong>: It is a keyword in java which identifies it is class-based. main() is made static in Java so that it can be accessed without creating the instance of a Class. In case, main is not made static then the compiler will throw an error as&nbsp;<strong>main</strong>() is called by the JVM before any objects are made and only static methods can be directly invoked via the class.&nbsp;</li><li><strong>void</strong>:&nbsp;It is the return type of the method. Void defines the method which will not return any value.</li><li><strong>main</strong>: It is the name of the method which is searched by JVM as a starting point for an application with a particular signature only. It is the method where the main execution occurs.</li><li><strong>String args[]</strong>: It is the parameter passed to the main method.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>main() in Java is the entry point for any Java program. It is always written as&nbsp;public&nbsp;static void main(String[] args). public: Public is an access modifier,&nbsp;which is used to specify who can access this method. Public means that this Method will be accessible by any Class. static: It is a keyword in java which identifies it [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2197"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2197"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2197/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2198,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2197/revisions/2198"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2197"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2197"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2197"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2201,
    "date": "2022-04-19T09:45:38",
    "date_gmt": "2022-04-19T09:45:38",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2201"
    },
    "modified": "2022-04-19T09:45:38",
    "modified_gmt": "2022-04-19T09:45:38",
    "slug": "why-java-is-platform-independent",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/why-java-is-platform-independent/",
    "title": {
      "rendered": "Why Java is platform independent?"
    },
    "content": {
      "rendered": "\n<p>Java is called platform independent because of its byte codes which can run on any system irrespective of its underlying operating system.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Java is called platform independent because of its byte codes which can run on any system irrespective of its underlying operating system.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2201"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2201"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2201/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2202,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2201/revisions/2202"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2201"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2201"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2201"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2203,
    "date": "2022-04-19T09:46:07",
    "date_gmt": "2022-04-19T09:46:07",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2203"
    },
    "modified": "2022-04-19T09:46:07",
    "modified_gmt": "2022-04-19T09:46:07",
    "slug": "why-java-is-not-100-object-oriented",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/why-java-is-not-100-object-oriented/",
    "title": {
      "rendered": "Why Java is not 100% Object-oriented?"
    },
    "content": {
      "rendered": "\n<p>Java is not 100% Object-oriented because it makes use of eight primitive data types such as boolean, byte, char, int, float, double, long, short which are not objects.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Java is not 100% Object-oriented because it makes use of eight primitive data types such as boolean, byte, char, int, float, double, long, short which are not objects.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2203"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2203"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2203/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2204,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2203/revisions/2204"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2203"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2203"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2203"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2205,
    "date": "2022-04-19T09:46:45",
    "date_gmt": "2022-04-19T09:46:45",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2205"
    },
    "modified": "2022-04-19T09:46:45",
    "modified_gmt": "2022-04-19T09:46:45",
    "slug": "what-are-wrapper-classes-in-java%ef%bf%bc",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-are-wrapper-classes-in-java%ef%bf%bc/",
    "title": {
      "rendered": "What are wrapper classes in Java?\ufffc"
    },
    "content": {
      "rendered": "\n<p>Wrapper classes convert the Java primitives into the reference types (objects). Every primitive data type has a class dedicated to it. These are known as wrapper classes because they \u201cwrap\u201d the primitive data type into an object of that class. Refer to the below image which displays different primitive type, wrapper class and constructor argument.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Wrapper classes convert the Java primitives into the reference types (objects). Every primitive data type has a class dedicated to it. These are known as wrapper classes because they \u201cwrap\u201d the primitive data type into an object of that class. Refer to the below image which displays different primitive type, wrapper class and constructor argument.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2205"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2205"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2205/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2206,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2205/revisions/2206"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2205"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2205"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2205"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2207,
    "date": "2022-04-19T09:47:24",
    "date_gmt": "2022-04-19T09:47:24",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2207"
    },
    "modified": "2022-04-19T09:47:24",
    "modified_gmt": "2022-04-19T09:47:24",
    "slug": "what-are-constructors-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-are-constructors-in-java/",
    "title": {
      "rendered": "What are constructors in Java?"
    },
    "content": {
      "rendered": "\n<p>In Java, constructor refers to a block of code which is used to initialize an object. It must have the same name as that of the class. Also, it has no return type and it is automatically called when an object is created.</p>\n\n\n\n<p>There are two types of constructors:</p>\n\n\n\n<ol><li><strong>Default Constructor:</strong>&nbsp;In Java, a default constructor is the one which does not take any inputs. In other words, default constructors are the no argument constructors which will be created by default in case you no other constructor is defined by the user. Its main purpose is to initialize the instance variables with the default values. Also, it is majorly used for object creation.&nbsp;</li><li><strong>Parameterized Constructor:</strong>&nbsp;The parameterized constructor in Java, is the constructor which is capable of initializing the instance variables with the provided values. In other words, the constructors which take the arguments are called parameterized constructors.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Java, constructor refers to a block of code which is used to initialize an object. It must have the same name as that of the class. Also, it has no return type and it is automatically called when an object is created. There are two types of constructors: Default Constructor:&nbsp;In Java, a default constructor [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2207"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2207"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2207/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2208,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2207/revisions/2208"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2207"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2207"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2207"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2209,
    "date": "2022-04-19T09:47:49",
    "date_gmt": "2022-04-19T09:47:49",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2209"
    },
    "modified": "2022-04-19T09:47:49",
    "modified_gmt": "2022-04-19T09:47:49",
    "slug": "what-is-singleton-class-in-java-and-how-can-we-make-a-class-singleton",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-singleton-class-in-java-and-how-can-we-make-a-class-singleton/",
    "title": {
      "rendered": "What is singleton class in Java and how can we make a class singleton?"
    },
    "content": {
      "rendered": "\n<p>Singleton class is a class whose only one instance can be created at any given time, in one JVM. A class can be made singleton by making its constructor private.</p>\n\n\n\n<h3><strong>Q8. What is the difference between Array list and vector in Java?</strong></h3>\n\n\n\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><th>ArrayList</th><th><strong>Vector</strong></th></tr><tr><td>Array List is not synchronized.</td><td>&nbsp;Vector is synchronized.</td></tr><tr><td>Array List is fast as it\u2019s non-synchronized.</td><td>Vector is slow as it is thread safe.</td></tr><tr><td>If an element is inserted into the Array List, it increases its Array size by 50%.</td><td>Vector defaults to doubling size of its array.</td></tr><tr><td>Array List does not define the increment size.</td><td>Vector defines the increment size.</td></tr><tr><td>Array List can only use Iterator for traversing an Array List.</td><td>Vector can use both Enumeration and Iterator for traversing.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Singleton class is a class whose only one instance can be created at any given time, in one JVM. A class can be made singleton by making its constructor private. Q8. What is the difference between Array list and vector in Java? ArrayList Vector Array List is not synchronized. &nbsp;Vector is synchronized. Array List is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2209"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2209"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2209/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2210,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2209/revisions/2210"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2209"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2209"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2209"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2211,
    "date": "2022-04-19T09:48:11",
    "date_gmt": "2022-04-19T09:48:11",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2211"
    },
    "modified": "2022-04-19T09:48:11",
    "modified_gmt": "2022-04-19T09:48:11",
    "slug": "what-is-the-difference-between-equals-and-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-the-difference-between-equals-and-in-java/",
    "title": {
      "rendered": "What is the difference between equals() and == in Java?"
    },
    "content": {
      "rendered": "\n<p>Equals() method is defined in Object class in Java and used for checking equality of two objects defined by business logic.<a></a></p>\n\n\n\n<p>\u201c==\u201d or equality operator in Java is a binary operator provided by Java programming language and used to compare primitives and objects.&nbsp;<em>public boolean equals(Object o)</em>&nbsp;is the method provided by the Object class. The default implementation uses == operator to compare two objects. For example: method can be overridden like String class. equals() method is used to compare the values of two objects.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Equals() method is defined in Object class in Java and used for checking equality of two objects defined by business logic. \u201c==\u201d or equality operator in Java is a binary operator provided by Java programming language and used to compare primitives and objects.&nbsp;public boolean equals(Object o)&nbsp;is the method provided by the Object class. The default [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2211"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2211"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2211/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2212,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2211/revisions/2212"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2211"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2211"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2211"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2213,
    "date": "2022-04-19T09:48:51",
    "date_gmt": "2022-04-19T09:48:51",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2213"
    },
    "modified": "2022-04-19T09:48:51",
    "modified_gmt": "2022-04-19T09:48:51",
    "slug": "when-can-you-use-the-super-keyword",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/when-can-you-use-the-super-keyword/",
    "title": {
      "rendered": "When can you use the super keyword?"
    },
    "content": {
      "rendered": "\n<p>In Java, the super keyword is a reference variable that refers to an immediate parent class object.<a rel=\"noreferrer noopener\" href=\"https://www.edureka.co/java-j2ee-training-course\" target=\"_blank\"></a></p>\n\n\n\n<p>When you create a subclass instance, you\u2019re also creating an instance of the parent class, which is referenced to by the super reference variable.</p>\n\n\n\n<p>The uses of the Java super Keyword are-&nbsp;</p>\n\n\n\n<ol><li>To refer to an immediate parent class instance variable, use super.</li><li>The keyword super can be used to call the method of an immediate parent class.</li><li>Super() can be used to call the constructor of the immediate parent class.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Java, the super keyword is a reference variable that refers to an immediate parent class object. When you create a subclass instance, you\u2019re also creating an instance of the parent class, which is referenced to by the super reference variable. The uses of the Java super Keyword are-&nbsp; To refer to an immediate parent [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2213"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2213"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2213/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2214,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2213/revisions/2214"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2213"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2213"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2213"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2215,
    "date": "2022-04-19T09:49:33",
    "date_gmt": "2022-04-19T09:49:33",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2215"
    },
    "modified": "2022-04-19T09:49:33",
    "modified_gmt": "2022-04-19T09:49:33",
    "slug": "what-makes-a-hashset-different-from-a-treeset",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-makes-a-hashset-different-from-a-treeset/",
    "title": {
      "rendered": "What makes a HashSet different from a TreeSet?"
    },
    "content": {
      "rendered": "\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><td><strong>HashSet</strong></td><td><strong>TreeSet</strong></td></tr><tr><td>It is implemented through a hash table.</td><td>TreeSet implements SortedSet Interface that uses trees for storing data.</td></tr><tr><td>It permits the null object.</td><td>It does not allow the null object.</td></tr><tr><td>It is faster than TreeSet especially for search, insert, and delete operations.</td><td>It is slower than HashSet for these operations.</td></tr><tr><td>It does not maintain elements in an ordered way.</td><td>The elements are maintained in a sorted order.</td></tr><tr><td>It uses equals() method to compare two objects.</td><td>It uses compareTo() method for comparing two objects.</td></tr><tr><td>It does not permit a heterogenous object.</td><td>It permits a heterogenous object.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HashSet TreeSet It is implemented through a hash table. TreeSet implements SortedSet Interface that uses trees for storing data. It permits the null object. It does not allow the null object. It is faster than TreeSet especially for search, insert, and delete operations. It is slower than HashSet for these operations. It does not maintain [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2215"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2215"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2215/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2216,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2215/revisions/2216"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2215"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2215"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2215"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2217,
    "date": "2022-04-19T09:49:57",
    "date_gmt": "2022-04-19T09:49:57",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2217"
    },
    "modified": "2022-04-19T09:49:57",
    "modified_gmt": "2022-04-19T09:49:57",
    "slug": "what-are-the-differences-between-hashmap-and-hashtable-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-are-the-differences-between-hashmap-and-hashtable-in-java/",
    "title": {
      "rendered": "What are the differences between HashMap and HashTable in Java?"
    },
    "content": {
      "rendered": "\n<figure class=\"wp-block-table aligncenter\"><table><tbody><tr><td><strong>HashMap</strong></td><td><strong>Hashtable</strong></td></tr><tr><td>It is non synchronized. It cannot be shared between many threads without proper synchronization code.</td><td>It is synchronized. It is thread-safe and can be shared with many threads.</td></tr><tr><td>It permits one null key and multiple null values.</td><td>It does not permit any null key or value.</td></tr><tr><td>is a new class introduced in JDK 1.2.</td><td>It was present in earlier versions of java as well.</td></tr><tr><td>It is faster.</td><td>It is slower.</td></tr><tr><td>It is traversed through the iterator.</td><td>It is traversed through Enumerator and Iterator.</td></tr><tr><td>It uses fail fast iterator.</td><td>It uses an enumerator which is not fail fast.</td></tr><tr><td>It inherits AbstractMap class.</td><td>It inherits Dictionary class.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HashMap Hashtable It is non synchronized. It cannot be shared between many threads without proper synchronization code. It is synchronized. It is thread-safe and can be shared with many threads. It permits one null key and multiple null values. It does not permit any null key or value. is a new class introduced in JDK [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2217"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2217"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2217/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2218,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2217/revisions/2218"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2217"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2217"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2217"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2219,
    "date": "2022-04-19T09:50:15",
    "date_gmt": "2022-04-19T09:50:15",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2219"
    },
    "modified": "2022-04-19T09:50:15",
    "modified_gmt": "2022-04-19T09:50:15",
    "slug": "what-is-the-importance-of-reflection-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/what-is-the-importance-of-reflection-in-java/",
    "title": {
      "rendered": "What is the importance of reflection in Java?"
    },
    "content": {
      "rendered": "\n<p>Reflection is a runtime API for inspecting and changing the behavior of methods, classes, and interfaces. Java Reflection is a powerful tool that can be really beneficial. Java Reflection allows you to analyze classes, interfaces, fields, and methods during runtime without knowing what they are called at compile time. Reflection can also be used to create new objects, call methods, and get/set field values. External, user-defined classes can be used by creating instances of extensibility objects with their fully-qualified names. Debuggers can also use reflection to examine private members of classes.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Reflection is a runtime API for inspecting and changing the behavior of methods, classes, and interfaces. Java Reflection is a powerful tool that can be really beneficial. Java Reflection allows you to analyze classes, interfaces, fields, and methods during runtime without knowing what they are called at compile time. Reflection can also be used to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2219"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2219"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2219/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2220,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2219/revisions/2220"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2219"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2219"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2219"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2221,
    "date": "2022-04-19T09:50:43",
    "date_gmt": "2022-04-19T09:50:43",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2221"
    },
    "modified": "2022-04-19T09:50:43",
    "modified_gmt": "2022-04-19T09:50:43",
    "slug": "how-to-not-allow-serialization-of-attributes-of-a-class-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-to-not-allow-serialization-of-attributes-of-a-class-in-java/",
    "title": {
      "rendered": "How to not allow serialization of attributes of a class in Java?"
    },
    "content": {
      "rendered": "\n<p>The NonSerialized attribute can be used to prevent member variables from being serialized.<br>You should also make an object that potentially contains security-sensitive data nonserializable if possible. Apply the NonSerialized attribute to certain fields that store sensitive data if the object must be serialized. If you don\u2019t exclude these fields from serialisation, the data they store will be visible to any programmes with serialization permission.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The NonSerialized attribute can be used to prevent member variables from being serialized.You should also make an object that potentially contains security-sensitive data nonserializable if possible. Apply the NonSerialized attribute to certain fields that store sensitive data if the object must be serialized. If you don\u2019t exclude these fields from serialisation, the data they store [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2221"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2221"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2221/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2222,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2221/revisions/2222"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2221"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2221"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2221"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2223,
    "date": "2022-04-19T09:51:26",
    "date_gmt": "2022-04-19T09:51:26",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2223"
    },
    "modified": "2022-04-19T09:51:26",
    "modified_gmt": "2022-04-19T09:51:26",
    "slug": "can-you-call-a-constructor-of-a-class-inside-another-constructor",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/can-you-call-a-constructor-of-a-class-inside-another-constructor/",
    "title": {
      "rendered": "Can you call a constructor of a class inside another constructor?"
    },
    "content": {
      "rendered": "\n<p>Yes, we can call a constructor of a class inside another constructor. This is also called as constructor chaining. Constructor chaining can be done in 2 ways-</p>\n\n\n\n<ol><li><strong>Within the same class:</strong>&nbsp;For constructors in the same class, the this() keyword can be used.</li><li><strong>From the base class:</strong>&nbsp;The super() keyword is used to call the constructor from the base class.<br>The constructor chaining follows the process of inheritance. The constructor of the sub class first calls the constructor of the super class. Due to this, the creation of sub class\u2019s object starts with the initialization of the data members of the super class. The constructor chaining works similarly with any number of classes. Every constructor keeps calling the chain till the top of the chain.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Yes, we can call a constructor of a class inside another constructor. This is also called as constructor chaining. Constructor chaining can be done in 2 ways- Within the same class:&nbsp;For constructors in the same class, the this() keyword can be used. From the base class:&nbsp;The super() keyword is used to call the constructor from [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2223"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2223"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2223/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2224,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2223/revisions/2224"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2223"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2223"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2223"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2225,
    "date": "2022-04-19T09:51:55",
    "date_gmt": "2022-04-19T09:51:55",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2225"
    },
    "modified": "2022-04-19T09:51:55",
    "modified_gmt": "2022-04-19T09:51:55",
    "slug": "contiguous-memory-locations-are-usually-used-for-storing-actual-values-in-an-array-but-not-in-arraylist-explain",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/contiguous-memory-locations-are-usually-used-for-storing-actual-values-in-an-array-but-not-in-arraylist-explain/",
    "title": {
      "rendered": "Contiguous memory locations are usually used for storing actual values in an array but not in ArrayList. Explain."
    },
    "content": {
      "rendered": "\n<p>An array generally contains elements of the primitive data types such as int, float, etc. In such cases, the array directly stores these elements at contiguous memory locations. While an ArrayList does not contain primitive data types. An arrayList contains the reference of the objects at different memory locations instead of the object itself. That is why the objects are not stored at contiguous memory locations.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An array generally contains elements of the primitive data types such as int, float, etc. In such cases, the array directly stores these elements at contiguous memory locations. While an ArrayList does not contain primitive data types. An arrayList contains the reference of the objects at different memory locations instead of the object itself. That [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2225"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2225"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2225/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2226,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2225/revisions/2226"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2225"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2225"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2225"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2227,
    "date": "2022-04-19T09:52:22",
    "date_gmt": "2022-04-19T09:52:22",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2227"
    },
    "modified": "2022-04-19T09:52:22",
    "modified_gmt": "2022-04-19T09:52:22",
    "slug": "how-is-the-creation-of-a-string-using-new-different-from-that-of-a-literal",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/how-is-the-creation-of-a-string-using-new-different-from-that-of-a-literal/",
    "title": {
      "rendered": "How is the creation of a String using new() different from that of a literal?\u00a0"
    },
    "content": {
      "rendered": "\n<p>When we create a string using new(), a new object is created. Whereas, if we create a string using the string literal syntax, it may return an already existing object with the same name.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>When we create a string using new(), a new object is created. Whereas, if we create a string using the string literal syntax, it may return an already existing object with the same name.</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2227"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2227"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2227/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2228,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2227/revisions/2228"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2227"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2227"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2227"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2229,
    "date": "2022-04-19T09:53:42",
    "date_gmt": "2022-04-19T09:53:42",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2229"
    },
    "modified": "2022-04-19T09:53:42",
    "modified_gmt": "2022-04-19T09:53:42",
    "slug": "why-is-synchronization-necessary-explain-with-the-help-of-a-relevant-example",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/why-is-synchronization-necessary-explain-with-the-help-of-a-relevant-example/",
    "title": {
      "rendered": "Why is synchronization necessary? Explain with the help of a relevant example."
    },
    "content": {
      "rendered": "\n<p>Java allows multiple threads to execute. They may be accessing the same variable or object. Synchronization helps to execute threads one after another.<br>It is important as it helps to execute all concurrent threads while being in sync. It prevents memory consistency errors due to access to shared memory. An example of synchronization code is-</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public synchronized void increment()\n{\na++;\n}</code></pre>\n\n\n\n<p>As we have synchronized this function, this thread can only use the object after the previous thread has used it.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Java allows multiple threads to execute. They may be accessing the same variable or object. Synchronization helps to execute threads one after another.It is important as it helps to execute all concurrent threads while being in sync. It prevents memory consistency errors due to access to shared memory. An example of synchronization code is- As [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2229"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2229"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2229/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2230,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2229/revisions/2230"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2229"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2229"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2229"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2231,
    "date": "2022-04-19T09:54:06",
    "date_gmt": "2022-04-19T09:54:06",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2231"
    },
    "modified": "2022-04-19T09:54:06",
    "modified_gmt": "2022-04-19T09:54:06",
    "slug": "explain-the-term-double-brace-initialization-in-java",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/explain-the-term-double-brace-initialization-in-java/",
    "title": {
      "rendered": "Explain the term \u201cDouble Brace Initialization\u201d in Java?"
    },
    "content": {
      "rendered": "\n<p>Double Brace Initialization is a Java term that refers to the combination of two independent processes. There are two braces used in this. The first brace creates an anonymous inner class. The second brace is an initialization block. When these both are used together, it is known as Double Brace Initialization. The inner class has a reference to the enclosing outer class, generally using the \u2018this\u2019 pointer. It is used to do both creation and initialization in a single statement. It is generally used to initialize collections. It reduces the code and also makes it more readable.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Double Brace Initialization is a Java term that refers to the combination of two independent processes. There are two braces used in this. The first brace creates an anonymous inner class. The second brace is an initialization block. When these both are used together, it is known as Double Brace Initialization. The inner class has [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2231"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2231"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2231/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2232,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2231/revisions/2232"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2231"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2231"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2231"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 2233,
    "date": "2022-04-19T09:55:09",
    "date_gmt": "2022-04-19T09:55:09",
    "guid": {
      "rendered": "https://java.foobrdigital.com/?p=2233"
    },
    "modified": "2022-04-19T09:55:09",
    "modified_gmt": "2022-04-19T09:55:09",
    "slug": "why-is-it-said-that-the-length-method-of-string-class-doesnt-return-accurate-results",
    "status": "publish",
    "type": "post",
    "link": "https://java.foobrdigital.com/why-is-it-said-that-the-length-method-of-string-class-doesnt-return-accurate-results/",
    "title": {
      "rendered": "Why is it said that the length() method of String class doesn\u2019t return accurate results?\u00a0"
    },
    "content": {
      "rendered": "\n<p>The length() method of String class doesn\u2019t return accurate results because<br>it simply takes into account the number of characters within in the String. In other words, code points outside of the BMP (Basic Multilingual Plane), that is, code points having a value of U+10000 or above, will be ignored.</p>\n\n\n\n<p>The reason for this is historical. One of Java\u2019s original goals was to consider all text as Unicode; yet, Unicode did not define code points outside of the BMP at the time. It was too late to modify char by the time Unicode specified such code points.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The length() method of String class doesn\u2019t return accurate results becauseit simply takes into account the number of characters within in the String. In other words, code points outside of the BMP (Basic Multilingual Plane), that is, code points having a value of U+10000 or above, will be ignored. The reason for this is historical. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 4,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [83],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2233"
        }
      ],
      "collection": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/users/4"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/comments?post=2233"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2233/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 2234,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/posts/2233/revisions/2234"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/media?parent=2233"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/categories?post=2233"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://java.foobrdigital.com/wp-json/wp/v2/tags?post=2233"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]
