[
	{
		"title" : "What is a correct syntax to output \"Hello World\" in Python?",
		"detail" : "",
		"output" : "",
		"options" : {
			"a" : "p(Hello World)",
			"b" : "echo(\"Hello World\")",
			"c" : "print(\"Hello World\")",
			"d" : "cout<<\"Hello World\""
		},
		"correct": "C"
	},
	{
		"title" : "How can we swap two numbers a = 10, b = 20 in python without using third variable?",
		"detail" : "",
		"output" : "To swap two numbers we can use both a & b option. Both a & b are similar statemnts written in different ways.",
		"options" : {
			"a" : "a = b \n b = a",
			"b" : "a,b = b,a",
			"c" : "both a & b",
			"d" : "b = a \n a = b"
		},
		"correct": "C"
	},
	{
		"title" : "Select the option for following code −",
		"detail" : "s = 0 \n for d in range(0, 5, 0.1): \n … s += d \n … print(s)",
		"output" : "we will get type error during runtime as float object cannot be interpreted as integer. Here 0.1 is the float value.",
		"options" : {
			"a" : "Syntax Error",
			"b" : "Type Error",
			"c" : "Runtime Error",
			"d" : "Both B & C"
		},
		"correct": "D"
	},
	{
		"title" : "What is output for − max(''please help '')",
		"detail" : "",
		"output" : "python considers z as maximum value in the string and a blank space character as minimum value. So it goes like blank space, a to z as minimum to maximum.",
		"options" : {
			"a" : "s",
			"b" : "a blank space character",
			"c" : "e",
			"d" : "p"
		},
		"correct": "A"
	},
	{
		"title" : "What is output of following code −",
		"detail" : "l = [1,2,6,5,7,8] \n l.insert(9)",
		"output" : "listname.insert(x,y) method is used to insert a item at certain position in a list. x defines position at which the element will be added and y defines the element to be added in the list. And insert function takes exactly two arguments else it results in type error.",
		"options" : {
			"a" : "l=[9,1,2,6,5,7,8]",
			"b" : "l=[1,2,6,5,9.7,8] (insert randomly at any position)",
			"c" : "l=[1,2,6,5,7,8,9]",
			"d" : "Type Error"
		},
		"correct": "D"
	},
	{
		"title" : "Which of the following is more accurate for the following declaration?",
		"detail" : "x = Circle()",
		"output" : "x is the object created by the constructor of the class Circle().",
		"options" : {
			"a" : "Now you can assign int value to x.",
			"b" : "x contains a reference to a Circle object.",
			"c" : "x actually contains an object of type Circle.",
			"d" : "x contains an int value."
		},
		"correct": "B"
	},
	{
		"title" : "Which options are correct to create an empty set in Python?",
		"detail" : "",
		"output" : "we need to define the set by including the keyword ‘set’.",
		"options" : {
			"a" : "()",
			"b" : "{}",
			"c" : "[]",
			"d" : "set()"
		},
		"correct": "D"
	},
	{
		"title" : "Which among them is incorrect for set s={100,101,102,103}",
		"detail" : "",
		"output" : "There is no indexing in Sets.",
		"options" : {
			"a" : "Len(s)",
			"b" : "Sum(s)",
			"c" : "Print(s[3])",
			"d" : "Max(s)"
		},
		"correct": "C"
	},
	{
		"title" : "Suppose you are using a grid manager then which option is best suitable to place a component in multiple rows and columns?",
		"detail" : "",
		"output" : "",
		"options" : {
			"a" : "Columnspan and rowspan",
			"b" : "Only row",
			"c" : "Only column",
			"d" : "Only rowspan"
		},
		"correct": "A"
	},
	{
		"title" : "How do you insert COMMENTS in Python code?",
		"detail" : "",
		"output" : "",
		"options" : {
			"a" : "// This is a comment",
			"b" : "# This is a comment",
			"c" : "/* This is a comment */",
			"d" : "<!== This is a comment ==>"
		},
		"correct": "B"
	},
	{
		"title" : "Which one is NOT a legal variable name?",
		"detail" : "",
		"output" : "",
		"options" : {
			"a" : "my_var",
			"b" : "myVar",
			"c" : "_myvar",
			"d" : "my-var"
		},
		"correct": "D"
	},
	{
		"title" : "What is the correct file extension for Python files?",
		"detail" : "",
		"output" : "",
		"options" : {
			"a" : ".pt",
			"b" : ".py",
			"c" : ".pyth",
			"d" : ".pyt"
		},
		"correct": "B"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "listOne = [20, 40, 60, 80] \n listTwo = [20, 40, 60, 80] \n \n print(listOne == listTwo)",
		"output" : "Equal To operator == used to compare the values of two objects while The is operator compares the identity of two objects.",
		"options" : {
			"a" : "False",
			"b" : "Syntax Error",
			"c" : "True",
			"d" : "Undefined"
		},
		"correct": "C"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "sampleList = [\"Jon\", \"Kelly\", \"Jessa\"] \n sampleList.append(2, \"Scott\") \nprint(sampleList)",
		"output" : "The append() method appends an item to the end of the list. SO we cannot pass the index number to it.",
		"options" : {
			"a" : "The program executed with errors",
			"b" : "[‘Jon’, ‘Kelly’, ‘Scott’, ‘Jessa’]",
			"c" : "[‘Jon’, ‘Kelly’, ‘Jessa’, ‘Scott’]",
			"d" : "[‘Jon’, ‘Scott’, ‘Kelly’, ‘Jessa’]"
		},
		"correct": "A"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "valueOne = 5 ** 2 \n print(valueOne)",
		"output" : "Using two multiplication symbols, we can make a power relationship in Python.",
		"options" : {
			"a" : "10",
			"b" : "15",
			"c" : "20",
			"d" : "25"
		},
		"correct": "D"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "valueTwo = 5 ** 3 \n print(valueTwo)",
		"output" : "Using two multiplication symbols, we can make a power relationship in Python. We call ** operator as an exponent operator. That is, in the expression 5 ** 3, 5 is being raised to the 3rd power.",
		"options" : {
			"a" : "100",
			"b" : "125",
			"c" : "150",
			"d" : "175"
		},
		"correct": "B"
	},
	{
		"title" : "Can we use the “else” clause for loops?",
		"detail" : "for i in range(1, 5): \n print(i) \n else: \n print(\"this is else block statement\" )",
		"output" : "We can use the else block after the end of for/while loop. The else block is used to check the successful execution of a loop. If the loop executed successfully without any issues, the else block executes.",
		"options" : {
			"a" : "Yes",
			"b" : "NO",
			"c" : "True",
			"d" : "False"
		},
		"correct": "A"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "p, q, r = 10, 20 ,30 \n print(p, q, r)",
		"output" : "In Python, We can do simultaneous assignments on more than one variable.",
		"options" : {
			"a" : "10 20",
			"b" : "10 20 30",
			"c" : "Syntax Error",
			"d" : "Undefined"
		},
		"correct": "B"
	},
	{
		"title" : "What is the output of the following code",
		"detail" : "salary = 8000 \n def printSalary(): \n salary = 12000 \n print(\"Salary:\", salary) \n printSalary()\nprint(\"Salary:\", salary)",
		"output" : "If you define a variable with the same name inside the scope of function as well at the global scope, then it will print the value given inside the function only and not the global value.",
		"options" : {
			"a" : "The program failed with errors",
			"b" : "Salary: 8000 Salary: 12000",
			"c" : "Salary: 12000 Salary: 8000",
			"d" : "Undefined"
		},
		"correct": "C"
	},
	{
		"title" : "What is the output of the following",
		"detail" : "x = 36 / 4 * (3 +  2) * 4 + 2 \n print(x)",
		"output" : "To choose the correct answer, You must know the operator precedence and associativity",
		"options" : {
			"a" : "182.0",
			"b" : "37.0",
			"c" : "117.0",
			"d" : "127.0"
		},
		"correct": "A"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "var = \"James \" * 2  * 3 \n print(var)",
		"output" : "We can use * operator to repeat the string n number of times. Here in the above question, First, we repeated string two times, and again we repeated the output string three times.",
		"options" : {
			"a" : "James James James James James James",
			"b" : "James James James James James",
			"c" : "Error: invalid syntax",
			"d" : "Both A & B"
		},
		"correct": "A"
	},
	{
		"title" : "What is the Output of the following code?",
		"detail" : "for x in range(0.5, 5.5, 0.5): \n print(x)",
		"output" : "We cannot use the float numbers in range() function.",
		"options" : {
			"a" : "[0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5]",
			"b" : "[0.5, 1, 1.5, 2, 2.5, 3.5, 3.5, 4.5, 4.5, 5]",
			"c" : "[0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]",
			"d" : "The Program executed with errors"
		},
		"correct": "D"
	},
	{
		"title" : "Which operator has higher precedence in the following list",
		"detail" : "",
		"output" : "",
		"options" : {
			"a" : "% (Modulus)",
			"b" : "& (BitWise AND)",
			"c" : "** (Exponent)",
			"d" : "> (Comparison)"
		},
		"correct": "C"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "var1 = 1 \n var2 = 2\nvar3 = \"3\" \n \n print(var + var2 + var3)",
		"output" : "We cannot add string and number together using + operator, either we can use + operator to concatenate a string or add numbers.",
		"options" : {
			"a" : "6",
			"b" : "33",
			"c" : "123",
			"d" : "Error"
		},
		"correct": "D"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "sampleSet = {\"Jodi\", \"Eric\", \"Garry\"} \n sampleSet.add(1, \"Vicki\")print(sampleSet)",
		"output" : "The set is an unordered data structure. So you cannot access/add/remove its elements by index number.",
		"options" : {
			"a" : "{‘Vicki’, ‘Jodi’, ‘Garry’, ‘Eric’}",
			"b" : "{‘Jodi’, ‘Vicki’, ‘Garry’, ‘Eric’}",
			"c" : "The program executed with error",
			"d" : "Both A & B"
		},
		"correct": "C"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "str = \"pynative\" \nprint (str[1:3])",
		"output" : "Remember, the index always starts at 0. Therefore, str [1 : 3] is “yn”",
		"options" : {
			"a" : "py",
			"b" : "yn",
			"c" : "pyn",
			"d" : "yna"
		},
		"correct": "B"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "for i in range(10, 15, 1): \n print( i, end=', ')",
		"output" : "Remember, the range doesn’t include a stop number in the output.",
		"options" : {
			"a" : "10, 11, 12, 13",
			"b" : "10, 11, 12",
			"c" : "10, 11, 12, 13, 14, 15,",
			"d" : "10, 11, 12, 13, 14,"
		},
		"correct": "D"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "var= \"James Bond\" /n print(var[2::-1])",
		"output" : "",
		"options" : {
			"a" : "Jam",
			"b" : "dno",
			"c" : "maJ",
			"d" : "sem"
		},
		"correct": "C"
	},
	{
		"title" : "What is the output of the following code?",
		"detail" : "def calculate (num1, num2=4): \n res = num1 * num2 \n print(res) \n\n calculate(5, 6)",
		"output" : "In Python, we can set default values for arguments. If the function is called without the argument, the default value is used.",
		"options" : {
			"a" : "The program executed with errors",
			"b" : "10",
			"c" : "20",
			"d" : "30"
		},
		"correct": "D"
	},
	{
		"title" : "What is the output of the following range() function",
		"detail" : "for num in range(2,-5,-1): \n print(num, end=\", \")",
		"output" : "",
		"options" : {
			"a" : "2, 1, 0, -1, -2, -3, -4, -5",
			"b" : "2, 1, 0, -1, -2, -3, -4",
			"c" : "2, 1, 0",
			"d" : "2, 1, 0, -1, -2"
		},
		"correct": "B"
	},
	{
		"title" : "Select which is true for for loop",
		"detail" : "",
		"output" : "We use while loop when we want to perform a task indefinitely until a particular condition is met.",
		"options" : {
			"a" : "Python’s for loop used to iterates over the items of list, tuple, dictionary, set, or string",
			"b" : "else clause of for loop is executed when the loop terminates naturally",
			"c" : "else clause of for loop is executed when the loop terminates abruptly",
			"d" : "Both A & B"
		},
		"correct": "D"
	},
	{
		"title" : "What is the output of the following nested loop",
		"detail" : "for num in range(10, 14): \n for i in range(2, num): \n if num%i == 1: \n print(num)\n break",
		"output" : "We use a break statement to terminates the loop and transfers execution to the statement immediately following the loop.",
		"options" : {
			"a" : "10 11 12 13",
			"b" : "11 12",
			"c" : "11 12 13",
			"d" : "10 12 13"
		},
		"correct": "A"
	},
	{
		"title" : "Given the nested if-else structure below, what will be the value of x after code execution completes",
		"detail" : "x = 0 \n a = 0 \n b = -5\n if a > 0: \n if b < 0: \nx = x + 5 \nelif a > 5:\n x = x + 4\n else:\nx = x + 3\n else:\nx = x + 2\nprint(x)",
		"output" : "",
		"options" : {
			"a" : "0",
			"b" : "1",
			"c" : "2",
			"d" : "3"
		},
		"correct": "C"
	},
	{
		"title" : "Given the nested if-else below, what will be the value x when the code executed successfully",
		"detail" : "x = 0\na = 5\nb = 5\nif a > 0:\nif b < 0: \nx = x + 5 \nelif a > 5:\nx = x + 4\nelse:\nx = x + 3\nelse:\n x = x + 2\nprint(x)",
		"output" : "",
		"options" : {
			"a" : "1",
			"b" : "2",
			"c" : "3",
			"d" : "4"
		},
		"correct": "C"
	},
	{
		"title" : "What is the output of the following loop",
		"detail" : "for l in 'Jhon':\nif l == 'o':\npass\nprint(l, end=\", \")",
		"output" : "In Python, the pass is a null operation. The Python interpreter executes the pass statement without any activity. The pass statement is useful when you want to write the pseudo code that you want to implement it in the future.",
		"options" : {
			"a" : "j, h, n",
			"b" : "j, h",
			"c" : "j, h, o, n",
			"d" : "j, o, h, n"
		},
		"correct": "C"
	},
	{
		"title" : "What is the value of x",
		"detail" : "x = 0 \n while (x < 100):\nx+=2\nprint(x)",
		"output" : "",
		"options" : {
			"a" : "101",
			"b" : "99",
			"c" : "102",
			"d" : "100"
		},
		"correct": "D"
	},
	{
		"title" : "What is the value of x after the following nested for loop completes its execution",
		"detail" : "x = 0 \nfor i in range(10):\nfor j in range(-1, -10, -1):\nx += 1\nprint(x)",
		"output" : "",
		"options" : {
			"a" : "80",
			"b" : "90",
			"c" : "100",
			"d" : "110"
		},
		"correct": "B"
	},
	{
		"title" : "What is the output of the following for loop and  range() function",
		"detail" : "for num in range(-2,-5,-1): \nprint(num, end=\", \")",
		"output" : "",
		"options" : {
			"a" : "-2, -3, -4,",
			"b" : "-2, -1, -3, -4",
			"c" : "-2, -1, 0, 1, 2, 3,",
			"d" : "-2, -1, 0"
		},
		"correct": "A"
	},
	{
		"title" : "if -3 will evaluate to true",
		"detail" : "",
		"output" : "In Python, any non-zero value or nonempty container is considered TRUE. So if -3 will evaluate to true",
		"options" : {
			"a" : "True",
			"b" : "False",
			"c" : "Undefined",
			"d" : "Error"
		},
		"correct": "A"
	},
	{
		"title" : "What is the output of the following if statement",
		"detail" : "a, b = 12, 5 \nif a + b:\nprint('True')\nelse:\nprint('False')",
		"output" : "In Python, any non-zero value is considered TRUE. So it will evaluate to true",
		"options" : {
			"a" : "False",
			"b" : "True",
			"c" : "Undefined",
			"d" : "Error"
		},
		"correct": "B"
	}


]