[
  {
    "id": 5013,
    "date": "2021-05-27T11:40:03",
    "date_gmt": "2021-05-27T11:40:03",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5013"
    },
    "modified": "2021-05-27T11:40:03",
    "modified_gmt": "2021-05-27T11:40:03",
    "slug": "basic-authentication-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/basic-authentication-in-postman/",
    "title": {
      "rendered": "Basic Authentication in Postman"
    },
    "content": {
      "rendered": "\n<p>In the previous tutorials, we have had our hands on\u00a0<em><strong>Postman</strong>\u00a0</em>and learned how to use it in real life. We discussed about the\u00a0<strong><em>pre request script</em></strong>\u00a0and how we can dynamically change the values of variables before sending the requests. \u00a0In\u00a0<strong><em>postman navigation</em></strong>\u00a0we learned that we need\u00a0<em><strong>Authorization</strong></em>\u00a0for accessing secured servers.\u00a0<em><strong>Authorization</strong></em>\u00a0is the most important part while working with secured servers, which is most likely to happen. We will learn about</p>\n\n\n\n<ul><li><em><strong>Authorization and Authentication</strong></em></li><li><em><strong>Authorization vs Authentication</strong></em></li><li><em><strong>Need for Authorization</strong></em></li><li><em><strong>Basic Authentication in Postman</strong></em></li></ul>\n\n\n\n<h3><em><strong>What is Authorization?</strong></em></h3>\n\n\n\n<p>The meaning of authorization can be seen as a question which is,\u00a0<em><strong>are we eligible to access a\u00a0secured resource\u00a0on the Server?</strong></em>\u00a0If the answer is yes, then in technical terms we can say that we are\u00a0<em><strong>Authorized\u00a0</strong></em>to access the resource. If the answer is No, we can say that we are not\u00a0<em><strong>Authorized\u00a0</strong></em>to access the resource.\u00a0<em>For example, let us say you have added yours and your sister\u2019s fingerprint in your phone. You and your sister can open the same mobile phone, which means only you and your sister are authorized to open the phone and see the data</em>. Similarly, while there could be many\u00a0<em><strong>APIs</strong>\u00a0</em>in a company or a project. It is not necessary that everyone will have access on all the APIs. Only authorized people can access the secured APIs.</p>\n\n\n\n<h3><em><strong>Authorization Vs Authentication</strong></em></h3>\n\n\n\n<p><em><strong>Authorization</strong>&nbsp;</em>and&nbsp;<em><strong>Authentication</strong>&nbsp;</em>are two closely related terms. These two terms can also be confusing at first. In this section, we will clear the confusion about these two terms.</p>\n\n\n\n<p><em><strong>Authentication</strong>&nbsp;</em>is a process of presenting your credentials to the system and the system validating your credentials. These credentials tell the&nbsp;system about who you are. This enables the system to ensures and confirm a user\u2019s identity.&nbsp;<em>Here system can be anything, it can be a computer, phone, bank or any physical office premises</em>.</p>\n\n\n\n<p>Whereas&nbsp;<em><strong>Authorization</strong></em>&nbsp;is a process of allowing or denying someone from accessing something, once&nbsp;<em><strong>Authentication&nbsp;</strong></em>is done.&nbsp;<em>So in layman terms&nbsp;<strong>Authentication</strong>&nbsp;tells who you are while&nbsp;<strong>Authorization</strong>&nbsp;tells what you can do</em>.</p>\n\n\n\n<p><em>When a person accesses the server with the&nbsp;<strong>key/password</strong>, the server checks whether the person is available in directory and is also associated with the same&nbsp;<strong>key/password</strong>. If it is, you are good to go (<strong>Authentication</strong>). If you have access to the resource, then you will be granted access to the resource (<strong>Authorized</strong>).</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authentication-vs-Authorization-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authentication-vs-Authorization-1.png\" alt=\"Authentication vs Authorization\"/></a></figure>\n\n\n\n<p>We will see the following short example to tell you how does a server rejects unauthorized person.</p>\n\n\n\n<h2>Authorization using Postman</h2>\n\n\n\n<h3><strong><em>Checking Authorization</em></strong></h3>\n\n\n\n<p>For this chapter, we will be using the endpoint&nbsp;<em><strong>https://postman-echo.com/basic-auth</strong></em></p>\n\n\n\n<p>1.Create a&nbsp;<em>GET</em>&nbsp;request and enter the endpoint as&nbsp;<em><strong>https://postman-echo.com/basic-auth</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Basic_Auth_Endpoint.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Basic_Auth_Endpoint.png\" alt=\"Basic Authentication in Postman\"/></a></figure>\n\n\n\n<p>Press&nbsp;<em><strong>send</strong></em>&nbsp;and look at the response</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Basic_Auth_Response_Unauthorized.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Basic_Auth_Response_Unauthorized.png\" alt=\"Basic_Auth_Response_Unauthorized\"/></a></figure>\n\n\n\n<p><em><strong>Note:&nbsp;</strong>The status code is&nbsp;<strong>401</strong>&nbsp;which corresponds to unauthorized access and the response message says&nbsp;<strong>Unauthorized</strong>.</em></p>\n\n\n\n<p>The status code and response from the server indicates that we are not authorized to access the\u00a0<em>API</em>\u00a0we are trying to access(<em><strong>See</strong></em>\u00a0<em><strong>Responses tutorial\u00a0to learn more</strong></em>). Later in the tutorial, we will try to access the same\u00a0<em>API</em>\u00a0using the credentials as we discussed in the last section.</p>\n\n\n\n<h3><em><strong>Need for Authorization</strong></em></h3>\n\n\n\n<p>In the last section, we discussed that a resource owner does not allow access to the resources to everyone in the company. This is because it can lead to possible security breach.&nbsp;<em>If I allow an intern to access my database apis then inadvertently he can change the data and that data can be lost forever which can come as a cost to the company</em>. There are numerous reasons possible for the same. Maybe a person changes the data for money or a person can leak the data to another company. Authorization plays a very important role in deciding the accesses and tightening the security. Let us see the different types of Authentication available to us.</p>\n\n\n\n<h3><em><strong>Basic Access Authentication / HTTP Basic Authentication</strong></em></h3>\n\n\n\n<p>A&nbsp;<em><strong>Basic Access Authentication</strong></em>&nbsp;is the most simple and basic type of authorization available. It requires just a&nbsp;<em><strong>username</strong>&nbsp;</em>and&nbsp;<em><strong>password</strong>&nbsp;</em>for checking the authorization of any person (<em>That is why we say basic access&nbsp;<strong>authentication</strong></em>). The username and password are sent as header values in the&nbsp;<em><strong>Authorization header</strong></em>. While using basic authentication we add the word&nbsp;<em><strong>Basic</strong></em>&nbsp;before entering the username and password.&nbsp;<em><strong>These username and password values should be encoded with Base64 otherwise the server won\u2019t be able to recognize it</strong></em>. We will follow these steps to check whether we can access the same API&nbsp;we used above or not</p>\n\n\n\n<h2>Checking authorization using credentials</h2>\n\n\n\n<p>1.Enter the endpoint&nbsp;<em><strong>https://postman-echo.com/basic-auth in&nbsp;</strong>GET&nbsp;</em>request.</p>\n\n\n\n<p>2.Go to&nbsp;<em><strong>H</strong><strong>eaders</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Selecting_Headers.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Selecting_Headers.png\" alt=\"Selecting_Headers\"/></a></figure>\n\n\n\n<p>3.Enter the following key value pairs in Header</p>\n\n\n\n<p><em>Authorization&nbsp;&nbsp; :&nbsp;&nbsp;&nbsp; Basic postman:password</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization_Basic_Plain_Text.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization_Basic_Plain_Text.png\" alt=\"Authorization_Basic_Plain_Text\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: We are using username as&nbsp;<strong>postman</strong>&nbsp;and password as&nbsp;<strong>password</strong></em></p>\n\n\n\n<p>4.Press&nbsp;<em><strong>Send</strong></em>&nbsp;and see the response box and status code.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Bad_Request_Basic_Auth.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Bad_Request_Basic_Auth.png\" alt=\"Bad_Request_Basic_Auth\"/></a></figure>\n\n\n\n<p>It still says\u00a0<em><strong>400</strong></em>\u00a0,\u00a0<em>Bad Request</em>.(This part we have already covered in the\u00a0<em><strong>Responses Chapter\u00a0</strong></em>\u00a0under Status codes and their meaning.)\u00a0<em><strong>Can you guess why?</strong></em>\u00a0If you remember what we learnt in last section, a basic access authentication requires username and password to be encoded in Base64 but here we just sent the username and password in plain text. As a result server returned a 400, Bad Request status code. Before we move forward it will be beneficial to understand what\u00a0<strong>Base64</strong>\u00a0encoding is.</p>\n\n\n\n<h3><strong><em>What is Base64 encoding?</em></strong></h3>\n\n\n\n<p>An encoding is used in the authentication because we don\u2019t want our data to be transmitted directly over the network. There are a numerous reasons for that. Network scanners can read your Request and retrieve the Username and Password sent without encoding. Also, bits and bytes transmitted directly can be considered as inbuilt command bits by the modem or other equipment in the network chain.&nbsp;<em>For example, if there is an inbuilt command of&nbsp;<strong>0101101010</strong>&nbsp;which means reset to the modem then while transmitting we have may want get a data sequence of 001101010<strong>0101101010</strong>11020. Here the modem might interpret it as an reset command and will reset itself</em>. In order to avoid such problems it is beneficial to encode the data.</p>\n\n\n\n<p>We use&nbsp;<strong>base64</strong>&nbsp;particularly because it transmits the data into textual form and send it in easier form such as HTML form data<strong>.</strong>&nbsp;We use&nbsp;<strong>Base64</strong>&nbsp;particularly because we can rely on the same 64 characters in any encoding language that we use. Although we can use higher base encoding methods also but they are very hard to convert and transmit which wastes time unnecessarily.</p>\n\n\n\n<p>Coming back to the original problem of sending a&nbsp;<strong>Base64</strong>&nbsp;encoded string in&nbsp;<strong>Authorization</strong>&nbsp;header. We have two ways in front of us for creating a&nbsp;<strong>Base64</strong>&nbsp;encoded string:</p>\n\n\n\n<ul><li><em><strong>Through third party website</strong></em></li><li><em><strong>Through Postman</strong></em></li></ul>\n\n\n\n<p>We will see both of the options one by one. For now, follow the steps for accessing the api by decoding from third party website.</p>\n\n\n\n<h2>Authenticating by encoding through third party website</h2>\n\n\n\n<p>1.Go to&nbsp;<em><strong>https://www.base64encode.org/</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Base64_Website.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Base64_Website.png\" alt=\"Base64_Website\"/></a></figure>\n\n\n\n<p><strong><em>Note</em></strong>:&nbsp;<em>There are thousands of websites available for the same purpose. You can use anyone just make sure you encode to the same value as us. Also, we are using&nbsp;<strong>Microsoft Edge</strong>&nbsp;as the browser, though it should not make any difference.</em></p>\n\n\n\n<p>2.Paste in the box the following values</p>\n\n\n\n<p><em>postman:password</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Encode_Box.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Encode_Box.png\" alt=\"Encode_Box\"/></a></figure>\n\n\n\n<p>3.Press&nbsp;<em><strong>Encode.</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Press_Encde.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Press_Encde.png\" alt=\"Press_Encde\"/></a></figure>\n\n\n\n<p>4.Copy the encoded text.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Encode_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Encode_Response.png\" alt=\"Encode_Response\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: Do not use space in between any two texts or symbols.&nbsp;<strong>postman : password</strong>&nbsp;will encode to a different value while&nbsp;<strong>postman: password</strong>&nbsp;will encode to a different one. Needless to say, both will be considered wrong. Use&nbsp;<strong>postman:password</strong>&nbsp;only.</em></p>\n\n\n\n<p>5.Go to the postman app and instead of&nbsp;<em><strong>postman:password</strong></em>, paste the encoded value</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Encoded_Basic_Base64.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Encoded_Basic_Base64.png\" alt=\"Encoded_Basic_Base64\"/></a></figure>\n\n\n\n<p>6.Press&nbsp;<em><strong>send</strong></em>&nbsp;and see the value of the response box and the status code.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Basic_Auth_Response_Authorized.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Basic_Auth_Response_Authorized.png\" alt=\"Basic_Auth_Response_Authorized\"/></a></figure>\n\n\n\n<p><em><strong>200 OK, authenticated</strong></em>&nbsp;means we have provided correct credentials and now we are authorized to access the data.</p>\n\n\n\n<h2>Authenticating by encoding through Postman</h2>\n\n\n\n<p>Instead of going to a third party website we will try to encode using Postman.</p>\n\n\n\n<p>1.Erase the key value pair that we entered earlier so that it now has no values.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Header_Empty.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Header_Empty.png\" alt=\"Header_Empty\"/></a></figure>\n\n\n\n<p>2.Go to the&nbsp;<em><strong>authorization</strong></em>&nbsp;tab</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization_Tab.png\" alt=\"Authorization_Tab\"/></a></figure>\n\n\n\n<p>3.Select&nbsp;<em><strong>Basic Auth</strong></em>&nbsp;in the&nbsp;<em><strong>Type</strong></em>&nbsp;dropdown</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Select_Basic_Auth-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Select_Basic_Auth-1.png\" alt=\"Select_Basic_Auth\"/></a></figure>\n\n\n\n<p>4.Enter username as&nbsp;<em><strong>postman</strong></em>&nbsp;and password as&nbsp;<em><strong>password</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Basic_Auth_Username_Password.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Basic_Auth_Username_Password.png\" alt=\"Basic_Auth_Username_Password\"/></a></figure>\n\n\n\n<p>5.Press&nbsp;<em><strong>Preview Request</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Preview_Request.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Preview_Request.png\" alt=\"Preview_Request\"/></a></figure>\n\n\n\n<p>6.Go to&nbsp;<em><strong>Header</strong></em>&nbsp;and see that Postman has converted the username and password for you.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Encoded_Basic_Base64-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Encoded_Basic_Base64-1.png\" alt=\"Encoded_Basic_Base64\"/></a></figure>\n\n\n\n<p>7.Press&nbsp;<em><strong>send</strong></em>&nbsp;and voila! we are authenticated.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Basic_Auth_Response_Authorized-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Basic_Auth_Response_Authorized-1.png\" alt=\"Basic_Auth_Response_Authorized\"/></a></figure>\n\n\n\n<p>Here we conclude our tutorial. I hope you must have learnt a good deal about basic&nbsp;<strong>Authorization</strong>&nbsp;in Postman. It is not that hard but it never hurts to just go through the tutorial once again to have a good hand on&nbsp;<strong>Authorization</strong>. Authorization and Authentication will be one of the most important topic that you will learn, so please internalize all the concepts taught here. We will move on to our next tutorial now.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous tutorials, we have had our hands on\u00a0Postman\u00a0and learned how to use it in real life. We discussed about the\u00a0pre request script\u00a0and how we can dynamically change the values of variables before sending the requests. \u00a0In\u00a0postman navigation\u00a0we learned that we need\u00a0Authorization\u00a0for accessing secured servers.\u00a0Authorization\u00a0is the most important part while working with secured servers, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5013"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5013"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5013/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5014,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5013/revisions/5014"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5013"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5013"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5013"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5015,
    "date": "2021-05-27T11:41:23",
    "date_gmt": "2021-05-27T11:41:23",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5015"
    },
    "modified": "2021-05-27T11:41:23",
    "modified_gmt": "2021-05-27T11:41:23",
    "slug": "environment-variables-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/environment-variables-in-postman/",
    "title": {
      "rendered": "Environment Variables in Postman"
    },
    "content": {
      "rendered": "\n<p>In the last tutorial we learnt about the\u00a0<strong><em>testing process</em></strong>\u00a0in Postman. We also learnt about the\u00a0<strong><em>collection runner</em></strong>\u00a0and how we can use it to test many request at the same time. Now with this tutorial we will move ahead to\u00a0<em><strong>Environment Variables in Postman</strong></em>\u00a0without which sending requests becomes a very hectic and time consuming tasks.</p>\n\n\n\n<p>In this tutorial, we will follow the following topics</p>\n\n\n\n<ul><li><em><strong>Environment and Environment Variables</strong></em></li><li><em><strong>Local Environment Variables</strong></em></li><li><em><strong>Scope of Variables</strong></em></li><li><em><strong>Global Variables</strong></em></li><li><em><strong>Precedence of variables in Postman</strong></em></li></ul>\n\n\n\n<h3><em><strong>Problem Statement</strong></em></h3>\n\n\n\n<p>We often encounter different servers in our company or team. These can be either development server, a production server or maybe a testing server. Every server has different types of request APIs.&nbsp; Since we know that a collection can include many requests within it, what if the URL changes?&nbsp;<em>For example, they change their server request URL. If the team managing the server changes the request API and inform us, we have a lot of trouble in front of us. For running the requests successfully now we have to make the changes to each and every request. For 300 requests, we will have to change 300 times.</em>&nbsp;This is purely a waste of time and resources. But since this happens a lot, Postman has a feature to deal with this in a few seconds and we will be good to go to use the requests again.</p>\n\n\n\n<h3><em><strong>What is an Environment in Postman?</strong></em></h3>\n\n\n\n<p>An environment in Postman is a&nbsp;<em><strong>set of key-value pairs</strong></em>. An environment helps us to differentiate between the requests. When we create an environment inside Postman, we can change the value of the key value pairs and the changes are reflected in our requests. An environment just provides boundaries to variables. When we create different environment we can make track of all the variables and how to use them inside our requests. There can be many variables inside one environment. At once, we can work only in one environment although we can create any number of environments in Postman. The below screenshot shows three environments that we created.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Environment_Example.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Environment_Example.png\" alt=\"Environment Variables in Postman\"/></a></figure>\n\n\n\n<h3><strong><em>What is an Environment Variable in Postman?</em></strong></h3>\n\n\n\n<p>A variable in the Postman is same as in any programming language. A variable is an entity whose value can be changed.&nbsp;<em><strong>The key part in the key-value set in environment is called variable</strong></em>. This variable can have any value and in place of the&nbsp;<em><strong>key</strong></em>&nbsp;we can use the variable name in every request. This will be clear with an example shown below and steps shown thereafter.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Variable_Example.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Variable_Example.png\" alt=\"Variable_Example\"/></a></figure>\n\n\n\n<p>The above image shows three variables inside environment&nbsp;<em><strong>Test Environment 1</strong></em></p>\n\n\n\n<h2>Environment Variables in Postman</h2>\n\n\n\n<p>Now, we will use Postman to create an Environment and Environment Variable and it is very easy to do that but it has three steps involved in the process:</p>\n\n\n\n<ol><li><em><strong>Create an Environment</strong></em></li><li><em><strong>Create Environment Variables</strong></em></li><li><em><strong>Use an Environment Variable in the Request</strong></em></li></ol>\n\n\n\n<h3><em><strong>Step 1: How to Create an Environment in Postman</strong></em></h3>\n\n\n\n<p>1.<em><strong>Create a new Collection</strong></em>\u00a0and name it as\u00a0<em><strong>EnvironmentChapter.\u00a0</strong></em></p>\n\n\n\n<p>2. Add\u00a0<em><strong>Weather Api Request</strong></em>\u00a0in the collection used in the\u00a0<em><strong>Get Request</strong></em>\u00a0chapter.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Environment_Chapter_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Environment_Chapter_Collection.png\" alt=\"Environment_Chapter_Collection\"/></a></figure>\n\n\n\n<p>3. Click on the&nbsp;<em><strong>gear&nbsp;</strong></em>icon which says Manage Environment.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Gear_Icon_Manage_Environment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Gear_Icon_Manage_Environment.png\" alt=\"Gear_Icon_Manage_Environment\"/></a></figure>\n\n\n\n<p>4. Click on&nbsp;<em><strong>Add.</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Add_Environment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Add_Environment.png\" alt=\"Add_Environment\"/></a></figure>\n\n\n\n<p>5. Name the environment as&nbsp;<em><strong>Weather API</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Weather_API_Envrionment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Weather_API_Envrionment.png\" alt=\"Weather_API_Envrionment\"/></a></figure>\n\n\n\n<h3><em><strong>Step 2: How to Create Environment Variables in Postman</strong></em></h3>\n\n\n\n<p>1.Now in the same window, enter the following&nbsp;<em>key-value</em>&nbsp;pair. Where&nbsp;<em><strong>Key is the name of the variable and Value is the text string.</strong></em></p>\n\n\n\n<p><em><strong>Key</strong>&nbsp;: URL</em></p>\n\n\n\n<p><em><strong>Value</strong>&nbsp;:&nbsp;http://restapi.demoqa.com</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Weather_API_Envrionment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Weather_API_Envrionment.png\" alt=\"Weather_API_Envrionment\"/></a></figure>\n\n\n\n<p>Click on&nbsp;<em><strong>Add</strong></em>&nbsp;and close the panel.</p>\n\n\n\n<h3><strong><em>Step 3: How to Use Environment&nbsp;Variables in Postman</em></strong></h3>\n\n\n\n<p>1. Select the dropdown which says No Environment and select&nbsp;<em><strong>Weather API</strong></em>&nbsp;environment in that.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Dropdown_For_Environment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Dropdown_For_Environment.png\" alt=\"Dropdown_For_Environment\"/></a></figure>\n\n\n\n<p>Now we can access all the variables of this environment.</p>\n\n\n\n<p>2. In the address bar change&nbsp;<em><strong>&nbsp;http://restapi.demoqa.com</strong></em>&nbsp;to&nbsp;<em><strong>{{url}}</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Change_to_URL_Variable.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Change_to_URL_Variable.png\" alt=\"Change_to_URL_Variable\"/></a></figure>\n\n\n\n<p>3. Click on&nbsp;<em><strong>Send</strong></em>.</p>\n\n\n\n<p>Now, we have created an environment and used a variable called&nbsp;<em><strong>URL</strong></em>&nbsp;here. This variable can be now used instead of the actual URL. You can see the response which is same as before we were using the full URL.</p>\n\n\n\n<p>So, if by any chance the URL changes, we can just go to environment and change the URL value and it will be reflected in every request.</p>\n\n\n\n<p><strong>NOTE</strong>:&nbsp;<em>Remember to save the request by clicking&nbsp;<strong>Save</strong>&nbsp;button. In the future chapters, we will use this modified request only</em>.</p>\n\n\n\n<h2>Scope of Variables in Postman</h2>\n\n\n\n<p>A scope of anything is the&nbsp;<em><strong>boundary in which that thing can be accessed and perform</strong></em>.&nbsp;<em>For example, if you are an engineer and do not have a passport, your scope is limited to India since you cannot go outside. While having a passport changes your scope to the world</em>. Similarly, variables in Postman have two scopes</p>\n\n\n\n<ul><li><strong><em>Local Scope</em></strong></li><li><strong><em>Global Scope</em></strong></li></ul>\n\n\n\n<h3><em><strong>Local Scope</strong></em></h3>\n\n\n\n<p><em><strong>Local Scope Variables</strong></em>&nbsp;can only work inside the environment in which it was created.&nbsp;<em><strong>Changing the environment will stop the access to that variable and we will encounter an error</strong></em>.</p>\n\n\n\n<p>The variable URL that we just created above is the local variable because it has a scope only till the environment Weather API. In the following steps we will explore the limitations of local variable by accessing local variable in other environment, where it is not present.</p>\n\n\n\n<p>1.Go to the dropdown where we selected&nbsp;<em><strong>Weather API</strong></em>&nbsp;and select any other value (if you have) or&nbsp;<em><strong>No Environment</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Dropdown_For_No_Environment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Dropdown_For_No_Environment.png\" alt=\"Dropdown_For_No_Environment\"/></a></figure>\n\n\n\n<p>2. Click&nbsp;<em><strong>Send</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Wrong_Environment_Error.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Wrong_Environment_Error.png\" alt=\"Wrong_Environment_Error\"/></a></figure>\n\n\n\n<p><em>This error occured because Postman does not know about&nbsp;<strong>URL</strong>&nbsp;variable because we have changed the environment. Therefore, URL is a local variable having scope only till the&nbsp;<strong>Weather API</strong>&nbsp;environment.</em></p>\n\n\n\n<h3><strong><em>Global Scope</em></strong></h3>\n\n\n\n<p><em><strong>Global Scope Variables</strong></em>&nbsp;can work outside the environment also. They are global and it does not matter which environment is selected. In the following image you can see three global variables by clicking the&nbsp;<em><strong>Eye</strong></em>&nbsp;icon.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Global_Variable_Example.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Global_Variable_Example.png\" alt=\"Global_Variable_Example\"/></a></figure>\n\n\n\n<h2>Global Variables in Postman</h2>\n\n\n\n<p>Now, we will use Postman to create&nbsp;<em><strong>Global Variables.</strong></em></p>\n\n\n\n<p><del><em><strong>Create an Environment:&nbsp;</strong></em></del><em>Just because global variables are not associated with any particular environment, there is no need to create an environment for global variables.</em></p>\n\n\n\n<ol><li><em><strong>Create Global Variables</strong></em></li><li><em><strong>Use Global Variable in the Request</strong></em></li></ol>\n\n\n\n<h3><em><strong>Step 1: How to create a Global Variable in Postman</strong></em></h3>\n\n\n\n<p>1.Go to the same&nbsp;<em><strong>gear icon</strong></em>&nbsp;to open the environment panel which we did at the time of creating&nbsp;<em>Local Variable</em>.</p>\n\n\n\n<p>2. Select&nbsp;<em><strong>Globals</strong></em>&nbsp;to add a global variable.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Adding_Global_Variable.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Adding_Global_Variable.png\" alt=\"Adding_Global_Variable\"/></a></figure>\n\n\n\n<p>3. Add the following key-value pair</p>\n\n\n\n<p><em><strong>Key</strong>&nbsp;: URL</em></p>\n\n\n\n<p><em><strong>Value</strong>&nbsp;:&nbsp;http://restapi.demoqa.com</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Global_Variable.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Global_Variable.png\" alt=\"Global_Variable\"/></a></figure>\n\n\n\n<p>4. Save and close the panel.</p>\n\n\n\n<h3><em><strong>Step 2: How to use Global Variable in Postman Request</strong></em></h3>\n\n\n\n<p>1.The request which we created above, just select the&nbsp;<em><strong>N</strong><strong>o environment</strong></em>&nbsp;from the environment dropdown.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/No_Environment_Selected.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_No_Environment_Selected.png\" alt=\"No_Environment_Selected\"/></a></figure>\n\n\n\n<p>5. Press&nbsp;<em><strong>Send</strong></em>&nbsp;and now see the result.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Global_Variable_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Global_Variable_Response.png\" alt=\"Global_Variable_Response\"/></a></figure>\n\n\n\n<p>It works now because we have created a global variable which can be used with every environment.</p>\n\n\n\n<p><strong>NOTE</strong><em>: Global scope cannot have duplicate/same names while variables having local scope can have the same name in different environments.</em></p>\n\n\n\n<p>For convenience Postman also has a feature which lets you see all the current variables and environment. Just click on&nbsp;<em><strong>E</strong><strong>ye</strong></em>&nbsp;icon and it list down all the Environments and Global variables.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Eye_Icon-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Eye_Icon-1.png\" alt=\"Eye_Icon\"/></a></figure>\n\n\n\n<p>and you can see the global variable under&nbsp;<em><strong>Globals</strong></em>&nbsp;written. We have not selected any environment therefore there is no information about the environment. You can try it out yourself.</p>\n\n\n\n<h2>Precedence in Variables</h2>\n\n\n\n<p>As we discussed, two global variables cannot have same name while two local variables can have same name provided they are in different environments. But what if one local variable and one global variable has same name?&nbsp;<em>For example, you name a local variable ABC and a global variable ABC. Now when you select that respective environment both the variables will be activated. So, which will show its value?</em>&nbsp;This confusion is solved by precedence.</p>\n\n\n\n<p>Precedence generally means priority. While two or more things strike together, the one with higher priority (precedence) is preferred.&nbsp;<em><strong>In Postman for same name of environment specific variable and global variable, environment specific variable or local variable has higher precedence</strong></em>. It will overwrite the global one.</p>\n\n\n\n<p>1.Now in the dropdown panel select&nbsp;<em><strong>Weather API</strong></em>&nbsp;instead of&nbsp;<em><strong>No Environment</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Weather_API_Envrionment_Selected.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Weather_API_Envrionment_Selected.png\" alt=\"Weather_API_Envrionment_Selected\"/></a></figure>\n\n\n\n<p>Now we have two variables of same name accessible. One in Weather API environment and one which is global.</p>\n\n\n\n<p>2. Click on&nbsp;<em><strong>Eye</strong></em>&nbsp;icon to have a look</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Eye_Icon_With_Same_Variables.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Eye_Icon_With_Same_Variables.png\" alt=\"Eye_Icon_With_Same_Variables\"/></a></figure>\n\n\n\n<p>Here we have a problem, both the variables have same values. But if you look in the image above,&nbsp;<em><strong>global URL has been sliced off with a line</strong></em>. This has happened because both the variables have the same name and the precedence will be given to the local variable so global variable will not be used.</p>\n\n\n\n<p>3.Go to the&nbsp;<em><strong>Manage Environment (gear icon)</strong></em>&nbsp;and click on&nbsp;<em><strong>Weather API&nbsp;</strong></em>environment</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Change_The_Weather_API-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Change_The_Weather_API-1.png\" alt=\"Change_The_Weather_API\"/></a></figure>\n\n\n\n<p>4. Change the&nbsp;<em><strong>url</strong></em>&nbsp;value to anything you like. Here we have changed it to&nbsp;<em><strong>anonymous</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Edit_Environment.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Edit_Environment.png\" alt=\"Edit_Environment\"/></a></figure>\n\n\n\n<p>5. Close the panel and look at the current environments again by selecting the&nbsp;<em><strong>Eye</strong></em>&nbsp;icon</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Eye_Icon_All_Variables.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Eye_Icon_All_Variables.png\" alt=\"Eye_Icon_All_Variables\"/></a></figure>\n\n\n\n<p>Both the variables are now accessible and can be used. If you press send now, you will get the correct response from global variable which you would get from local variable if they had same name. This is how precedence works.</p>\n\n\n\n<p>This is all from the Environment and variable chapter. Now you can use Postman efficiently and manage request like a professional. We will move on to the next chapter now.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the last tutorial we learnt about the\u00a0testing process\u00a0in Postman. We also learnt about the\u00a0collection runner\u00a0and how we can use it to test many request at the same time. Now with this tutorial we will move ahead to\u00a0Environment Variables in Postman\u00a0without which sending requests becomes a very hectic and time consuming tasks. In this tutorial, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5015"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5015"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5015/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5016,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5015/revisions/5016"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5015"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5015"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5015"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5017,
    "date": "2021-05-27T11:43:58",
    "date_gmt": "2021-05-27T11:43:58",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5017"
    },
    "modified": "2021-05-27T11:43:58",
    "modified_gmt": "2021-05-27T11:43:58",
    "slug": "collections-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/collections-in-postman/",
    "title": {
      "rendered": "Collections In Postman"
    },
    "content": {
      "rendered": "\n<h2>Collections in Postman</h2>\n\n\n\n<p>Till now, we have learnt the\u00a0<strong><em>terminologies of Postman</em></strong>\u00a0in-depth and also have\u00a0made some\u00a0<em><strong>GET Requests</strong></em>. In the previous tutorials, we mentioned and briefly explained collections. Recall that\u00a0<em><strong>Collections\u00a0</strong></em>are a group of requests grouped into one folder. So that we can use them and share them easily. But in this tutorial, we will learn that a\u00a0<em><strong>Collection</strong></em>\u00a0is much more than that.</p>\n\n\n\n<p>The definition of&nbsp;<em><strong>Collections</strong></em>&nbsp;is confined to a just grouping of requests. But, grouping of requests can have unparalleled advantages and make the work of a software developer many folds easy. We will now learn how to step by step save a&nbsp;<em><strong>Collection</strong></em>.</p>\n\n\n\n<h3><strong><em>How to create and save collections in Postman?</em></strong></h3>\n\n\n\n<p>1.First of all, hit the endpoint&nbsp;<strong><em>http://restapi.demoqa.com/utilities/weatherfull/city/Hyderabad</em></strong>&nbsp;and in the response box change the format to&nbsp;<em><strong>Text</strong>&nbsp;</em>to see the result.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Request_ToolsQA_Weather.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Request_ToolsQA_Weather.png\" alt=\"Request_ToolsQA_Weather\"/></a></figure>\n\n\n\n<p>2. Now go to&nbsp;<em><strong>Collections</strong>&nbsp;</em>Tab and press the icon that says,&nbsp;<em><strong>New Collection</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/New_Collection_icon.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_New_Collection_icon.png\" alt=\"New_Collection_icon\"/></a></figure>\n\n\n\n<p>3. Write a name of your choice for your first collection and it\u2019s description. In the following image you can see I chose the name&nbsp;<em><strong>MyFirstCollection</strong></em>&nbsp;and a simple description.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Naming_Collection_MyFirstCollection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Naming_Collection_MyFirstCollection.png\" alt=\"Naming_Collection_MyFirstCollection\"/></a></figure>\n\n\n\n<p>4. Press&nbsp;<em><strong>Create</strong></em>&nbsp;to create your first collection.</p>\n\n\n\n<p>5. Now, you have your first collection created but it\u2019s empty as of now. Press&nbsp;<em><strong>Save</strong></em>&nbsp;button in the side of address bar.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Save_Request.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Save_Request.png\" alt=\"Save_Request\"/></a></figure>\n\n\n\n<p>6. Choose your collection name in the panel as shown in the image. Press&nbsp;<em><strong>Save</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Save_to_my_collection-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Save_to_my_collection-1.png\" alt=\"Save_to_my_collection\"/></a></figure>\n\n\n\n<p><em>Now look at the collections tab, you will have the request saved below your collection name</em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Request_Saved_To_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Request_Saved_To_Collection.png\" alt=\"Request_Saved_To_Collection\"/></a></figure>\n\n\n\n<p>You can click on the&nbsp;<em><strong>Meatballs</strong></em>&nbsp;menu in the side of the collection name and you will see some options. We will talk about the following options in this tutorial.</p>\n\n\n\n<ul><li><em><strong>Share Collection</strong></em></li><li><em><strong>Export Collection</strong></em></li><li><em><strong>Add Folder to a Collection</strong></em></li><li><em><strong>Duplicate the Collection</strong></em></li><li><em><strong>Remove the collection from workspace</strong></em></li><li><em><strong>Delete the collection</strong></em></li><li><em><strong>Leave a comment on the collection</strong></em></li></ul>\n\n\n\n<h3><em><strong>Share Collection</strong></em></h3>\n\n\n\n<p>Share collection option is used to share the collection to other people such as your team members.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Share_Collection_Option.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Share_Collection_Option.png\" alt=\"Share_Collection_Option\"/></a></figure>\n\n\n\n<p>Sharing a collection is very important when you are working in a company or in a team. There are times when developers create a bunch of&nbsp;<strong><em>Postman Requests</em>&nbsp;</strong>while developing APIs to test it. You can request developers to share their collections and you get benefits of it. Or even you create a bunch of&nbsp;<em><strong>Postman Requests</strong>,</em>&nbsp;save it to a&nbsp;<em><strong>Collections</strong>&nbsp;</em>and share it with your team. It is not worth sharing every request one by one. Rather, we share our&nbsp;<em><strong>Collection</strong></em>&nbsp;as a whole to the team members or anyone to whom we want to share through different methods listed below.</p>\n\n\n\n<p><em>For example, if you are a tester and find out some bug, you can save your steps to reproduce in a&nbsp;<strong>Collection</strong>, and attach the same to the bug for the developer as a proof and to reproduce the issue.</em>&nbsp;For using this option&nbsp;<em><strong>you must be signed into postman</strong></em>. After signing into Postman you get two options to share the collection.</p>\n\n\n\n<ul><li><strong><em>Through workspace</em></strong></li><li><strong><em>Sharing through link</em></strong></li></ul>\n\n\n\n<h4><em><strong>Workspace</strong></em></h4>\n\n\n\n<p>A workspace&nbsp;is a collaborative environment for a group of users to develop and test APIs. In simpler terms, workspace is the project in which you work. A setting done in a workspace remains in the same workspace. It is like a shell in which you work. There has to be a workspace to work in Postman, you cannot work isolated. There are two types of workspaces inside Postman</p>\n\n\n\n<ol><li><em><strong>Team Workspace :&nbsp;</strong>To use the option of Team workspace your company or you must have purchased the Postman Pro version or else this feature won\u2019t work. In Team workspace option, your team can test api simultaneously on one workspace and anyone can edit and update (with permissions). This comes handy when teams are located in different locations or different buildings also. Once edited, everyone\u2019s api is updated automatically. There can be any number of Team workspaces.</em></li><li><em><strong>Personal Workspace :&nbsp;</strong>A personal workspace is similar to the team workspace but the difference being this workspace is completely personal to the user who created it. Postman will have no contribution in updating it at any machine, if present.Collections present in the personal workspace is shared through link which is detailed below.</em></li></ol>\n\n\n\n<p>Individuals can organize their work in personal workspaces and teams can collaborate in team workspaces.&nbsp;When you start Postman, you are already inside personal workspace as shown.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/My_Workspace_Header.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_My_Workspace_Header.png\" alt=\"My_Workspace_Header\"/></a></figure>\n\n\n\n<p><em>You can create unlimited personal workspace which will be personal to your machine and can test any number of API</em>.</p>\n\n\n\n<h4><strong><em>Share Collection through a link</em></strong></h4>\n\n\n\n<p>Second option is by creating a link and sending it to the people of your team. This link will be of&nbsp;<em><strong>Postman Cloud</strong></em>. So, your collection will be first uploaded to&nbsp;<em><strong>Postman cloud</strong></em>&nbsp;and then anyone can access it through that link.&nbsp;<em><strong>But, this feature is not recommended while working in a company sometimes because the Apis are personal and companies would not want them to be in other cloud which is not safe.&nbsp;</strong></em></p>\n\n\n\n<h3><em><strong>Export Collections in Postman</strong></em></h3>\n\n\n\n<p>Export feature is used to export the collection as a whole by saving it to your computer and which can be later share with the team over the Email in a zip file. Or it can also be shared over a network sharing.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Export_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Export_Collection.png\" alt=\"Export_Collection\"/></a></figure>\n\n\n\n<p>Follow these steps to learn about exporting the collection.</p>\n\n\n\n<p>1.Click on&nbsp;<em><strong>export</strong>&nbsp;</em>as shown in the above image.</p>\n\n\n\n<p>2.You will see two or three options (depending on your version of Postman). For this tutorial we are using Postman ver 6.0.10. We will choose the option&nbsp;<em><strong>Collection v2.1&nbsp;</strong></em>and press&nbsp;<em><strong>Export</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Collection_v2.1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Collection_v2.1.png\" alt=\"Collection_v2.1\"/></a></figure>\n\n\n\n<p>This will open the box to save the collection in the Json format on your computer wherever you want. Then this json file can be shared with your teammates by any means just like a file.</p>\n\n\n\n<h3><em><strong>Add Folder</strong></em></h3>\n\n\n\n<p>Collections also let you make folders inside your collection and then save the requests inside your folders. This can further help you to sub-categorize the requests.&nbsp;<em>For example, in the previous chapters we took the example of movies folder to explain collection where you can store all your movies. Making a folder is like making another folder inside Movies folder, such as \u201c<strong>English Movies</strong>\u201d which will contain all the english language movies, but they are still movies</em>. Similarly, here we can make folders inside the collection and store our requests.</p>\n\n\n\n<p>1.Choose the option&nbsp;<strong><em>Add Folder</em>.</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Add_Folder_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Add_Folder_Collection.png\" alt=\"Add_Folder_Collection\"/></a></figure>\n\n\n\n<p>2. Name your folder and press&nbsp;<em><strong>Create</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Create_Folder_In_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Create_Folder_In_Collection.png\" alt=\"Create_Folder_In_Collection\"/></a></figure>\n\n\n\n<p><em>Now you have your folder created but as of now it is empty.</em></p>\n\n\n\n<p>3.Drag the request and drop it on the folder name.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Drag_Drop_Request.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Drag_Drop_Request.png\" alt=\"Drag_Drop_Request\"/></a></figure>\n\n\n\n<p>This will move your request to your folder and you are all set.</p>\n\n\n\n<h3><em><strong>Duplicate</strong></em></h3>\n\n\n\n<p>The option&nbsp;<em><strong>Duplicate</strong></em>&nbsp;as the name suggests, duplicates the collection into a new collection. It means when you click on Duplicate, you make another copy of the same collection in the workspace.</p>\n\n\n\n<p>1.Click on&nbsp;<em><strong>Duplicate</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Duplicate-_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Duplicate-_Collection.png\" alt=\"Duplicate _Collection\"/></a></figure>\n\n\n\n<p>2.You can see the copy in the sidebar underneath the original collection.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Duplicate_Copy_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Duplicate_Copy_Collection.png\" alt=\"Duplicate_Copy_Collection\"/></a></figure>\n\n\n\n<h3><em><strong>Remove From Workspace</strong></em></h3>\n\n\n\n<p>Remove from workspace option deletes the collection from the workspace that you are working on.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Remove_From_Workspace.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Remove_From_Workspace.png\" alt=\"Remove_From_Workspace\"/></a></figure>\n\n\n\n<p>If it is a personal workspace then you can delete it by choosing the option whereas if it is a team workspace then you need to have permission for deleting any collection or request from the workspace.</p>\n\n\n\n<h3><em><strong>Delete</strong></em></h3>\n\n\n\n<p>Delete and remove from workspace option might seem similar but they differ in just one aspect.&nbsp;<em><strong>Remove from workspace deletes the collection from the current workspace but delete option will delete the collection or request from all the workspaces wherever it is present</strong></em>. Needless to say, you need permissions for this.</p>\n\n\n\n<h3><em><strong>Leaving a comment on the collections in Postman</strong></em></h3>\n\n\n\n<p>It is quite obvious that when we work in teams, our workspace faces a lot of edit. This can be anything from editing a simple request to editing one test in that request. Now, since you need to apprise everyone what you did, Postman brings you the comment feature. Through this feature you can leave comments in the collection so that everyone can know what you just uploaded in a chronological order.</p>\n\n\n\n<p>For this press the&nbsp;<em><strong>arrow button</strong></em>&nbsp;beside the collection name</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Options_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Options_Collection.png\" alt=\"Options_Collection\"/></a></figure>\n\n\n\n<p>Select&nbsp;<em><strong>View in Web</strong></em>&nbsp;from the options</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/View_In_Web.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_View_In_Web.png\" alt=\"View_In_Web\"/></a></figure>\n\n\n\n<p>This will open the collection in your browser. This can be seen by everyone working in the same workspace. Select&nbsp;<em><strong>comments</strong></em>&nbsp;on this page.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Comment_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Comment_Collection.png\" alt=\"Comment_Collection\"/></a></figure>\n\n\n\n<p>This will show you the popup to enter the comments.</p>\n\n\n\n<p>We will learn in the next section how to import collection in Postman.</p>\n\n\n\n<h3><em><strong>How to Import Collections in Postman</strong></em></h3>\n\n\n\n<p>If we can export our collection then needless to say it must be imported in some other Postman. So, like export we have another option import but that does not reside inside the meatball menu. The import collection is a part of header as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Import_Header.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Import_Header.png\" alt=\"Import_Header\"/></a></figure>\n\n\n\n<p>Importing a collection is easy in Postman. When you click on import you will see the import panel in front of you.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/import-panel-4.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_import-panel-4.png\" alt=\"import panel\"/></a></figure>\n\n\n\n<p>Here, as you can see there are different methods that can be used to import a collection. These methods are</p>\n\n\n\n<ul><li><em><strong>Importing through drag and drop method</strong></em></li><li><em><strong>Importing the folder</strong></em></li><li><em><strong>Importing through link</strong></em></li><li><em><strong>Pasting the raw text</strong></em></li></ul>\n\n\n\n<h4><em><strong>Importing through drag and drop</strong></em></h4>\n\n\n\n<p>Importing through drag and drop is pretty simple. It works the same as the upload feature in many websites such as Google Drive. If you have a collection file in you system just click on that file and drag it to this panel and release the mouse (or drop the file). This way the file/collection will be automatically uploaded in your Postman.</p>\n\n\n\n<h4><em><strong>Importing the folder</strong></em></h4>\n\n\n\n<p>Importing the folder is same as the previous option just the difference being, in the previous one we were uploading single collection but in this one we can upload multiple collections all at once. Just make a folder inside your system and paste or export many collections in it. When you import the same folder in your Postman, you will see all the Collections being uploaded. If you already have any of the collection from that folder, you will be asked to replace it or form a copy of it.</p>\n\n\n\n<h4><em><strong>Importing through link</strong></em></h4>\n\n\n\n<p>As we discussed in the previous tutorials, when we work in teams, we often use the Postman cloud or Team workspace which provide us the link to the collection so that everyone can use it without any problem. So importing through link is the same feature. We can provide link of the same collection in the box and the collection will be imported.</p>\n\n\n\n<h4><em><strong>Pasting the raw text</strong></em></h4>\n\n\n\n<p>In the above image, the first line in the panel tells us what files can be imported in Postman. There are many files apart from collection like curl or RAML etc. These files can be imported through raw text coding like in curl file. Although this feature is out of the scope of this course, therefore we won\u2019t be discussing it in detail.</p>\n\n\n\n<p>You might wonder about the collection runner which we introduced earlier which is used to run the collection requests all at once. We will talk about it after concluding \u201c<em><strong>Tests</strong></em>\u201d topic. It will make more sense in the next tutorial.</p>\n\n\n\n<h3><strong><em>Practice Exercise</em></strong></h3>\n\n\n\n<p>Since we have come so far in Postman, it would be better if you try out some scenarios yourself.</p>\n\n\n\n<ol><li>Create a collection named\u00a0<strong><em>PracticeExercises</em></strong></li><li>Create a folder inside the collection and name it\u00a0<strong><em>Post Requests</em></strong></li><li>Inside the folder save the request which was used in the last chapter (<strong><em>POST Request</em></strong>) only after getting correct response.</li><li>Save the collection inside your computer as a JSON file.</li></ol>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Collections in Postman Till now, we have learnt the\u00a0terminologies of Postman\u00a0in-depth and also have\u00a0made some\u00a0GET Requests. In the previous tutorials, we mentioned and briefly explained collections. Recall that\u00a0Collections\u00a0are a group of requests grouped into one folder. So that we can use them and share them easily. But in this tutorial, we will learn that a\u00a0Collection\u00a0is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5017"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5017"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5017/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5018,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5017/revisions/5018"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5017"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5017"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5017"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5019,
    "date": "2021-05-27T11:45:17",
    "date_gmt": "2021-05-27T11:45:17",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5019"
    },
    "modified": "2021-05-27T11:45:17",
    "modified_gmt": "2021-05-27T11:45:17",
    "slug": "collection-runner-and-writing-test-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/collection-runner-and-writing-test-in-postman/",
    "title": {
      "rendered": "Collection Runner and Writing Test in Postman"
    },
    "content": {
      "rendered": "\n<p>In the last tutorial, we learnt about how we can\u00a0<em><strong>save collections</strong></em>\u00a0and\u00a0<em><strong>send POST requests</strong></em>. The requests that we used in the previous tutorial had just a single request. In the real world, when we work we get a huge amount of different requests and responses. Using Postman tests helps in building up efficient requests and collections.\u00a0<em>For example, if we work as a centralized library for many other libraries at different locations, we need to keep track of every book everywhere. We need to have a list of every book in our system then how do we know if we have a particular book or not and at which library it is available?</em></p>\n\n\n\n<p>When we work in collections, we run many requests together, these can be as large as around 200 requests running simultaneously. How do we manage to see that every request run successfully? Or which one did not give a response? These all things we will learn in this tutorial. In this tutorial, we will focus on the two most important things in postman</p>\n\n\n\n<ul><li><em><strong>Test</strong></em></li><li><em><strong>Collection Runner</strong></em></li></ul>\n\n\n\n<h2>TEST in Postman</h2>\n\n\n\n<p>A&nbsp;<em><strong>TEST</strong>&nbsp;</em>in Postman is similar to the definition of the test in general. In Postman, we test our request for whatever we need to know about the request.&nbsp;<em>For example, if I need to know whether my request gave a status code of 201 or not</em>. This can be managed in Postman. Also, there is no bound on running the test in Postman on one request.&nbsp;<em><strong>One request can be passed through multiple tests and all of them can be seen simultaneously</strong></em>.</p>\n\n\n\n<p>There is one thing to remember though. A test does not run always.&nbsp;<em><strong>A test in Postman runs only when the request was successful</strong></em>. If there has been no response to the fact that your request was not correct, we cannot run tests through it. Also, you need to know that&nbsp;<em><strong>tests are written in Javascript in Postman</strong></em>. Although you don\u2019t need to be an expert but you should be slightly familiar with Javascript so that it helps. In this tutorial, we will try to explain everything so that you don\u2019t feel the need to know the Javascript and can write tests yourselves.</p>\n\n\n\n<p><em><strong>TEST in postman can be written in two ways namely</strong></em></p>\n\n\n\n<ul><li><strong><em>Javascript method</em></strong></li><li><strong><em>Functional method</em></strong></li></ul>\n\n\n\n<p>Both the methods are used in Postman to write test today and both the methods use javascript as the base language. JavaScript method is the older method whereas the functional method is the new method. Although the Postman does not indicate that the support will end for the older method, it recommends to use the functional one and as it says on the official website of Postman, \u201c<em><strong>Functional method is the more powerful method among the two</strong></em>\u201c. But since you need to know both, we will introduce you to the functional method.</p>\n\n\n\n<p>So now, we are good to perform our first test.</p>\n\n\n\n<h3><em><strong>How to set a Test in Postman with JavaScript Method?</strong></em></h3>\n\n\n\n<p>1. Use the API for creating the entry in customer register that we used in the\u00a0<em><strong>POST Request</strong></em>\u00a0tutorial (with body parameters), don\u2019t worry about the entry being created or not.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Customer_API_Example_POST.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Customer_API_Example_POST.png\" alt=\"Test in Postman\"/></a></figure>\n\n\n\n<p>2. Open the&nbsp;<em><strong>Tests</strong></em>&nbsp;tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Open_Tests_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Open_Tests_Tab.png\" alt=\"Test Tab In Postman\"/></a></figure>\n\n\n\n<p>3. Write the following Javascript code as written in below</p>\n\n\n\n<p><em>tests[\u201cStatus Code is 200\u201d] = responseCode.code === 200</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Test_Status_200.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Test_Status_200.png\" alt=\"Postman Test Status Code 200\"/></a></figure>\n\n\n\n<p>Now we will go through the above line to know the meaning.</p>\n\n\n\n<ul><li><em><strong>tests:&nbsp;</strong>The first word we see is \u201c<strong>tests\u201d,</strong>&nbsp;which is a variable of type array. This array can contain any data types like string and int or even Boolean values.</em></li><li><em><strong>Status Code is 200:&nbsp;</strong>Status code is 200 is just a name or a simple string. We define this name to know what was the test performed by us therefore this name should be meaningful. If I write tests[\u201cPassed\u201d], then I would not be able to know what kind of test has passed and this will also become more and more complicated if we run more than one tests, say 20 and one test fails. You could also write \u2018Status Code OK\u2019.</em></li><li><em><strong>responseCode.code: response code</strong>&nbsp;refers to the response status code that we have received in the response box. We can run multiple test in Postman on response code such as knowing whether status code has a string or not. The second is an object which is called to know the status code (not the complete information but just the code) of the test. Once we call the responseCode.code, first all the information of the status code is saved temporarily and then object is called to check the status code. If the status code is equal to 200, tests save the value&nbsp;<strong>True</strong>&nbsp;in it.</em></li></ul>\n\n\n\n<p>In the response box under the tests tab, those tests that have&nbsp;<em><strong>TRUE</strong></em>&nbsp;value shows&nbsp;<em><strong>PASS</strong></em>&nbsp;with the array name written or else&nbsp;<em><strong>FAIL</strong></em>&nbsp;is shown.</p>\n\n\n\n<p>4. Click on&nbsp;<em><strong>send</strong></em>&nbsp;and look at the&nbsp;<em><strong>test results</strong></em>&nbsp;tab in the response box.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Test_Tab_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Test_Tab_Response.png\" alt=\"Postman test results\"/></a></figure>\n\n\n\n<p>The result says that our test passed. This means that we were checking if we get 200 as status code and in this request, we got it.</p>\n\n\n\n<p>5. Save the request in&nbsp;<em><strong>MyFirstCollection</strong></em>&nbsp;inside&nbsp;<em><strong>Myfolder</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Save_Request_In_My_Folder.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Save_Request_In_My_Folder.png\" alt=\"Save_Request_In_My_Folder\"/></a></figure>\n\n\n\n<p>By this, you have executed your first Request with Test successfully.</p>\n\n\n\n<h3><em><strong>How to set&nbsp;</strong></em><em><strong>Multiple Tests for a Request&nbsp;</strong></em><em><strong>in Postman with JavaScript Method?</strong></em></h3>\n\n\n\n<p>As we learnt earlier, we can use multiple tests on a single request and all those tests are displayed in the response box simultaneously. We will perform multiple tests on the same request that we used above. Write the following code inside the text editor.</p>\n\n\n\n<p><em>tests[\u201cStatus Code is 200\u201d] = responseCode.code === 200;</em></p>\n\n\n\n<p><em>tests[\u201cBody contains Fault\u201d] = responseBody.has(\u201cToolsQA\u201d);</em></p>\n\n\n\n<p><em>tests[\u201cResponse time less than 500ms\u201d] = responseTime &lt;1500;</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Multiple_Tests-3.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Multiple_Tests-3.png\" alt=\"Multiple Test in Postman\"/></a></figure>\n\n\n\n<p><strong>NOTE</strong>:&nbsp;<em>The second test checks if there is a string&nbsp;<strong>ToolsQA</strong>&nbsp;in the body of the response and the third test checks if the response time is less than 500 ms or not.</em></p>\n\n\n\n<p>Now look at the response box in Postman, we have three tests written, out of which one failed which is the second one.&nbsp; Because our response body does not contain&nbsp;<em><strong>ToolsQA</strong></em>. This way we can perform many test in Postman simultaneously on one request.&nbsp;<em><strong>Remember to save the request.</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Multiple_Tests_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Multiple_Tests_Response.png\" alt=\"Multiple Test Response in Postman\"/></a></figure>\n\n\n\n<p>Our first test passed because we have a status code of 200 and our third test passed because our response time is 456 ms which is less than 500.&nbsp;<em><strong>Your response time may vary.</strong></em></p>\n\n\n\n<h3><em><strong>How to set&nbsp;</strong></em><em><strong>Test in Postman using&nbsp;</strong></em><em><strong>Functional Method</strong></em><em><strong>?</strong></em></h3>\n\n\n\n<p>A simple functional method of&nbsp;<em><strong>testing whether the status code is 200</strong></em>&nbsp;is written below</p>\n\n\n\n<p><em>pm.test(\u201cStatus code is 200\u201d, function () {</em><br><em>pm.response.to.have.status(200);</em><br><em>});</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/tests_functional_method.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_tests_functional_method.png\" alt=\"Function Method Test In Postman\"/></a></figure>\n\n\n\n<p>In the above image, the work is the same as we did in&nbsp;<em>JavaScript Test.&nbsp;</em>We are checking whether the status is 200 or not. We will look at the code above written test.</p>\n\n\n\n<ul><li><em><strong>pm.test</strong>&nbsp;: This is the function for writing test specifications,&nbsp;<strong>pm</strong>&nbsp;here refers to Postman api and&nbsp;<strong>test</strong>&nbsp;refers to the specification of the function which is testing purposes</em></li><li><em><strong>Status code is 200 :&nbsp;</strong>This line is just a string which is the test name. When your test is performed this String will be written in front of the result. It is same as was in JS to know what the test was about</em></li><li><em><strong>function(){} :&nbsp;</strong>The next parameter is the function which is passed to perform the test</em></li><li><em><strong>pm.response :&nbsp;</strong>This is used to capture the response received and perform assertions on it such as status code, headers etc. This is same as responseCode in JS format.</em></li></ul>\n\n\n\n<h3><em><strong>Snippets in Postman to add Quick Test</strong></em></h3>\n\n\n\n<p>Since there are many times that a test is used on different requests and there are many requests present in one collection there arise a need to write some predefined test code which is used again and again or most frequently. In Postman, this section is called snippets.&nbsp;<em><strong>Snippets are the predefined test code in Postman that are written beforehand to use without writing the whole code</strong></em>. Snippets save a lot of time and prevent errors that can happen while writing the code manually.</p>\n\n\n\n<p>Snippets are located just beside the test editor.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Snippets-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Snippets-1.png\" alt=\"Snippets For Test Code In Postman\"/></a></figure>\n\n\n\n<p>Click on&nbsp;<em><strong>Status Code: code is 200</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Snippets_Status_Code_200.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Snippets_Status_Code_200.png\" alt=\"Snippets Status Code 200 Test Postman\"/></a></figure>\n\n\n\n<p>Now, look at the editor</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/tests_functional_method-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_tests_functional_method-1.png\" alt=\"tests_functional_method\"/></a></figure>\n\n\n\n<p>This code is exactly the same as that we have written in a functional method to test the status code.</p>\n\n\n\n<p><em><strong>Note</strong></em>:&nbsp;<em>Since Postman prefers functional method, these snippets are available in functional methods only.</em></p>\n\n\n\n<p><em><strong>You can explore different snippets to better understand test codes of different assertions.</strong></em></p>\n\n\n\n<h2>Collection Runner in Postman</h2>\n\n\n\n<p>A&nbsp;<em><strong>collection runner in Postman</strong></em>&nbsp;as previously introduced is used for running a whole collection together. A collection runner runs all the requests in the collection or folder (whatever you choose) at once. Collection runner in Postman does not show any response, it is used to check the test cases whether they passed or not. A collection runner console shows all the tests at one location and their result. To run collection runner first make sure you have at least two requests in the folder&nbsp;<em><strong>MyFolder</strong></em>&nbsp;inside&nbsp;<em><strong>MyFirstCollection</strong></em>&nbsp;as shown.</p>\n\n\n\n<p>These two requests are the\u00a0<em><strong>weather api</strong></em>\u00a0(we used it in\u00a0<em><strong>GET Request</strong></em>\u00a0chapter)and\u00a0<em><strong>customer register api</strong></em>\u00a0(we used it in\u00a0<strong>POST Request</strong>\u00a0chapter). Remember the customer API is a Post request so it contains body parameters also.</p>\n\n\n\n<p><em><strong>NOTE</strong></em>:&nbsp;<em>In weather API we have used the snippet named&nbsp;<strong>Response Time is less than 200ms</strong>&nbsp;which is self-descriptive</em>.</p>\n\n\n\n<h3><em><strong>How to run Collection Runner in Postman?</strong></em></h3>\n\n\n\n<p>Now we will look at How to run multiple requests together in Postman using Collection Runner.</p>\n\n\n\n<p>1. Click on&nbsp;<em><strong>Runner</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Runner.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Runner.png\" alt=\"Runner\"/></a></figure>\n\n\n\n<p>2. Click on&nbsp;<em><strong>MyFirstCollection</strong></em>&nbsp;and then&nbsp;<em><strong>MyFolder</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Select_Collection_In_Runner2.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Select_Collection_In_Runner2.png\" alt=\"Select_Collection_In_Runner2\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: I hope you have saved the requests in your collection which is shown above.</em></p>\n\n\n\n<p>In the console you see two options:</p>\n\n\n\n<ul><li><strong><em>Iterations:&nbsp;</em></strong><em>An iteration number is the number of times the same requests will run.&nbsp;</em><em>For example, iteration set as 3 will run all the requests 3 times. Set it as 2.</em></li><li><strong><em>Delay:</em></strong><em>A delay time is a time to wait between any two iterations. A delay time of 10ms will mean that Postman will wait 10ms after running one iteration before the second iteration. Set it as 5ms.</em></li></ul>\n\n\n\n<p>3. Click on&nbsp;<em><strong>Run MyFolder</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Runner_Run_MyFolder-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Runner_Run_MyFolder-1.png\" alt=\"Runner_Run_MyFolder\"/></a></figure>\n\n\n\n<p>4. As you can see, all the tests with their results are available.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Runner_Console-2.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Runner_Console-2.png\" alt=\"Runner_Console\"/></a></figure>\n\n\n\n<ul><li><em>There are two iterations of each request. In the first iteration, I got the response time as 761ms which is greater than 500 ms but in the second iteration I got the response time as 392ms which is less, this caused one failure in that respective test.&nbsp;<strong>Your test result may vary.</strong></em></li><li><em>Since we did not perform any test on the weather API request, the console says&nbsp;<strong>The request does not have any test.&nbsp;</strong></em></li></ul>\n\n\n\n<p>Go on to perform multiple tests on weather API and then try to run them in collection runner.</p>\n\n\n\n<p>You can also choose the environment in which to run the requests but the environment should be valid against the request, so it should contain the same variables with the same values that are used in the requests. You can learn more about it in the\u00a0<em><strong>environment and variables</strong></em>\u00a0chapter.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Select_Environment_In_Runner.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Select_Environment_In_Runner.png\" alt=\"Select_Environment_In_Runner\"/></a></figure>\n\n\n\n<p>This way you can run all the requests saved in Postman in one collection or one folder. In the next chapter, we will learn about the environment and variables in Postman.</p>\n\n\n\n<h3><em><strong>Practice exercise</strong></em></h3>\n\n\n\n<ol><li><em>Create two tests for the\u00a0<strong>weather api</strong>.</em></li><li><em>One test in the JS method which will test if the method requested was POST or not.</em></li><li><em>Second test in the functional method which will check if the response body contains string INVALID in it.</em></li><li><em>Save the request in the Myfolder folder inside MyFirstCollection.</em></li><li><em>Run MyFolder in Collection Runner.</em></li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the last tutorial, we learnt about how we can\u00a0save collections\u00a0and\u00a0send POST requests. The requests that we used in the previous tutorial had just a single request. In the real world, when we work we get a huge amount of different requests and responses. Using Postman tests helps in building up efficient requests and collections.\u00a0For [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5019"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5019"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5019/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5020,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5019/revisions/5020"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5019"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5019"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5019"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5021,
    "date": "2021-05-27T11:46:40",
    "date_gmt": "2021-05-27T11:46:40",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5021"
    },
    "modified": "2021-05-27T11:46:40",
    "modified_gmt": "2021-05-27T11:46:40",
    "slug": "postman-api-and-collection-monitors",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/postman-api-and-collection-monitors/",
    "title": {
      "rendered": "Postman API and Collection Monitors"
    },
    "content": {
      "rendered": "\n<p>Monitors in Postman is an important feature. It enables you to run your Collections, a set of API tests, to run periodically through out the day. In short, Monitors allow you to schedule your Tests to runs automatically at defined intervals. Before starting with this tutorial I will request you to go back and read the basics of Collections here</p>\n\n\n\n<ul><li><strong><em>How to make a collection</em></strong></li><li><strong><em>Collection Runner</em></strong></li></ul>\n\n\n\n<h3><em><strong>What are Postman Monitors?</strong></em></h3>\n\n\n\n<p>Rest APIs forms the backbone of modern day distributed applications. It is very important that your API\u2019s responses and performance remain up to the mark through out the day. Monitors can help you schedule a&nbsp;<em><strong>Collection&nbsp;</strong></em>of test runs to monitor the&nbsp;<em><strong>Performance</strong>&nbsp;</em>and&nbsp;<em><strong>Response</strong></em>&nbsp;of your APIs. Monitors can be scheduled to run very frequently, like every 5 minutes, or can be scheduled to run at an interval of few hours throughout the day.</p>\n\n\n\n<h2>How to Monitor Collections in Postman?</h2>\n\n\n\n<p>1. Create a collection called&nbsp;<em><strong>Monitoring</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Collection_Monitoring.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Collection_Monitoring.png\" alt=\"Collection_Monitoring\"/></a></figure>\n\n\n\n<p>2. Enter the\u00a0<em><strong>weather api</strong></em>\u00a0requests in it (<em><strong>GET tutorial</strong></em>)</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitoring_Request.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitoring_Request.png\" alt=\"Monitoring_Request\"/></a></figure>\n\n\n\n<p><strong><em>Note</em></strong><em>: Remember we will be using local variable\u00a0<strong>url</strong>\u00a0in this request. You can recall it from\u00a0<strong>Environment and Variables</strong>\u00a0tutorials.</em></p>\n\n\n\n<p>3. Open the menu by clicking the&nbsp;<em><strong>arrow</strong></em>&nbsp;button</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Arrow_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Arrow_Collection.png\" alt=\"Arrow_Collection\"/></a></figure>\n\n\n\n<p>4. Take a look at the&nbsp;<em><strong>Monitor tab</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitor_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitor_Tab.png\" alt=\"Monitor_Tab\"/></a></figure>\n\n\n\n<p>5. If you have not signed in to postman, you have to do it now otherwise you won\u2019t be able to use Postman Monitor.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Sign_In_Monitor_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Sign_In_Monitor_Tab.png\" alt=\"Sign_In_Monitor_Tab\"/></a></figure>\n\n\n\n<p>Once you have signed in to Postman, we can create a&nbsp;<em><strong>Monitor</strong>&nbsp;</em>to run our&nbsp;<em><strong>Collection</strong></em>.</p>\n\n\n\n<p>6. Click on&nbsp;<em><strong>Add Monitor</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Add_Monitor.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Add_Monitor.png\" alt=\"Add_Monitor\"/></a></figure>\n\n\n\n<p><strong>Note</strong><em>: This option only opens after signing in</em></p>\n\n\n\n<p>7. You will see a popup as shown in the below image.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitor_Collection_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitor_Collection_Tab.png\" alt=\"Monitor_Collection_Tab\"/></a></figure>\n\n\n\n<p>This contains few options to enter such as</p>\n\n\n\n<ul><li><strong><em>Monitor Name:\u00a0</em></strong><em>Monitor name is quite straightforward. It is the name for your monitor. You can name it anything as we here named it\u00a0Monitoring Collection. You can apply many monitors to the same collection so it would be better if you apply meaningful names to know later what were you monitoring.</em></li><li><strong><em>Environment:\u00a0</em></strong><em>Environment field allows you to select the environment you want your tests to run. If you had earlier created an environment in Postman then you will find here in the drop down. Just select the one you want. If your scripts are hard coded with environment URLs then you may select\u00a0No Environment option. Postman monitoring does not allow using Global Environments. If you are using any then you might have to write it again in the local environment. For more details, you can visit\u00a0<strong>Environment and Variables</strong>\u00a0tutorial to learn more about it.</em></li><li><strong><em>Schedule:\u00a0</em></strong><em>Schedule option is\u00a0used for scheduling the intervals at which the monitor will run. Since monitors run in specific intervals, you have to set the value accordingly. The options are quite straightforward. You can set minute timer for minute intervals, hourly timers for hourly intervals and similarly there is weekly timer.</em></li><li><strong><em>Regions:\u00a0</em></strong><em>Region option is available in monitors to synchronize the timings according to the region. There are several options available for matching the time.</em>\u00a0<em>We will be using the US (East)\u00a0region (which is also the default region) just for simplicity. You should use the region according to your physical location for better testing and monitoring.</em></li></ul>\n\n\n\n<p>8. Press&nbsp;<em><strong>Monitor this collection</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Press_Monitor_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Press_Monitor_Collection.png\" alt=\"Press_Monitor_Collection\"/></a></figure>\n\n\n\n<p>9. The monitor will be visible to your monitor console once you press the button in the previous step.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitor_Collection_Available.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitor_Collection_Available.png\" alt=\"Monitor_Collection_Available\"/></a></figure>\n\n\n\n<p>10. Once you click the monitor, a new window will open in your browser which will redirect you to your account in Postman. A new console can be seen which looks like the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitor_Window_Postman-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitor_Window_Postman-1.png\" alt=\"Monitor_Window_Postman\"/></a></figure>\n\n\n\n<p>Now you can sit back and relax and let Postman do its work. You have successfully applied a monitor to one of your collection. Postman will run it according to the schedule you set.</p>\n\n\n\n<h2>Analyzing Monitor Results</h2>\n\n\n\n<p>After some time the monitor console will look something like this.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitor_Dashboard.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitor_Dashboard.png\" alt=\"How to Monitor Collections in Postman periodically?\"/></a></figure>\n\n\n\n<p>This is an API performance report.<em><strong>&nbsp;The green bars you see depicts that the tests have passed for the request</strong></em>. If you have a failed test the bar will turn into red. The tests need to have assertions in them so that we can catch any issues in the API. You can learn more about assertions here in&nbsp;<em><strong>Assertions tutorial</strong></em>.</p>\n\n\n\n<p>Monitors page can be viewed again by simply login in to postman in your web browser.</p>\n\n\n\n<p>You will see the Postman dashboard after logging in as shown in the image below. Click on the&nbsp;<em><strong>Monitors</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Dashboard.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Dashboard.png\" alt=\"Postman_Dashboard\"/></a></figure>\n\n\n\n<p>You will see all the monitors in the next window. Here we have only one so we see that one only.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Monitor_Dashboard_Web.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Monitor_Dashboard_Web.png\" alt=\"Monitor_Dashboard_Web\"/></a></figure>\n\n\n\n<p>Click on the&nbsp;<em><strong>monitors</strong></em>&nbsp;and the same bars will appear again. You can choose any bar that shows anything wrong to you to have a look at it.&nbsp;<em>For example let say we choose the bar corresponding to 12:55 AM</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Bar_Selection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Bar_Selection.png\" alt=\"Bar_Selection\"/></a></figure>\n\n\n\n<p>As soon as we click on the bar, the corresponding data appears just below it.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Bar_Result_Data.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Bar_Result_Data.png\" alt=\"Bar_Result_Data\"/></a></figure>\n\n\n\n<p>You can look at the data and&nbsp;<em><strong>see different requests, tests, and even error</strong></em>. This is similar to the collection runner console and has similar features. There is also another feature in the response data shown above. If you are more into debugging and looking for particular errors you can look at the console log also.</p>\n\n\n\n<p>Click on the&nbsp;<em><strong>console log</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Bar_Result_Data-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Bar_Result_Data-1.png\" alt=\"Bar_Result_Data\"/></a></figure>\n\n\n\n<p>This will show you the console where it has logged the errors and all the logs that were processed. This helps developers and debuggers to know what went wrong.&nbsp;<em><strong>Remember to delete the monitor when you done experimenting with it</strong></em>. With these features monitors is a better way to develop and test but it also comes with some disadvantages.</p>\n\n\n\n<h2>Disadvantages of Monitors</h2>\n\n\n\n<p>Since monitors comes with little disadvantages along with its features, it totally depends on you whether it is a problem for you or not. We will be discussing these in&nbsp;brief.</p>\n\n\n\n<h3><em><strong>Cannot be used in Postman network</strong></em></h3>\n\n\n\n<p><em><strong>Postman monitors do not work if the postman servers are in the same network as you are</strong></em>. Being in the same network there is a problem that since your network is working you will never be able to diagnose \u201c<em>how will your collection behave in another network</em>\u201c, therefore postman monitors are not allowed when located in the same network. But since this is a possible scenario Postman has a solution to that.</p>\n\n\n\n<p>If you are in the same network as Postman\u2019s then&nbsp;<em><strong>you need to buy the pro version of Postman</strong></em>. Once you have done that, postman will provide you with another ip through which monitors can be run.</p>\n\n\n\n<h3><em><strong>Cannot import global variables</strong></em></h3>\n\n\n\n<p>As discussed earlier while setting the monitor,&nbsp;<em><strong>global variables cannot be imported into the monitors</strong></em>. Once you are initializing the monitor, it needs only local variables if you are using any. If incase you have global variables, you need to copy them as local variables in a new environment.</p>\n\n\n\n<h3><em><strong>Monitor\u2019s API call limits</strong></em></h3>\n\n\n\n<p>You can initialize and run Postman monitor with your collection but monitor is designed to be a pro only feature in Postman. Free service is&nbsp; to make you familiar with monitors. If you are using the free service like we did in this tutorial,&nbsp;<em><strong>you will get only 1000 API calls per month</strong></em>&nbsp;and that includes every monitor\u2019s combined.</p>\n\n\n\n<p>You can anytime buy the Postman pro feature to enjoy unlimited API calls through monitors but this disadvantage is only a disadvantage according to you. If you are able to manage your tasks and work within the free version limit, it is well and good.</p>\n\n\n\n<p>So in this tutorial we got familiar with Postman monitors and learnt how to use them. We will move on the next tutorial now.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Monitors in Postman is an important feature. It enables you to run your Collections, a set of API tests, to run periodically through out the day. In short, Monitors allow you to schedule your Tests to runs automatically at defined intervals. Before starting with this tutorial I will request you to go back and read [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5021"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5021"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5021/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5022,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5021/revisions/5022"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5021"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5021"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5021"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5023,
    "date": "2021-05-27T11:47:40",
    "date_gmt": "2021-05-27T11:47:40",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5023"
    },
    "modified": "2021-05-27T11:47:40",
    "modified_gmt": "2021-05-27T11:47:40",
    "slug": "workflows-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/workflows-in-postman/",
    "title": {
      "rendered": "Workflows in Postman"
    },
    "content": {
      "rendered": "\n<p>Till now we have seen how to\u00a0<em><strong>run tests</strong></em>\u00a0on a request and how to run many requests with many tests simultaneously in\u00a0<em><strong>Collection runner</strong></em>. A collection runner is a very important feature in Postman and without it, it becomes very hard for a person to execute more than one request and perform different tests on them at once. But, if you noticed there is a pattern on how collection runner runs the requests. If you did not, we will do it in this tutorial and consider modifying it in detail. In this chapter we will focus on:</p>\n\n\n\n<ul><li><em><strong>Execution order of collection runner</strong></em></li><li><em><strong>What is Workflow and default workflow.</strong></em></li><li><em><strong>How to change the workflow</strong></em></li><li><em><strong>Infinite loops in workflow</strong></em></li><li><em><strong>Placement of setNextRequest in Postman</strong></em></li></ul>\n\n\n\n<h3><em><strong>Execution order of Collection Runner</strong></em></h3>\n\n\n\n<p>As we discussed above, collection runner runs the requests in a particular order. If you noticed earlier, it is a sequential order run.. We need a sequential run to test end to end api flow to check whether everything is correct or not. End to end testing is done to check the flow of an application from start to finish, just as it is designed to work.&nbsp;<em>Most of the user journeys are not simple one or two API calls. Usually a user has to go through a set of actions, in turn set of API calls, to complete the user journey</em>.&nbsp;<em>Taking an example of an ecommerce website, there will be a good number of steps that you have to take in order to purchase an item</em>.&nbsp;A generic flow can be outlined as:</p>\n\n\n\n<ul><li><em><strong>Logging into the website</strong></em></li><li><em><strong>Searching a product</strong></em></li><li><em><strong>Adding the product to cart</strong></em></li><li><em><strong>Checking out</strong></em></li><li><em><strong>Adding personal details such as address</strong></em></li><li><em><strong>Payment</strong></em></li></ul>\n\n\n\n<p>This is where collection runners come into picture and is a really useful tool. We can define sequence of steps (API calls) in the collection runner. Collection runner will run the calls in a sequential order thereby completing the user journey as it is defined in the business requirements.</p>\n\n\n\n<h2>Default workflow in Postman</h2>\n\n\n\n<p>The following short example will highlight the way Postman runs requests</p>\n\n\n\n<p>1.Make a new collection named\u00a0<em><strong>No Workflow\u00a0</strong>(<strong>How to create Collections in Postman</strong>)</em></p>\n\n\n\n<p>2.Enter three requests in it, the ones we have used till now in previous tutorials. Name them\u00a0<em><strong>Google Api</strong></em>,\u00a0<em><strong>Weather Api</strong></em>\u00a0and\u00a0<em><strong>Customer Api.</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/No_Workflow_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_No_Workflow_Collection.png\" alt=\"Workflows in Postman\"/></a></figure>\n\n\n\n<p><strong>NOTE</strong>:\u00a0<em>Remember how we used\u00a0<strong>Environment and Variables,</strong>\u00a0We are using\u00a0<strong>url</strong>\u00a0as a global variable here whose value is\u00a0<strong>http://restapi.demoqa.com.</strong>\u00a0.</em></p>\n\n\n\n<p>3.Run through runner (<strong><em>Collection Runner</em></strong>&nbsp;) and see the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/No_Workflow_Runner.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_No_Workflow_Runner.png\" alt=\"No_Workflow_Runner\"/></a></figure>\n\n\n\n<p><strong>NOTE</strong>: We have used the same tests for customer api as we did in\u00a0<em><strong>POST Chapter</strong></em>. You can use it or leave it but it would be good for your practice.</p>\n\n\n\n<p>It starts with the first request and then continues to second and then to third. It is running sequentially. But what if after some time there is no need for second request?&nbsp;<em>Let us say you have a collection with thirty meaningful requests. After some days, we found that request no. 16 needs to be run after request no. 19 otherwise we won\u2019t get correct results. Now, this creates a problem. You cannot move the requests up and down because there is a chance some other request might move in the process</em>. Moving requests up and down becomes a time consuming process.</p>\n\n\n\n<h3><em><strong>What is a workflow?</strong></em></h3>\n\n\n\n<p><em><strong>A workflow is a sequence of things In order to achieve a particular task</strong></em>. A workflow is a set of well defined steps that you have to take to complete a task.&nbsp;<em><strong>In postman workflow is the flow of requests in a defined sequence</strong></em>. The above problem we discussed has a predefined pattern that is running the requests sequentially.</p>\n\n\n\n<h2>How to change the workflow in Postman.</h2>\n\n\n\n<p>In postman it is very easy for you to arrange the running of request according to your needs. When you create multiple requests, the default workflow is sequential i.e. all the requests will run as you created them (considering you did not move any). Workflow can be changed easily in Postman. For this follow the following steps.</p>\n\n\n\n<p>1.Make a new Collection named&nbsp;<em><strong>With Workflow</strong></em></p>\n\n\n\n<p>2.Enter all the three requests in it that we mentioned above and in the same order as we mentioned.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/With_Workflow.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_With_Workflow.png\" alt=\"With_Workflow\"/></a></figure>\n\n\n\n<p><strong>NOTE</strong><em>: Instead of doing all the work again, try to\u00a0<strong>Duplicate</strong>\u00a0the collection\u00a0<strong>No Workflow</strong>\u00a0and\u00a0<strong>Rename</strong>\u00a0it to\u00a0<strong>With Workflow</strong>\u00a0(<strong>Collection Chapter</strong>)</em></p>\n\n\n\n<p>3.Go to&nbsp;<em><strong>Google Api</strong></em>&nbsp;request and enter the following in the tests tab</p>\n\n\n\n<p><em>postman.setNextRequest(\u201cCustomer Api\u201d)</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/SetNextRequest-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_SetNextRequest-1.png\" alt=\"SetNextRequest\"/></a></figure>\n\n\n\n<p>This is a self descriptive statement I believe. You are telling Postman to&nbsp;<em><strong>set next request</strong></em>. In the braces, you need to always write the name of the request.</p>\n\n\n\n<p><strong>NOTE</strong><em>: Name of the request should be exactly same as you have written while naming the request.&nbsp;<strong>They are case sensitive</strong></em>.</p>\n\n\n\n<p>4.Click on&nbsp;<em><strong>Runner</strong></em>&nbsp;and run the request</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/With_Workflow_Runner.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_With_Workflow_Runner.png\" alt=\"With_Workflow_Runner\"/></a></figure>\n\n\n\n<p>Notice the order in which requests are run now. This has changed the workflow of the collection and hence now we can run the collection in an order that we want.&nbsp;<em><strong>Observe that one request has not run this time which is weather api</strong></em>. This has happened because in Google Api we mentioned about the next request but what to run after customer api? We did not mention it so Postman tries to run it sequentially as without workflow but since customer api is our last request, it stops there.</p>\n\n\n\n<p>Workflows are of significant and powerful feature in Postman. It is a very appreciated feature among engineers who use Postman. While using it inside Postman, you will find it very handy when there is a need for change in the request. However, we need to take care while setting the next request in the tests tab.&nbsp;<em><strong>Sometimes, it may happen that you are stuck in infinite loop</strong></em>. To show this let us create an new Workflow, as mentioned in the next section</p>\n\n\n\n<h2>Infinite loops in Workflow</h2>\n\n\n\n<p>To learn about how sometimes we can get in an infinite loop just because of a simple mistake, we will take three search requests on google namely&nbsp;<em><strong>ToolsQA</strong></em>,&nbsp;<em><strong>Postman</strong></em>&nbsp;and&nbsp;<em><strong>Calculator</strong></em>&nbsp;which will search ToolsQA, Postman, Calculator respectively.</p>\n\n\n\n<p>1.Create a new Collection called&nbsp;<em><strong>Infinite Workflow</strong></em>&nbsp;and save the following three api requests in the collection we just created</p>\n\n\n\n<ul><li><em>https://www.google.co.in/search?q=toolsqa</em>&nbsp;and name it&nbsp;<em><strong>ToolsQA</strong></em></li><li><em>https://www.google.co.in/search?q=postman</em>&nbsp;and name it&nbsp;<em><strong>Postman</strong></em></li><li><em>https://www.google.co.in/search?q=calculator</em>&nbsp;and name it&nbsp;<em><strong>Calculator</strong></em></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Infinite_Workflow_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Infinite_Workflow_Collection.png\" alt=\"Infinite_Workflow_Collection\"/></a></figure>\n\n\n\n<p>2.Go to&nbsp;<em><strong>ToolsQA</strong></em>&nbsp;request and set the next request as&nbsp;<strong><em>Calculator</em></strong></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/ToolsQA_Script.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_ToolsQA_Script.png\" alt=\"ToolsQA_Script\"/></a></figure>\n\n\n\n<p>3.Go to&nbsp;<em><strong>Calculator</strong></em>&nbsp;and set the next request as&nbsp;<em><strong>Postman</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Calculator_Script.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Calculator_Script.png\" alt=\"Calculator_Script\"/></a></figure>\n\n\n\n<p>4. Go to&nbsp;<em><strong>Postman</strong></em>&nbsp;and set the next request as&nbsp;<em><strong>ToolsQA</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Script.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Script.png\" alt=\"Postman_Script\"/></a></figure>\n\n\n\n<p>5. Run the collection\u00a0<em><strong>Infinite Workflow</strong></em>\u00a0in the collection runner and see the Runner (<strong><em>How to run a collection in Collection Runner</em></strong>)</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Infinite_Loop_Runner-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Infinite_Loop_Runner-1.png\" alt=\"Infinite_Loop_Runner\"/></a></figure>\n\n\n\n<p><em><strong>It is now running in an infinite loop</strong></em>. Go on and observe the tests tab of each request and see where we set the loop to run infinitely.</p>\n\n\n\n<p>Although if you are stuck here, then definitely something is wrong with your workflow. There is no point in looking at the runner as it will run forever and ultimately hangs. It is always better to stop the runner to save memory and other resources such as server load. The runner can be stop by just clicking the stop button</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Stop_Runner.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Stop_Runner.png\" alt=\"Stop_Runner\"/></a></figure>\n\n\n\n<h3><em><strong>Placement of setNextRequest</strong></em></h3>\n\n\n\n<p>You might be wondering what if there is a lot of test code? Where should you put the setNextRequest to run it successfully?&nbsp;<em><strong>Placement</strong><strong>&nbsp;of setNextRequest is not important while writing it in tests</strong></em>. You can write it anywhere you like and it will still run. It is just a method of saying to the Postman that once you are done with all the test and other stuff, when you are leaving this request you have to run this request. It doesn\u2019t matter where you put it since it acts just like a command.</p>\n\n\n\n<p>So let us conclude this tutorial here. We hope till now you must have learned a lot about Postman and how amazing it is. We will now move on to the next tutorial and remember, always keep practicing.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Till now we have seen how to\u00a0run tests\u00a0on a request and how to run many requests with many tests simultaneously in\u00a0Collection runner. A collection runner is a very important feature in Postman and without it, it becomes very hard for a person to execute more than one request and perform different tests on them at [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5023"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5023"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5023/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5024,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5023/revisions/5024"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5023"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5023"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5023"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5025,
    "date": "2021-05-27T11:49:59",
    "date_gmt": "2021-05-27T11:49:59",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5025"
    },
    "modified": "2021-05-27T11:49:59",
    "modified_gmt": "2021-05-27T11:49:59",
    "slug": "pre-request-script-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/pre-request-script-in-postman/",
    "title": {
      "rendered": "Pre-Request Script in Postman"
    },
    "content": {
      "rendered": "\n<p>In the earlier tutorials, we introduced&nbsp;<em><strong>tests</strong></em>&nbsp;and how to run them using a Runner. We learnt that a test runs only after the request is successful and we receive a response in return. However, there are many things that we might have to run before receiving the response. These are called as&nbsp;<em><strong>pre-request script in Postman</strong></em>. The following things will be introduced to you in this tutorial</p>\n\n\n\n<ul><li><em><strong>Scripts in Postman</strong></em></li><li><em><strong>Postman Sandbox</strong></em></li><li><em><strong>Postman Console</strong></em></li><li><em><strong>Creating variables through scripts</strong></em></li></ul>\n\n\n\n<p>Before learning about the pre-request scripts in Postman, we will quickly see scripts.</p>\n\n\n\n<h3><strong><em>What are Scripts In Postman?</em></strong></h3>\n\n\n\n<p>Scripts are a piece of code that you can write and let Postman execute it at specific points in your test Lifecycle.&nbsp;Postman lets you write&nbsp;<strong><em>pre-requests scripts</em></strong>, which will run before Request and&nbsp;<em><strong>tests scripts,&nbsp;</strong></em>which will run after&nbsp;<em><strong>Response</strong></em>. Scripts are used in Postman to enable dynamic behaviour to request and collections. It allows you to&nbsp;<em><strong>write tests</strong></em>,&nbsp;<em><strong>change parameters</strong>&nbsp;</em>and even&nbsp;<em><strong>pass data</strong>&nbsp;</em>between the requests. A script can be added to the&nbsp;<em><strong>request</strong></em>,&nbsp;<em><strong>collection</strong></em>,&nbsp;<em><strong>folder</strong>&nbsp;</em>or an&nbsp;<em><strong>independent request</strong></em>. Scripts in Postman are written in&nbsp;<em><strong>Postman Sandbox</strong></em>.</p>\n\n\n\n<h3>&nbsp;<a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Scripts_diagram.png\"></a></h3>\n\n\n\n<h3><em><strong>What is Postman Sandbox?</strong></em></h3>\n\n\n\n<p><em><strong>Postman Sandbox is a powerful execution environment written in Javascript</strong></em>, so any script you write to be run in Postman must be in Javascript like tests that we run in the\u00a0<em><strong>tests tutorial</strong></em>.These scripts are then executed in this environment and we see the result thereafter. I hope you must have used a compiler at some point in your life. You need to code in the same language to which the compiler is designed\u00a0<em>like Turbo C, you can write and run a C code in Turbo C compiler but not a python code</em>. Same is the case with the sandbox, that is why you need to write in JavaScript.</p>\n\n\n\n<h2>What is Postman Console?</h2>\n\n\n\n<p>As stated in the official Postman blog, \u201d&nbsp;<em><strong>Postman Console is analogous to a browser\u2019s version of the Developer Console, except that it\u2019s tuned for API development</strong></em>.\u201d There are certain times that we might not be able to see where the problem is in the execution of pre-request script in Postman. Postman console notes down everything that happens in the request and hence we can look at the console and see the error. The below image can be referred to have a look at a typical Postman console used for many requests.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Console_Example-2.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Console_Example-2.png\" alt=\"Postman_Console_Example\"/></a></figure>\n\n\n\n<p>Although Postman console can be opened by the shortcut commands that are described below, Postman also has a dedicated icon just for opening Postman console. This icon is located in the\u00a0<em><strong>Sidebar</strong></em>\u00a0(<em><strong>Postman Navigation</strong></em>\u00a0)</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Console_Icon.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Console_Icon.png\" alt=\"Postman_Console_Icon\"/></a></figure>\n\n\n\n<p>It behaves analogously to a browsers development console where everything is visible, all the requests that you have sent in that website or the code of the page too. If we need to catch an error or see how far our execution was right we use&nbsp;<em><strong>console.log</strong></em>&nbsp;feature. By this we can print on the console-specific log statement, this can help us track the execution and find issues in our code. This simple example will help you understand the concept.</p>\n\n\n\n<h3><em><strong>How to see pre-request script logs in Postman console</strong></em></h3>\n\n\n\n<p>1.Create a new collection called\u00a0<em><strong>Scripts (See\u00a0Collection\u00a0Chapter)</strong></em></p>\n\n\n\n<p>2. Write the\u00a0<em><strong>weather api</strong></em>\u00a0request in it.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Scripts_Collection.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Scripts_Collection.png\" alt=\"Scripts_Collection\"/></a></figure>\n\n\n\n<p>3.Open&nbsp;<em><strong>Postman Console&nbsp;</strong></em>by pressing<em><strong>&nbsp;Ctrl+Alt+C on Windows (Cmd + Alt+ C on mac).</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Console.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Console.png\" alt=\"Postman_Console\"/></a></figure>\n\n\n\n<p><strong><em>Note</em></strong>: Always remember to open the console first before sending the request, or else your requests won\u2019t be logged in the console.</p>\n\n\n\n<p>4..Press&nbsp;<em><strong>Send&nbsp;</strong></em>and see what is visible on the Postman console.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Console_Log.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Console_Log.png\" alt=\"Postman_Console_Log\"/></a></figure>\n\n\n\n<p>As can be seen, the request is logged into the console. Logging into the console is done by Postman automatically but you can also do it on your own if you want to check your code. As discussed above&nbsp;<em><strong>console.log</strong></em>&nbsp;feature is used for this purpose. When we do&nbsp;<em><strong>console.log(string)</strong></em>, the string is printed as it is on the console.&nbsp;<em><strong>We can also pass variable instead of string</strong></em>. This helps a lot.&nbsp;<em>Let say we have a function which does not give correct output to us. If we write console.log(variable_name) in the console, we can easily see if the variable we are dealing with is having the same value as we intend or not.</em>&nbsp;In the next section we will be using&nbsp;<em><strong>console.log</strong></em>&nbsp;which will clear any doubts.</p>\n\n\n\n<h2>What are Pre Requests scripts in Postman?</h2>\n\n\n\n<p>As stated above,&nbsp;<em><strong>a pre-request script in Postman is a script that runs before the execution of request</strong></em>. It runs in Postman sandbox and comes very handy when we have to do something dynamically while the execution is in the process. These can be setting the variables or clearing them as we will see later in the tutorial.&nbsp;A pre-request script in Postman can be run on a folder, a request or a collection but if we have specified scripts in all the three, there exists an order in which the script is executed</p>\n\n\n\n<ul><li><strong><em>A pre-request script associated with a collection will run prior to every request in the collection.</em></strong></li><li><strong><em>A pre-request script associated with a folder will run prior to every request in the folder.</em></strong></li></ul>\n\n\n\n<p>To demonstrate using Postman that pre-requests scripts run before the execution and tests scripts run after it, we will look at a very simple example here.</p>\n\n\n\n<p>1. Go to the&nbsp;<em><strong>Pre-Requests</strong></em>&nbsp;Tab in the weather api in the same collection that we created above.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Pre_Request_Script_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Pre_Request_Script_Tab.png\" alt=\"Pre_Request_Script_Tab\"/></a></figure>\n\n\n\n<p>2.Write&nbsp;<em>console.log (\u201cThis is a pre request script\u201d);</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Pre_Request_Script_Console_Log.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Pre_Request_Script_Console_Log.png\" alt=\"Pre-Request Script in Postman\"/></a></figure>\n\n\n\n<p>3.Go to the&nbsp;<em><strong>Tests</strong></em>&nbsp;tab and write</p>\n\n\n\n<p><em>console.log(\u201cThis is a tests script\u201d);</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Tests_Tab_Console_Log.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Tests_Tab_Console_Log.png\" alt=\"Tests_Tab_Console_Log\"/></a></figure>\n\n\n\n<p>4.Press&nbsp;<em><strong>Send</strong></em>&nbsp;and open the&nbsp;<em><strong>Postman Console</strong></em>&nbsp;and have a look.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Console_Scripts_Testing.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Console_Scripts_Testing.png\" alt=\"Console_Scripts_Testing\"/></a></figure>\n\n\n\n<p><em>The pre-request script has run before the execution of the request while the test script has run after the reque</em><em>st</em>.</p>\n\n\n\n<h3><em><strong>Creating Variables using Pre-Request Script in Postman</strong></em></h3>\n\n\n\n<p>We use pre-request scripts in Postman for all the things we need to do before the execution of the request such as setting variables, clearing the variables or getting the values etc. In this tutorial, we will try to set the environment variable in the environment\u00a0<em><strong>Weather Api</strong></em>\u00a0that we created and used while learning about\u00a0<em><strong>environments</strong></em>.</p>\n\n\n\n<p>1.Go to the&nbsp;<em><strong>Pre-Request Script</strong></em>&nbsp;Tab inside the&nbsp;<em><strong>weather api</strong></em>&nbsp;request.</p>\n\n\n\n<p>2.Confirm that you have\u00a0<em><strong>Weather Api</strong></em>\u00a0environment selected (Learn from\u00a0<strong><em>Environment and Variables</em></strong>\u00a0chapter).</p>\n\n\n\n<p>3.Write the following code inside the editor<br><em>postman.setEnvironmentVariable(\u2018username\u2019,\u2019Harish\u2019);</em></p>\n\n\n\n<p><em>This will create a variable inside the environment with the name \u201cusername\u201d and value \u201cHarish\u201d</em>.</p>\n\n\n\n<p>4.Press\u00a0<em><strong>Send</strong></em>\u00a0and look at the current variable by clicking the\u00a0<em><strong>eye</strong></em>\u00a0icon (Learn about in\u00a0<em><strong>Environment and Variable</strong></em>\u00a0chapter)</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/New_Variable_Created.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_New_Variable_Created.png\" alt=\"New_Variable_Created\"/></a></figure>\n\n\n\n<p>Look at the variables, we have the variable&nbsp;<em><strong>username</strong></em>&nbsp;present in the environment that we created through the script.</p>\n\n\n\n<p>This way we can perform various tasks in the pre-request script in Postman before the execution of script without going through the process of creating and deleting variables again and again. There are many other tasks to perform in the pre-requests script that you will find inside the practice section. We will move on to the next chapter from here.</p>\n\n\n\n<h3><em><strong>Practice Exercise</strong></em></h3>\n\n\n\n<ul><li>Use the following code to set a global variable</li></ul>\n\n\n\n<p><em>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; postman.setGlobalVariable(variableName, variableValue);</em></p>\n\n\n\n<ul><li>Use the following syntax to get the value of environment variable</li></ul>\n\n\n\n<p><em>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;postman.getEnvironmentVariable(variableName);</em></p>\n\n\n\n<ul><li>Use the following code syntax to clear the global variables</li></ul>\n\n\n\n<p><em>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;postman.clearGlobalVariable(variableName);</em></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the earlier tutorials, we introduced&nbsp;tests&nbsp;and how to run them using a Runner. We learnt that a test runs only after the request is successful and we receive a response in return. However, there are many things that we might have to run before receiving the response. These are called as&nbsp;pre-request script in Postman. The [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5025"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5025"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5025/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5026,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5025/revisions/5026"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5025"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5025"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5025"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5027,
    "date": "2021-05-27T11:51:15",
    "date_gmt": "2021-05-27T11:51:15",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5027"
    },
    "modified": "2021-05-27T11:53:45",
    "modified_gmt": "2021-05-27T11:53:45",
    "slug": "assertions-in-postman-with-chai-assertion-library",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/assertions-in-postman-with-chai-assertion-library/",
    "title": {
      "rendered": "Assertions in Postman with Chai Assertion Library"
    },
    "content": {
      "rendered": "\n<p>In the previous tutorial we have learnt about setting up tests against a API Endpoint in the\u00a0<em><strong>Test and Collection</strong></em>\u00a0chapter, there is a lot more to tests than just plain snippets or simple\u00a0<em><strong>JavaScript</strong></em>.\u00a0<em><strong>Assertions</strong>\u00a0</em>in programming language is a statement written such that it verifies whether the given predicate is true or false. A predicate is an expression which gives only\u00a0<em><strong>boolean</strong>\u00a0</em>expression as the output viz. true or false. So in this tutorial taking assertions further we will learn about</p>\n\n\n\n<ul><li><em><strong>Why to use Assertions?</strong></em></li><li><em><strong>Chai Assertion Library</strong></em></li><li><em><strong>How to write Assertions in Postman with Chai Assertion Library?</strong></em></li></ul>\n\n\n\n<h3><strong><em>Why to use Assertions?</em></strong></h3>\n\n\n\n<p>The sole purpose of a test is to identify that for a situation given parameters of the system are as expected. To force that the parameters of the system are correct we assert the expected values with the actual values during a test run. Assertions are used to assert that expected and actual values during a test run match. If they don\u2019t match, the test fails with the output pointing directly to the failure.</p>\n\n\n\n<p>An assertion improves your test writing skills to a greater level.\u00a0Postman provides JavaScript support to write tests which works under Postman Sandbox. As we learnt in the tutorial\u00a0<strong><em>Set up Postman Tests,</em></strong>\u00a0it is hard to write assertions or Functional methods in JavaS. In this tutorial we will learn how to write assertions using an external JavaScript library called<em><strong>\u00a0Chai \u2013 Assertion Library.\u00a0</strong></em>The assertions that we will be writing with this assertion library takes lot less effort compared to what we write directly in Javascript. The following image shows the difference with a very basic example.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Javascript-Code.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Javascript-Code.jpg\" alt=\"Javascript Code\"/></a></figure>\n\n\n\n<p><strong><em>The above image contains a code where we are checking if a is equal to b or not</em></strong>. The same can be written with chai assertion library in the following manner.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_Expect_100_101-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_Expect_100_101-1.png\" alt=\"Assertion_Expect_100_101\"/></a></figure>\n\n\n\n<p>Isn\u2019t it so concise and easily readable? Think about the complex problems that we can easily write through this library.</p>\n\n\n\n<p>An assertion is very useful in finding defects in the code as you can write an assertion just like a test, although they both are different. A test&nbsp;performs all the steps to reach to a particular state of the application and an assertion can validate the state of the application at that point. An assertion is very useful in finding defects in the application code. If you add assertions in the test, the test will fail once the assertions fails.&nbsp;But defining a more complex test in a mere easy way such as finding an element in an array will take just 2 lines of codes in assertion while it will take at least 5-10 lines in&nbsp;<em><strong>JavaScript</strong></em>&nbsp;tests.&nbsp;Reading a code also becomes very easy when we write assertions rather than writing the same thing in tests.</p>\n\n\n\n<p>While writing assertions in Postman, there are two main steps involved:</p>\n\n\n\n<ul><li><em><strong>Parse the response body:\u00a0</strong>It is important to know what kind of response you are getting to perform a test on it. The most popular response is\u00a0<strong>JSON,</strong>\u00a0simply because it is very easy to read by humans and is machine readable also. It might happen that most of you might not even have to deal with any other responsebut that does not kill the fact that the response can be any format.\u00a0There are many other formats of an HTTP response:</em><ul><li><em><strong>XML</strong></em></li><li><em><strong>HTML</strong></em></li><li><em><strong>Text</strong></em></li></ul></li><li><em><strong>Write test code:\u00a0</strong>Since we have already discussed about writing the tests in the\u00a0<strong>test and collection runner</strong>\u00a0tutorial we will not be covering it here. But, there we studied about the test writing in Javascript method or functional method. While we have to write only in Javascript because of the Postman Sandbox, there exist one library which makes it easier for us to write a test which would have taken more lines of code if written in Javascript. This library is Chai Assertion Library which we will talk about now.</em></li></ul>\n\n\n\n<p>But the assertion part is not confined to Chai Assertion Library. Chai Assertion is just a part of many assertions that Postman provide and also the only one being external to Postman. All the other Assertions works under Postman Sandbox which is of course Postman\u2019s. Taking the difficulty level in mind, chai assertion library is fairly easier than the other assertions and therefore in this tutorial we will be learning about the same. This tutorial will help you get familiar with the concept of Assertions so that in the next tutorial we can execute some difficult assertions.</p>\n\n\n\n<h2>Chai Assertion Library</h2>\n\n\n\n<p><em><strong>Chai assertion Library is included by Postman by default in its application</strong></em>, so when you are writing chai assertions you don\u2019t have to worry about any other installation processes. The most amazing fact about assertions in Postman is that they write human readable tests. Tests written in assertions are so human readable that you might find it as a english sentence. All this makes your tests more easy to read and more friendly for humans. Although we are not needed to write very complex chai assertions as that are not required but we will cover the most common and frequently required assertions in Postman which will make your way complete while using this software.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/chai-logo.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_chai-logo.png\" alt=\"Assertions in Postman with Chai Assertion Library\"/></a></figure>\n\n\n\n<p>Although , if you want to learn more about Chai Assertion Library you can visit this\u00a0<strong><em>link</em></strong>. In the next section we will learn about some assertions.</p>\n\n\n\n<h3><strong><em>How to write Assertions in Postman using Chai Assertion Library?</em></strong></h3>\n\n\n\n<p>If you have visited the above link, you would have found out that there are numerous assertions available in Chai library. We will be using some of them in the later section but in the this section of Assertion, we will make you understand the concept and assertions.</p>\n\n\n\n<p><em><strong>Assertion: Number is in array or not</strong></em></p>\n\n\n\n<p>1.Open the\u00a0<em><strong>weather api</strong></em>\u00a0in Postman</p>\n\n\n\n<p>2.Write the following code in the tests tab</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cNumber included\u201d, function(){\r\npm.expect(&#91;1,2,3]).to.include(3);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_Include_Number.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_Include_Number.jpg\" alt=\"Assertion_Include_Number\"/></a></figure>\n\n\n\n<p>Press&nbsp;<em><strong>enter&nbsp;</strong></em>and you will see the obvious response.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_Include_Number_Response.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_Include_Number_Response.jpg\" alt=\"Assertion_Include_Number_Response\"/></a></figure>\n\n\n\n<p><em><strong>Yes we see the number is included because 1,2,3 has 3. It is obvious.</strong></em></p>\n\n\n\n<p><em><strong>Assert: An array to be empty</strong></em></p>\n\n\n\n<p>1.Write the following code in the tests tab of weather api (or any api of your choice)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cEmpty Array\u201d, function(){\r\npm.expect(&#91;2]).to.be.an(\u2018array\u2019).that.is.empty;\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Expect_Array_To_Be_Empty.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Expect_Array_To_Be_Empty.png\" alt=\"Expect_Array_To_Be_Empty\"/></a></figure>\n\n\n\n<p>Guess the response before pressing&nbsp;<em><strong>enter</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Expect_Array_To_Be_Empty_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Expect_Array_To_Be_Empty_Response.png\" alt=\"Expect_Array_To_Be_Empty_Response\"/></a></figure>\n\n\n\n<p>Okay. So you must have got pretty familiar now with the Chai Assertion Library. We will now show you one more assertion to conclude this tutorial.</p>\n\n\n\n<p><em><strong>Assertion: Verify objects</strong></em></p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cTest Name\u201d, function(){\r\n\r\nlet a= {\r\n\r\n\u201cname\u201d : \u201cHarish\u201d\r\n\r\n};\r\n\r\nlet b= {\r\n\r\n\u201cname\u201d  : \u201cHarish\u201d\r\n\r\n};\r\n\r\npm.expect(a).to.eql(b);\r\n\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_variable-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_variable-1.png\" alt=\"Assertion_variable\"/></a></figure>\n\n\n\n<p>Press&nbsp;<em><strong>send</strong></em>&nbsp;and see the results.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_variable_Response-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_variable_Response-1.png\" alt=\"Assertion_variable_Response\"/></a></figure>\n\n\n\n<p>It passes because the names are equal. But you might be wondering about equal and eql that we used above. Before clearing the air, let see the response for the same&nbsp;<em><strong>but with equal</strong></em>.</p>\n\n\n\n<p>Write the same code as above and&nbsp;<em><strong>replacing eql with equal</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_variable_equal.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_variable_equal.png\" alt=\"Assertion_variable_equal\"/></a></figure>\n\n\n\n<p>Did you get the same response as in eql?</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Assertion_variable_equal_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Assertion_variable_equal_Response.png\" alt=\"Assertion_variable_equal_Response\"/></a></figure>\n\n\n\n<p>Although we are having the same code,&nbsp;<em><strong>eql and equal produces different responses</strong></em>. When we use&nbsp;<em><strong>equal</strong></em>&nbsp;we compare the objects created, which are different here i.e. a and b. While using&nbsp;<em><strong>eql</strong></em>&nbsp;we compare the properties of the objects, in this case name. As the two names are same the comparison passes.&nbsp;<em><strong>equal uses the === operator which is called Strict equality. While eql is Deep equality which compares the individual properties of the object.</strong></em></p>\n\n\n\n<p>Try editing the last line of the above code and write&nbsp;<em>pm.expect(a).to.equal(a);</em>&nbsp;and see what you get as a response.</p>\n\n\n\n<p>So here we would like to conclude the topic of Chai Assertion Library. Practice more and more on the Chai Library Website. We will move on to our next tutorial now bout writing assertions executing under Postman Sandbox.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous tutorial we have learnt about setting up tests against a API Endpoint in the\u00a0Test and Collection\u00a0chapter, there is a lot more to tests than just plain snippets or simple\u00a0JavaScript.\u00a0Assertions\u00a0in programming language is a statement written such that it verifies whether the given predicate is true or false. A predicate is an expression [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5027"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5027"
        }
      ],
      "version-history": [
        {
          "count": 3,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5027/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5030,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5027/revisions/5030"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5027"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5027"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5027"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5033,
    "date": "2021-05-27T12:06:17",
    "date_gmt": "2021-05-27T12:06:17",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5033"
    },
    "modified": "2021-05-27T12:06:17",
    "modified_gmt": "2021-05-27T12:06:17",
    "slug": "different-types-of-asserts-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/different-types-of-asserts-in-postman/",
    "title": {
      "rendered": "Different types of Asserts in Postman"
    },
    "content": {
      "rendered": "\n<p>In the previous tutorial of\u00a0<em><strong>Chai Assertion Library</strong></em>\u00a0 we covered Postman Assertions using\u00a0<em><strong>expect\u00a0</strong></em>keyword.\u00a0Also there are many other assertions in Postman which works around\u00a0<em><strong>Postman Sandbox\u00a0</strong></em>which we covered in<em><strong>pre-request scripts</strong></em>\u00a0in Postman. In this tutorial we will talk about some common\u00a0<em><strong>Different types of Asserts in Postman.</strong></em></p>\n\n\n\n<p>In this tutorial we will be focusing on the response part because it is extremely important as we almost all the time need to assert on the response. So we will apply assertions on:</p>\n\n\n\n<ul><li><strong><em>Response time</em></strong></li><li><strong><em>Status Code</em></strong></li><li><strong><em>Status code meaning</em></strong></li><li><strong><em>Response Type</em></strong></li><li><strong><em>Response header</em></strong></li><li><strong><em>Post method check</em></strong></li><li><strong><em>String in Response</em></strong></li></ul>\n\n\n\n<h2>Different types of Asserts in Postman</h2>\n\n\n\n<p>For instance we can think of sending a request and checking all the above stated things on the same. In the end of this tutorial, you can also add all the assertions in one single request to practice and improve your skills. So, we will start now.</p>\n\n\n\n<p><em><strong>Prerequisite:</strong></em></p>\n\n\n\n<ul><li><em><strong>POST method API EndPoint:\u00a0</strong>We are using\u00a0<strong>Customer Register</strong>\u00a0API</em></li></ul>\n\n\n\n<h3><strong><em>Assert on Response Time</em></strong></h3>\n\n\n\n<p>This assert helps us to verify the&nbsp;<em><strong>Response Time of the Request</strong></em>. Below we are verifying that if the Response Time is less than 100ms. Go to the&nbsp;<strong><em>Tests</em></strong>&nbsp;tab and write the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cResponse time is less than 100ms\u201d, function () {\r\n     pm.expect(pm.response.responseTime).to.be.below(100);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_Code_Chai-1.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_Code_Chai-1.jpg\" alt=\"Response_Code_Chai\"/></a></figure>\n\n\n\n<p><strong>NOTE:</strong><em>&nbsp;This assertion can also be modified to check the time to be above a certain value&nbsp;<strong>(to.be.above(value))</strong>&nbsp;and equal to a certain value&nbsp;<strong>(to.be.equal(value))</strong>.</em></p>\n\n\n\n<p>Press&nbsp;<strong><em>Send</em></strong>&nbsp;and see the response.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_Code_Chai_Response-1.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_Code_Chai_Response-1.jpg\" alt=\"Response_Code_Chai_Response\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: In the above case, Assert got failed, as the response time was 1121ms. Also, the same is visible clearly in the response box as&nbsp;<strong>AssertionError: expected 1121 to be below 100</strong>&nbsp;which is false obviously.</em></p>\n\n\n\n<h3><strong><em>Assert on Response Status Code</em></strong></h3>\n\n\n\n<p>This assertion is based on checking the<strong>&nbsp;<em>R</em></strong><em><strong>esponse Status Code</strong></em>. In the below test,&nbsp; we are verifying that if the Response Status Code is 200.&nbsp;Test will&nbsp;<em>PASS</em>&nbsp;in case of Status Code 200, else it will&nbsp;<em>FAIL</em>&nbsp;in case of any Status Code other than 200.&nbsp;Write the following code in the&nbsp;<em><strong>T</strong><strong>ests</strong></em>&nbsp;tab:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cStatus code is 200\u201d, function () {\r\n     pm.response.to.have.status(200);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Status_Code_200_Chai-3.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Status_Code_200_Chai-3.jpg\" alt=\"Status_Code_200_Chai\"/></a></figure>\n\n\n\n<p>You can place any status code inside the value box to check the value of the status. The same can also be expressed in Chai Assertion Library as</p>\n\n\n\n<p><em><strong>For checking status being OK</strong></em></p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cStatus is OK\u201d, function () {\r\n     pm.response.to.be.ok;\r\n});</code></pre>\n\n\n\n<p><em><strong>For checking status being BAD REQUEST</strong></em></p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cStatus is Bad Request\u201d, function () {\r\n     pm.response.to.be.badRequest;\r\n});</code></pre>\n\n\n\n<p>Press&nbsp;<strong><em>send</em></strong>&nbsp;and see the response which is true in my case.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Status_Code_200_Chai_Response-1.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Status_Code_200_Chai_Response-1.jpg\" alt=\"Status_Code_200_Chai_Response\"/></a></figure>\n\n\n\n<p>We got the response status code to be 200 and hence our assertion has passed.</p>\n\n\n\n<h3><strong><em>Assert on Response Status Code Meaning</em></strong></h3>\n\n\n\n<p>This assertion is based on checking a&nbsp;<em><strong>specific property</strong></em>. In this assertion we will check a specific property and its value. In the example given below we are checking the property&nbsp;<em><strong>status</strong></em>&nbsp;and its value being&nbsp;<em><strong>OK</strong></em>.</p>\n\n\n\n<p>Write the following code inside&nbsp;<em><strong>Tests</strong></em>&nbsp;tab.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cStatus is OK\u201d, function(){\r\n     pm.response.to.have.property(\u2018status\u2019, \u2018OK\u2019);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Status_Code_OK_Chai-2.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Status_Code_OK_Chai-2.jpg\" alt=\"Status_Code_OK_Chai\"/></a></figure>\n\n\n\n<p>Press&nbsp;<strong><em>Send</em></strong>&nbsp;and see the result which will be true in my case.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Status_Code_OK_Chai_Response.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Status_Code_OK_Chai_Response.jpg\" alt=\"Status_Code_OK_Chai_Response\"/></a></figure>\n\n\n\n<p>This one was quite understandable, I guess.</p>\n\n\n\n<h3><em><strong>Assert on Response Type</strong></em></h3>\n\n\n\n<p>This assertion is based on verifying the<strong>&nbsp;<em>R</em></strong><em><strong>esponse Type.</strong></em>&nbsp;In the below test,&nbsp; we are verifying that if the&nbsp;<em>Response Type</em>&nbsp;is&nbsp;<em>JSON</em>. Write the following code in the&nbsp;<em><strong>T</strong><strong>ests</strong></em>&nbsp;tab:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cResponse if Json\u201d, function(){\r\n     pm.response.to.be.json;\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_Json_Chai.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_Json_Chai.png\" alt=\"Response_Json_Chai\"/></a></figure>\n\n\n\n<p><strong><em>Note</em>:</strong><em>\u00a0I hope you remember that in\u00a0<strong>Get Request</strong>\u00a0when we sent the request using weather api, we received the response in the text format rather than JSON format. We are using the same API here.</em></p>\n\n\n\n<p>Press&nbsp;<em><strong>Send</strong></em>&nbsp;and see the result.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_Json_Chai_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_Json_Chai_Response.png\" alt=\"Response_Json_Chai_Response\"/></a></figure>\n\n\n\n<p><em><strong>The assertion has failed because of the response type</strong></em>. We expected response type to be&nbsp;<em>JSON</em>, but the response that we get in weather api is in the&nbsp;<em>TEXT</em>&nbsp;format.</p>\n\n\n\n<h3><em><strong>Assert on Response Header</strong></em></h3>\n\n\n\n<p><em><strong>This assertion is based on checking whether the header has content-type or not.</strong></em></p>\n\n\n\n<p>Write the following in your&nbsp;<em><strong>tests</strong></em>&nbsp;tab</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cContent-Type is present\u201d, function () {\r\n     pm.response.to.have.header(\u201cContent-Type\u201d);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_To_Have_Content_Type.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_To_Have_Content_Type.png\" alt=\"Response_To_Have_Content_Type\"/></a></figure>\n\n\n\n<p>This assertion checks if the content-type header is present in the response or not. Press&nbsp;<em><strong>Send</strong></em>&nbsp;and see if it is or not.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_To_Have_Content_Type_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_To_Have_Content_Type_Response.png\" alt=\"Response_To_Have_Content_Type_Response\"/></a></figure>\n\n\n\n<p><em><strong>Yes, the test passed</strong></em>. But, how can we check if it was really present or not. As you can see besides&nbsp;<em><strong>Test Results</strong></em>,&nbsp;<strong><em>Headers</em></strong>&nbsp;is written. Go to&nbsp;<em><strong>Headers</strong></em>&nbsp;and&nbsp;<em><strong>Content-Type</strong></em>&nbsp;must be present there.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Content_Type_Header.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Content_Type_Header.png\" alt=\"Content_Type_Header\"/></a></figure>\n\n\n\n<p>So now we have seen the assertions that are commonly used.&nbsp;<em><strong>Now, we will try to use both Chai Assertion along with these assertions to create some meaningful tests.</strong></em></p>\n\n\n\n<h3><em><strong>Assert for Multiple Status Code</strong></em></h3>\n\n\n\n<p>For this we will be using the\u00a0<em><strong>customer register api</strong></em>\u00a0since it uses POST method type to send the request or you can also use Weather API but ultimately the test will fail. You can download both the APIs from\u00a0<strong><em>here</em></strong>.</p>\n\n\n\n<p>Go to&nbsp;<em><strong>tests</strong></em>&nbsp;tab and write the following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cSuccessful POST request\u201d, function () {\r\n     pm.expect(pm.response.code).to.be.oneOf(&#91;201,202]);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Successful_Post_Request.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Successful_Post_Request.png\" alt=\"Successful_Post_Request\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: 201 is created and 202 is Accepted.</em></p>\n\n\n\n<p>Press&nbsp;<em><strong>send</strong></em>&nbsp;and see the response which will be pass if the status code is 201 or 202 or else will fail.</p>\n\n\n\n<h3><strong><em>Assert on Response Text</em></strong></h3>\n\n\n\n<p>Check if response contains a string</p>\n\n\n\n<p>Write the following code in the&nbsp;<em><strong>tests</strong></em>&nbsp;tab of any API which is correct and gives response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cBody matches string\u201d, function () {\r\n     pm.expect(pm.response.text()).to.include(\u201cstring_you_want_to_search\u201d);\r\n});</code></pre>\n\n\n\n<p><em><strong>Replace the query&nbsp;\u201cstring_you_want_to_search\u201d&nbsp;with the string you want to search. If your response will contain the string your assertion will pass or else fail.</strong></em></p>\n\n\n\n<p>Press&nbsp;<em><strong>send</strong></em>&nbsp;and see the response.</p>\n\n\n\n<p><em><strong>For learning more about it we strongly recommend reading the documentation of\u00a0Chai Library\u00a0and\u00a0Postman Sandbox.</strong></em></p>\n\n\n\n<p>So in this tutorial we asserted some assertions which executes under Postman Sandbox. These assertions are very helpful for a tester as he can complete his testing more easily and effectively. I hope you have got an idea of what assertions are and how to use them. You can combine the both Chai assertion and postman\u2019s assertion to create your own custom assertions and see if you got it right or not. We will move onto our next tutorial now. Till then, keep practicing assertions. They are the heart of testing through Postman.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous tutorial of\u00a0Chai Assertion Library\u00a0 we covered Postman Assertions using\u00a0expect\u00a0keyword.\u00a0Also there are many other assertions in Postman which works around\u00a0Postman Sandbox\u00a0which we covered inpre-request scripts\u00a0in Postman. In this tutorial we will talk about some common\u00a0Different types of Asserts in Postman. In this tutorial we will be focusing on the response part because it [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5033"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5033"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5033/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5034,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5033/revisions/5034"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5033"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5033"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5033"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5035,
    "date": "2021-05-27T12:07:47",
    "date_gmt": "2021-05-27T12:07:47",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5035"
    },
    "modified": "2021-05-27T12:07:47",
    "modified_gmt": "2021-05-27T12:07:47",
    "slug": "mock-server-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/mock-server-in-postman/",
    "title": {
      "rendered": "Mock Server in Postman"
    },
    "content": {
      "rendered": "\n<p>In the\u00a0<em><strong>API with Postman tutorial</strong></em>, we learnt about the\u00a0<em><strong>Client and Server Architecture</strong></em>\u00a0which is the soul of\u00a0<em>API Testing</em>. In this type of architecture we need a server to get the response. This is a working, online server of an organization. Then why to\u00a0<em><strong>Mock Server</strong></em>?</p>\n\n\n\n<h2>Mock Server in Postman</h2>\n\n\n\n<p>Well, mocking in general dictionary terms means imitating or making a replica of something. So it is pretty easy to decode that here we will replicate the server. We imitate the server in the same way as it would be after being deployed and responding in the same way as it would then. How do we do that? It is simple and straightforward. We need the same response so we need to mock the same APIs as original with the same parameters. Although it would be a replica, we can continue our work and debug without even having a live server. There are plenty of other reasons and tools to work with a mock server. But we are lucky enough that Postman already has an inbuilt feature to deploy a mock server without any external installation. In the coming sections, we will discuss about:</p>\n\n\n\n<ul><li><strong><em>What is Mock Server?</em></strong></li><li><strong><em>Why use Mock Server?</em></strong></li><li><strong><em>How to create a mock server in Postman?</em></strong></li></ul>\n\n\n\n<h3><em><strong>What is Mock Server?</strong></em></h3>\n\n\n\n<p><em><strong>A mock server is a server that is not a real server. It is just a fake server that is simulated to work as a real server so that we can test our APIs and check the response or errors.</strong></em>&nbsp;This server is set up in such a way that we get a particular response for a particular request that we desire to see. A mock server behaves like a real server and uses fake APIs, of course, for testing and development purpose. There are a number of reasons for which we require a mock server. Along with the case given above, it is also required in today\u2019s testing world. Such requirement is in Agile methodology which is recent and better than waterfall methodology. In this method, testing and development go side by side. For this, a tester needs to have the same requirement as the developer to work simultaneously. For which you need a mock server. In addition to this, few reasons are listed in the next section.</p>\n\n\n\n<h3><em><strong>Why we need a mock server?</strong></em></h3>\n\n\n\n<p>We need a mock server for a number of reasons. A mock server is required</p>\n\n\n\n<ul><li><em>To test your own API while developing and before making that API live on the server of your organisation.&nbsp;</em></li><li><em>To get feedbacks and bugs quicker.</em></li><li><em>For checking the dependencies in your API before it is available to everyone.&nbsp;</em></li><li><em>For QA engineers to use this for testing/isolating external dependencies and integration testing.</em></li><li><em>By front end developers to use it before actual endpoints are available. This is done while designing the UI so that you don\u2019t need to wait for the time till actual endpoints are developed. It saves a lot of time.</em></li><li><em>For engineers to develop a prototype of their idea to present it to the investors for funding.</em></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Front-End_Mock.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Front-End_Mock.png\" alt=\"Front-End_Mock\"/></a></figure>\n\n\n\n<p>The above image explains the same point mentioned above. A front-end developer needs to develop the UI for which he must know the responses he will get. For the same he cannot wait until the APIs are upon the server, so he uses the mock server in order to achieve the same and save time.</p>\n\n\n\n<p>I guess now you must have known that mock server is a pretty important feature for a tester. It is very helpful in both the development and test phases of software. Continuing for the same we will now proceed to create our first mock server.</p>\n\n\n\n<h2>How to create a mock server in Postman?</h2>\n\n\n\n<p>In this section, we will create our first mock server in Postman but before that, you must know a few things about the mock server</p>\n\n\n\n<ul><li><em>The mock server is already integrated inside the postman app and is not required externally.</em></li><li><em>The mock server also has CORS (Cross-Origin Resource Sharing) enabled. It means that you won\u2019t get any cross-origin errors while using the mock server.</em></li><li><em>The mock server is free to use i.e. it is available in free tier of Postman.&nbsp;</em></li></ul>\n\n\n\n<p>Okay so now we will follow these steps to create our first mock server.</p>\n\n\n\n<p>1.Click on the&nbsp;<em><strong>New</strong></em>&nbsp;button on the top left corner in the Header section</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/NEW_Postman.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_NEW_Postman.jpg\" alt=\"NEW_Postman\"/></a></figure>\n\n\n\n<p>2. Select&nbsp;<em><strong>Mock Server</strong></em>&nbsp;in the Panel</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Mock_Server_Select_Postman.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Mock_Server_Select_Postman.jpg\" alt=\"Mock Server in Postman\"/></a></figure>\n\n\n\n<p>3. A new panel will be opened up which will enable us to create requests.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Mock_Server_Request.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Mock_Server_Request.jpg\" alt=\"Mock_Server_Request\"/></a></figure>\n\n\n\n<p>There are different columns in this mock server panel which stands for:</p>\n\n\n\n<ul><li><em>The first column Method is for the request type methods like GET, Post etc.</em></li><li><em>The second Request Path will create the url for your API</em></li><li><em>Response code will define the code you wish to get in response (<strong>Read more about Response Code</strong>)</em></li><li><em>Response Body will have the response body that you want to show (<strong>Read more about the Response Body</strong>)</em></li></ul>\n\n\n\n<p>4. Fill up the columns as shown in the image.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Filling_Request_Mock_Server.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Filling_Request_Mock_Server.jpg\" alt=\"Filling_Request_Mock_Server\"/></a></figure>\n\n\n\n<p>5. Click on&nbsp;<em><strong>Next</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Mock_Server_Next.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Mock_Server_Next.jpg\" alt=\"Mock_Server_Next\"/></a></figure>\n\n\n\n<p>6. Name your Mock Server as per your choice</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Naming_Mock_Server.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Naming_Mock_Server.jpg\" alt=\"Naming_Mock_Server\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: You can make the server private also if you don\u2019t want to make your information accessible by everyone but it would require Postman API key in order to access the server. For the beginning, we will keep our server public to reduce complexity.</em></p>\n\n\n\n<p>7. Now the next screen will show you the URL through which you can access the server. This is the confirmation screen that your mock server has been created successfully.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Mock_Server_Created.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Mock_Server_Created.jpg\" alt=\"Mock_Server_Created\"/></a></figure>\n\n\n\n<p>8.Click on&nbsp;<em><strong>Close</strong></em>&nbsp;and close the panel.</p>\n\n\n\n<p>9. As soon as you close the panel, you will see that a new collection with the same name has been created with your APIs that you entered.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Collection_Created_Mock.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Collection_Created_Mock.jpg\" alt=\"Collection_Created_Mock\"/></a></figure>\n\n\n\n<p>10. You can also notice that a new environment has been created as well (<strong><em>Refer Environments in Postman tutorial</em></strong>)</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Environment_Created_Mock.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Environment_Created_Mock.jpg\" alt=\"Environment_Created_Mock\"/></a></figure>\n\n\n\n<p>11. Select the first request in the collection and hover your mouse over the&nbsp;<em>{{url}}</em>&nbsp;written in the request</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Hover_Mouse_URL_Mock.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Hover_Mouse_URL_Mock.png\" alt=\"Hover_Mouse_URL_Mock\"/></a></figure>\n\n\n\n<p>Can you guess why this is an unresolved variable? It\u2019s great if you can. Yes, the environment has not been selected. This is why the environment has been automatically created. Change the environment to the one created and hover again.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Hover_Mouse_URL_Created.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Hover_Mouse_URL_Created.png\" alt=\"Hover_Mouse_URL_Created\"/></a></figure>\n\n\n\n<p>Now the URL value can be displayed. Press the&nbsp;<em><strong>Send</strong></em>&nbsp;button and see the response</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_Mock_Server-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_Mock_Server-1.png\" alt=\"Response_Mock_Server\"/></a></figure>\n\n\n\n<p>We have got the same response as we created while setting up the mock server in the beginning. Check the response code also.</p>\n\n\n\n<h3><em><strong>How to get the response in a different format in Mock Server?</strong></em></h3>\n\n\n\n<p>It is very easy to get the response of Mock Server in other formats also. Since we received text response in the above section, we will now see how to get the response in the most common format i.e.&nbsp;<strong><em>JSON</em></strong>.</p>\n\n\n\n<p>Follow steps 1 to 3 in the above section.</p>\n\n\n\n<p>In the server creation panel, instead of writing plain text, write the response body in&nbsp;<em>JSON</em>&nbsp;format.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_Body_JSON-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_Body_JSON-1.png\" alt=\"Response_Body_JSON\"/></a></figure>\n\n\n\n<p>The above code is the data about a book store with different values of different books. The code is written below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\r\n\u201cbooks\u201d: &#91;\r\n{\r\n\u201cisbn\u201d: \u201c9781449325862\u201d,\r\n\u201ctitle\u201d: \u201cGit Pocket Guide\u201d,\r\n\u201csubTitle\u201d: \u201cA Working Introduction\u201d,\r\n\u201cauthor\u201d: \u201cRichard E. Silverman\u201d,\r\n\u201cpublished\u201d: \u201c2013-08-02T00:00:00\u201d,\r\n\u201cpublisher\u201d: \u201cO\u2019Reilly Media\u201d,\r\n\u201cpages\u201d: 234,\r\n\u201cdescription\u201d: \u201cThis pocket guide is the perfect on-the-job companion to Git, the distributed version control system. It provides a compact, readable introduction to Git for new users, as well as a reference to common commands and procedures for those of you with Git experience.\u201d,\r\n\u201cwebsite\u201d: \u201chttps://chimera.labs.oreilly.com/books/1230000000561/index.html\u201d\r\n},\r\n{\r\n\u201cisbn\u201d: \u201c9781449331818\u201d,\r\n\u201ctitle\u201d: \u201cLearning JavaScript Design Patterns\u201d,\r\n\u201csubTitle\u201d: \u201cA JavaScript and jQuery Developer\u2019s Guide\u201d,\r\n\u201cauthor\u201d: \u201cAddy Osmani\u201d,\r\n\u201cpublished\u201d: \u201c2012-07-01T00:00:00\u201d,\r\n\u201cpublisher\u201d: \u201cO\u2019Reilly Media\u201d,\r\n\u201cpages\u201d: 254,\r\n\u201cdescription\u201d: \u201cWith Learning JavaScript Design Patterns, you\u2019ll learn how to write beautiful, structured, and maintainable JavaScript by applying classical and modern design patterns to the language. If you want to keep your code efficient, more manageable, and up-to-date with the latest best practices, this book is for you.\u201d,\r\n\u201cwebsite\u201d: \u201chttps://www.addyosmani.com/resources/essentialjsdesignpatterns/book/\u201d\r\n}\r\n\r\n]\r\n}</code></pre>\n\n\n\n<p>Create the server with the name of your choice (I used&nbsp;<em><strong>JSON RETURN</strong></em>&nbsp;as the name) and then press send after selecting the correct API and Environment.</p>\n\n\n\n<p>You will receive the response in&nbsp;<em>JSON</em>&nbsp;format now. You might get&nbsp;<em>HTML</em>&nbsp;directly but change the format to&nbsp;<em>JSON</em>&nbsp;from the dropdown to beautify the response as shown.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/JSON_Response_MOCK.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_JSON_Response_MOCK.png\" alt=\"JSON_Response_MOCK\"/></a></figure>\n\n\n\n<p><strong>NOTE</strong>:&nbsp;<em>Don\u2019t forget to select the appropriate environment before sending the request.</em></p>\n\n\n\n<p>By this, we have created and understood a mock server in Postman. You can use different formats to practice yourself. I hope you liked this tutorial. We will continue to our next tutorial, till then, keep exploring mock server and create your own requests.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the\u00a0API with Postman tutorial, we learnt about the\u00a0Client and Server Architecture\u00a0which is the soul of\u00a0API Testing. In this type of architecture we need a server to get the response. This is a working, online server of an organization. Then why to\u00a0Mock Server? Mock Server in Postman Well, mocking in general dictionary terms means imitating [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5035"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5035"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5035/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5036,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5035/revisions/5036"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5035"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5035"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5035"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5037,
    "date": "2021-05-27T12:09:07",
    "date_gmt": "2021-05-27T12:09:07",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5037"
    },
    "modified": "2021-05-27T12:09:07",
    "modified_gmt": "2021-05-27T12:09:07",
    "slug": "http-cookies",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/http-cookies/",
    "title": {
      "rendered": "HTTP Cookies"
    },
    "content": {
      "rendered": "\n<p>The word \u201c<em>cookie\u00a0</em>\u201d or \u201c<em>HTTP cookies\u00a0</em>\u201d is not a new term for anyone of us if we browse the internet regularly. We often encounter this word when we visit a website, and a message pops-up on the screen stating the fact that the site uses \u201c<em>third-party\u00a0</em>\u201d cookies, and we often press \u201c<em>Accept. \u201c</em>\u00a0Keep this thought in mind as we would return to it later in this post. The main reason for designing this post is first to make you familiar with the\u00a0<em>HTTP cookies</em>\u00a0world. If you do not know what cookies are? It would be hard to understand their working and how to use and manage them in any\u00a0<em>API</em>\u00a0testing tool such as\u00a0<em><strong>Postman</strong></em>.\u00a0With this note, here is the list of the main sections which we will be covering in this tutorial:</p>\n\n\n\n<ul><li><em>What are HTTP Cookies?</em><ul><li><em>Why do we use HTTP Cookies?</em></li><li><em>How To Set HTTP Cookies in a browser?</em></li><li><em>What are Third-Party Cookies? How to set them?</em></li></ul></li></ul>\n\n\n\n<h2>What are HTTP Cookies?</h2>\n\n\n\n<p><em>HTTP Cookies</em>, also known popularly as browser cookies or internet cookies, is a small piece of information that saves onto the client\u2019s side, i.e., the web browser, and the server sends it. What piece of information is this? It depends entirely on the developer designing the website. A developer can save&nbsp;<em>login information</em>&nbsp;as an&nbsp;<em>internet cookie</em>,&nbsp;<em>user browser history</em>&nbsp;as an internet cookie, or&nbsp;<em>anything else</em>&nbsp;which may be of their use later on.</p>\n\n\n\n<p>In other words, you can think of&nbsp;<em>HTTP cookies</em>&nbsp;as a memory for a particular website or maybe its identity. As soon as the user hits enter on a web address, if there is a browser cookie saved for that website, the server will recall the user and will serve them accordingly. There is a perfect statement that I read somewhere a long time ago; an<em><strong>&nbsp;HTTP cookie remembers stateful information for the stateless HTTP protocol</strong></em>.</p>\n\n\n\n<p>To make you familiar with how the&nbsp;<em>HTTP cookies</em>&nbsp;look like, let\u2019s explore our browser:</p>\n\n\n\n<p>1. Type in&nbsp;<strong><em>chrome://settings</em></strong>&nbsp; in your Chrome Browser or Visit the&nbsp;<em>\u201d Settings\u201d</em>&nbsp;section in any browser you are using.</p>\n\n\n\n<p>It will open up the settings panel.</p>\n\n\n\n<p>2. Type in the search panel,&nbsp;<em>\u201d Cookies.\u201d</em></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/1-search-http-cookies-in-browser.png\" alt=\"search http cookies in browser\"/></figure>\n\n\n\n<p>3. Open&nbsp;<em><strong>See all cookies and site data.</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/2-select-http-cookies.png\" alt=\"select http cookies\"/></figure>\n\n\n\n<p>And you can see all the websites that have saved an HTTP cookie or browser cookie on your system, and as I count them on my browser, they are literally in hundreds.</p>\n\n\n\n<p>Select any one of the websites, and you will be able to see the HTTP cookie that a particular site has saved.</p>\n\n\n\n<p>Okay, so, it is quite clear that even though we did not know about any such thing, we were helped by it for improving our browser experience. But we still do not understand why do we need&nbsp;<em>HTTP cookies</em>&nbsp;in the first place? Is it that important? What if I tell you that literally, an&nbsp;<em>HTTP cookie</em>&nbsp;is a reason for billions of dollars of trade? Let\u2019s see how.</p>\n\n\n\n<h3><em><strong>Why do we use HTTP Cookies?</strong></em></h3>\n\n\n\n<p>If I want to familiarize myself with the&nbsp;<em>HTTP cookies</em>&nbsp;to a layman, the best term would be to describe these internet cookies as the shadow of you that exists only on the internet. They follow you&nbsp;<em>EVERYWHERE!!</em>&nbsp; They have followed you here too! Honestly, the browser cookies are something that you cannot ignore, which makes them of utmost importance in the life of a developer and testers. In broader terms, there are three sections on which we use the internet cookies:</p>\n\n\n\n<ul><li><em><strong>Session Management</strong>: As soon as the user logs into the website, a session creates for them with a session-id recognizing that session. The HTTP cookies can very well manage this. Through HTTP cookies, we can save your game scores or remember you as a previous user and login automatically. It can expand to anything that the server would like to remember; we can do that with our browser cookies.</em></li><li><em><strong>Tracking</strong>: Tracking with HTTP cookies helps the business know your interests and provide better service to you. For example, if I explored a pen drive on Amazon, it implies that I am interested in it. Therefore, when I visit another website, it makes sense that if an advertisement serves to me, making it of my interest increases the chances of clicking it. It is just a small example of tracking. Tracking through the browser cookies can be used to show you the recommended products and much more.</em></li><li><em>&nbsp;Personalization: Personalisation through HTTP cookies helps the user personalize the website or any other component on the website according to themselves. For example, a popular search engine DuckDuckGo helps the user set a color for the page. When the user selects the color for the first time, the DuckDuckGo server sends a browser cookie wrapped with the username/system id so that anytime that particular user searches, the color page is the same.</em></li></ul>\n\n\n\n<p>So in a way,&nbsp;<em>HTTP</em>&nbsp;cookies are a two-way road. It provides businesses with a method to earn billions of dollars and provides the user with a better and comfortable experience. Think of a time when you would have to login again and again as soon as your session runs out on Amazon (<em>You would know the pain while doing web scraping</em>). What if you were watching an advertisement related to a hat when all I was interested in was a pen drive? HTTP cookies are beneficial for us, and as a developer and tester, we must know how to set these cookies.</p>\n\n\n\n<h3><strong><em>How to Set HTTP Cookies in a Browser?</em></strong></h3>\n\n\n\n<p>In this section, we will explore the different attributes and methods used by the server to set the cookie on the&nbsp;<strong><em>user-agent</em></strong>&nbsp;side, i.e., the browser. It is important to remember before we proceed to set-up&nbsp;<em>HTTP cookie</em>&nbsp;that there are&nbsp;<em><strong>two types</strong>&nbsp;</em>of browser cookies:</p>\n\n\n\n<ul><li><em><strong>Session Cookies:</strong>&nbsp;These types of browser cookies delete once the session ends.</em></li><li><em><strong>Permanent Cookies:</strong>&nbsp;These types of browser cookies remain on the system and communicate with the server every time the website opens.</em></li></ul>\n\n\n\n<p>To set a cookie, we use the \u201c<em>Set-Cookie&nbsp;</em>\u201d header with a long list of attributes according to our needs.</p>\n\n\n\n<p><em><strong>Syntax:</strong></em></p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt; = &lt;cookie-value&gt;</em></p>\n\n\n\n<p>With\u00a0<strong><em>Postman</em></strong>, we will able to see the complete response from the server along with the cookies; for this tutorial, we will just stick to the syntaxes.</p>\n\n\n\n<h4><em><strong>HTTP Cookies Attributes</strong></em></h4>\n\n\n\n<p>As mentioned in the previous section, internet cookies do have attributes that provide some more meaning to the cookie. Otherwise, the cookie is just a&nbsp;<em>name and a value</em>. These attributes will help us set-cookie on the user\u2019s browser. Let\u2019s understand all these attributes in more detail:</p>\n\n\n\n<h5><em><strong>Expires</strong></em></h5>\n\n\n\n<p>The \u201c<em>expires</em>\u201d attribute of&nbsp;<em>HTTP cookies</em>&nbsp;provides the lifetime value of the cookie. Once the value reaches, the cookie deletes automatically. Providing a expires value is important in the browser cookies so that it gets refreshed periodically as the information keeps on changing according to the user behavior. If this attribute is not specified in the header, the&nbsp;<em>HTTP cookie</em>&nbsp;automatically becomes the&nbsp;<em>session cookie</em>&nbsp;and gets deleted once the session is over. We can set it syntactically as follows:</p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt; = &lt;cookie-value&gt;; Expires = &lt;date&gt;</em></p>\n\n\n\n<h5><em><strong>Max-Age</strong></em></h5>\n\n\n\n<p>Similar to the \u201c<em>expires&nbsp;</em>\u201d attribute, the&nbsp;<em><strong>max-age</strong></em>&nbsp;attribute specifies the time until the&nbsp;<em>HTTP cookie</em>&nbsp;expires.&nbsp;<em><strong>If both&nbsp;</strong>\u201cexpires\u201d&nbsp;<strong>and&nbsp;</strong>\u201d max-age\u201d attributes<strong>&nbsp;are specified, the&nbsp;</strong>\u201d max-age\u201d&nbsp;<strong>attribute has the precedence over it.</strong></em>&nbsp;Also, a value of&nbsp;<em>0 or negative</em>&nbsp;will expire the cookie immediately, so a non-zero positive value is expected in this attribute. We can set syntactically as follows:</p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Max-Age = &lt;number&gt;</em></p>\n\n\n\n<h5><em><strong>Secure</strong></em></h5>\n\n\n\n<p>Specifying the&nbsp;<em><strong>secure</strong></em>&nbsp;attribute means encoding the cookie and saving confidential information on the client\u2019s system. We can request a secure&nbsp;<em>HTTP cookie</em>&nbsp;only via the&nbsp;<em>HTTPS</em>&nbsp; scheme. We can set it syntactically as follows:</p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Secure</em></p>\n\n\n\n<h5><em><strong>Path</strong></em></h5>\n\n\n\n<p>The\u00a0<em><strong>path</strong></em>\u00a0value specifies the path that should be within the requested\u00a0<em><strong>URL,</strong></em>\u00a0or else the browser does not send the cookie to the server. A path\u00a0<em>URL</em>\u00a0may look like\u00a0<em>/Back-End/Postman</em>\u00a0on\u00a0<em><strong>ToolsQA,</strong></em>\u00a0so the browser cookie will be sent only when this path includes. It does not matter what is ahead of this path as long as the specified path exists. We can set it syntactically as follows:</p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Path=&lt;path-value&gt;</em></p>\n\n\n\n<h5><em><strong>Domain</strong></em></h5>\n\n\n\n<p>The&nbsp;<em>domain</em>&nbsp;value specifies the host to which the&nbsp;<em>HTTP cookie</em>&nbsp;needs to send. For example,&nbsp;<em>toolsqa.com</em>&nbsp;is a domain name. All the subdomains come under major domain that specifies, and all the subdomains include in the cookie. We can set it syntactically as follows:</p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;</em></p>\n\n\n\n<h5><em><strong>HTTP-Only Cookie</strong></em></h5>\n\n\n\n<p>If the cookie is set for the&nbsp;<em>HTTP- only</em>&nbsp;attribute, then the client-side would not be able to access the cookie. Having an&nbsp;<em>HTTP-Only</em>&nbsp;attribute explores the possibilities of any flaw in the client-side and is more secure since the Javascript is not able to access the cookie from the client-side. We can set it syntactically as follows:</p>\n\n\n\n<p><em>Set-Cookie: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly</em></p>\n\n\n\n<p>All these attributes are optional, and it\u2019s up to the developer what they want for their website.</p>\n\n\n\n<h3><em><strong>What are Third-Party Cookies?</strong></em></h3>\n\n\n\n<p>It has been a long time that we, as a user, are distracted by a popup whenever we visit a website over the internet. The popup says, \u201c<em>This website uses third-party cookies. \u201c</em>&nbsp;Majority of the time, the popup allows us with only one option, \u201c<em>Accept. \u201c</em>&nbsp;That\u2019s rude, isn\u2019t it? This makes us wonder, though, \u201c<em>What are third-party cookies?&nbsp;</em>\u201d and why websites use them?</p>\n\n\n\n<p><em><strong>Third-party HTTP cookies</strong></em>&nbsp;are placed into the client\u2019s browser by other websites apart from the one the user is visiting (<em>hence the name \u201cthird-party\u201d cookie</em>).&nbsp;<em>For example, a third-party cookie may be set by the Ads agency for placing ads on another website that are using Ads from that particular agency.</em>&nbsp;Third-party cookies are mainly used for ads purposes and tracking the user. Although a developer can use it for any purpose, they want. A user can think of&nbsp;<em>third-party cookies</em>&nbsp;as a partnership between the developer and the third-party to serve the user better. So the next time you see a popup, \u201c<em>This website uses cookies, \u201c</em>almost all the time, it is to place the ads according to the user\u2019s interests. The practice is not new, but strict cyber laws have enforced for the browser developers to inform the user of these things.</p>\n\n\n\n<h4><em><strong>How to Set Third-Party Cookies?</strong></em></h4>\n\n\n\n<p>To set the third-party cookie, the developer should be willing for it. Therefore, the developer places a link into their website which, when loaded, hits the third-party server. The server then recognizes the user. If the user is new, a&nbsp;<em>third-party HTTP cookie</em>&nbsp;is placed onto his browser. If the user is not new, the request sent to the server retrieves the user information. For example, his interests, browsing history, etc. from the&nbsp;<em>HTTP cookie</em>&nbsp;and places an appropriate ad on the website.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/1-Setting-up-Third-Party-Cookies.png\" alt=\"Setting up Third Party Cookies\"/></figure>\n\n\n\n<p>It is a straight-forward process. Moreover, if you visit your cookie section on the browser, you can see all the \u201c<em>Ad cookies\u201d</em>&nbsp;in it. Once the user clears the cookies from their browser, you will notice how the ads change when you visit the same website again.</p>\n\n\n\n<h2>Conclusion</h2>\n\n\n\n<p>This post revolved around&nbsp;<em>HTTP cookies,</em>&nbsp;which are a part of our internet lives. No matter how much you hate being tracked or being watched every time, you cannot ignore&nbsp;<em>HTTP cookies.</em>&nbsp;More than 90% of the revenue of Google comes from Ad revenues. It is therefore clear that no matter what you do, cookies will always be your shadow. On the other hand, it is not too bad. Because it helps create a more comfortable experience for the user over the internet.</p>\n\n\n\n<p>It would be really annoying logging in every day onto a website when cookies can log in automatically for you. Visiting a website, saving a cookie, and then sending that cookie with the data to third-party is a security threat. Additionally, it\u2019s also a time taking process. This gives rise to third-party cookies. The ad company sets these cookies directly to make the process safer and faster. So, the next time you see that pop up on a website, you know what it means and its effects.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The word \u201ccookie\u00a0\u201d or \u201cHTTP cookies\u00a0\u201d is not a new term for anyone of us if we browse the internet regularly. We often encounter this word when we visit a website, and a message pops-up on the screen stating the fact that the site uses \u201cthird-party\u00a0\u201d cookies, and we often press \u201cAccept. \u201c\u00a0Keep this thought [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5037"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5037"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5037/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5038,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5037/revisions/5038"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5037"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5037"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5037"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5039,
    "date": "2021-05-27T12:12:15",
    "date_gmt": "2021-05-27T12:12:15",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5039"
    },
    "modified": "2021-05-27T12:12:15",
    "modified_gmt": "2021-05-27T12:12:15",
    "slug": "cookies-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/cookies-in-postman/",
    "title": {
      "rendered": "Cookies in Postman"
    },
    "content": {
      "rendered": "\n<p>Now that we have known everything about the\u00a0<em><strong>Cookies</strong></em>\u00a0from scratch, it is time that we analyse the\u00a0<em><strong>Cookies in Postman</strong></em>. You can also learn about analyzing cookies in your browser but it is not relevant to this tutorial and moreover learning this in Postman is much more easier and convenient than learning the same in the browser.</p>\n\n\n\n<p>In this tutorial we will be focusing on:</p>\n\n\n\n<ul><li><em><strong>Managing Cookies</strong></em></li><li><em><strong>Executing Tests on Cookies</strong></em></li></ul>\n\n\n\n<h2>Cookies in Postman</h2>\n\n\n\n<p>Since&nbsp;<em>cookies</em>&nbsp;are first returned from the server, lets see what cookies are being returned, when we access the Google server.&nbsp;Moving on to the Postman app, hit the following API&nbsp;<em><strong>www.google.com</strong></em>&nbsp;in Postman.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/google_Endpoint.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_google_Endpoint.png\" alt=\"google_Endpoint\"/></a></figure>\n\n\n\n<p>Now go the&nbsp;<em><strong>Headers</strong></em>&nbsp;tab in the response section.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Header_Response_2.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Header_Response_2.png\" alt=\"Header_Response_2\"/></a></figure>\n\n\n\n<p>Here you will find&nbsp;<em><strong>Set_Cookie</strong></em>&nbsp;which is the cookie being sent by the server of google.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Cookie_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Cookie_Response.png\" alt=\"Cookie_Response\"/></a></figure>\n\n\n\n<p>Header contains too many values and cookies is very important part of a header. Therefore, Postman also gives us a separate option of Cookies.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Cookie_Option_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Cookie_Option_Response.png\" alt=\"Cookie_Option_Response\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: This will show the same cookies as we saw in the Header section. Cookies displayed in this section are the cookies related to Google. Site specific cookies.</em></p>\n\n\n\n<h3><em><strong>Manage Cookies in Postman</strong></em></h3>\n\n\n\n<p>This is how we can see the cookies that we receive from the server to which we have hit the response. Postman also provides a&nbsp;<em><strong>Cookie Manager</strong></em>&nbsp;separately where you can&nbsp;<em><strong>Add, Delete or Modify the Cookies</strong></em>.</p>\n\n\n\n<p>Click \u201c<em><strong>Cookies</strong></em>\u201d on the top right.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Cookie_Manager.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Cookie_Manager.png\" alt=\"Cookie_Manager\"/></a></figure>\n\n\n\n<p>This will open the cookie manager panel where you can see all the cookies are located.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Cookie_Manager-2.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Cookie_Manager-2.png\" alt=\"Cookies in Postman\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: Cookies displayed in this section are browser specific cookies, means cookies saved from your previous&nbsp;made requests, irrespective of websites.</em></p>\n\n\n\n<p>This cookie manager works same as a browser\u2019s. It will save all the cookies irrespective of the work you are currently doing. As you can see in my cookie manager it has cookies from\u00a0<em><strong>imgur.com</strong></em>\u00a0website which I used in the\u00a0<em><strong>OAuth 2.0 tutorial</strong></em>\u00a0and since then I have used Postman many times. I have also cleared/deleted all the collections related to the\u00a0<em><strong>Imgur</strong></em>\u00a0but still the cookies are maintained by Postman just like a browser.</p>\n\n\n\n<h3><em><strong>Add Cookies in Postman</strong></em></h3>\n\n\n\n<p>To add the cookie. Go to the&nbsp;<em><strong>google.com</strong></em>&nbsp;domain in the manager and click&nbsp;<em><strong>Add Cookie.</strong></em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Add_Cookie.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Add_Cookie.png\" alt=\"Add_Cookie\"/></a></figure>\n\n\n\n<p>A new text box will open up where it will have some values already written. Change those values as given in the image below.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Adding_New_Cookie.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Adding_New_Cookie.png\" alt=\"Adding_New_Cookie\"/></a></figure>\n\n\n\n<p>Now you have added a new cookie to the domain&nbsp;<em><strong>google.com</strong></em>. This cookie will be now sent along with the request to the server. Press&nbsp;<em><strong>Save</strong></em>&nbsp;and close the panel.&nbsp;Hit the endpoint again and see the header section now.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/New_Cookie_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_New_Cookie_Response.png\" alt=\"New_Cookie_Response\"/></a></figure>\n\n\n\n<p>You can see the cookie that we added can be seen here. This is shown multiple times because Google server does not recognize this cookie and hence expiry date is also set to 1990. Notice the expiry date of other cookies.</p>\n\n\n\n<p>In the same fashion, cookies can also be modified by opening the already saved cookie in the cookie manager. Please try it yourself as a practice.</p>\n\n\n\n<h2>Executing Tests on Cookies</h2>\n\n\n\n<p>In Postman the cookies can also be checked i.e. whether the expected cookie or the expected value is returned or not. This helps us a lot if we are receiving too many cookies. For this you need a few prerequisites.</p>\n\n\n\n<p><em><strong>Pre-Requisites</strong></em></p>\n\n\n\n<ul><li><strong><em>Knowledge of Tests- Refer</em></strong>\u00a0<em><strong>How to set Tests in Postman</strong></em></li><li><em><strong>Knowledge of Assertions- Refer</strong></em>\u00a0<em><strong>How to write Assertions in Postman</strong></em></li><li><em><strong>Knowledge of Chai Assertion Library- Refer</strong></em>\u00a0<em><strong>Chai Assertion Library in Postman</strong></em></li></ul>\n\n\n\n<h3><strong><em>Assertion:&nbsp; Check if Cookie Exists</em></strong></h3>\n\n\n\n<p>Here we will check if are getting the cookie that we expect or not. In the test tab, write the following test</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cCookies_Check\u201d, function(){\r\npm.expect(pm.cookies.has(\u2018NID\u2019)).to.be.true;\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Check_Cookie_Availability.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Check_Cookie_Availability.png\" alt=\"Check_Cookie_Availability\"/></a></figure>\n\n\n\n<p><em><strong>NOTE</strong>: We already know that google.com has NID cookie saved. So we are just checking the same through tests. This will not be the case with other servers. So please check it beforehand for other domains.</em></p>\n\n\n\n<p>The test result will pass signalling that the cookie with the name NID exists in the request.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Check_Cookie_Availability_Result.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Check_Cookie_Availability_Result.png\" alt=\"Check_Cookie_Availability_Result\"/></a></figure>\n\n\n\n<h3><strong><em>Assertion: Check for a Value of Cookie</em></strong></h3>\n\n\n\n<p>We can also check for a specific value in a cookie. By this test we confirm that the cookie contains same value that we want to see.</p>\n\n\n\n<p>Write the following code in your tests tab</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pm.test(\u201cCookies_Value_Check\u201d, function(){\r\npm.expect(pm.cookies.get(\u2018NID\u2019)).to.eql(\u2018abc\u2019);\r\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Check_Cookie_Value.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Check_Cookie_Value.png\" alt=\"Check_Cookie_Value\"/></a></figure>\n\n\n\n<p><em>This code will check if the cookie NID has the value&nbsp;<strong>abc</strong>&nbsp;or not.</em></p>\n\n\n\n<p>Since this is not the value of NID, we will get a failure status. Also, Postman will tell us the expected value i.e. the correct value of the NID cookie.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Check_Cookie_Value_Result.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Check_Cookie_Value_Result.png\" alt=\"Check_Cookie_Value_Result\"/></a></figure>\n\n\n\n<p>By this we can conclude this tutorial here. Cookies are a very important aspect in IT industry today. Since software and applications relies on the user, cookies makes the user experience better than ever. Keep practicing cookies with other domains also. We will move onto our next tutorial now.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Now that we have known everything about the\u00a0Cookies\u00a0from scratch, it is time that we analyse the\u00a0Cookies in Postman. You can also learn about analyzing cookies in your browser but it is not relevant to this tutorial and moreover learning this in Postman is much more easier and convenient than learning the same in the browser. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5039"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5039"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5039/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5040,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5039/revisions/5040"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5039"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5039"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5039"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5041,
    "date": "2021-05-27T12:13:29",
    "date_gmt": "2021-05-27T12:13:29",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5041"
    },
    "modified": "2021-05-27T12:13:29",
    "modified_gmt": "2021-05-27T12:13:29",
    "slug": "share-session-id-across-different-requests-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/share-session-id-across-different-requests-in-postman/",
    "title": {
      "rendered": "Share Session ID across Different Requests in Postman"
    },
    "content": {
      "rendered": "\n<p>In the previous tutorial about using\u00a0<em><strong>Cookies in Postman</strong></em>, we studied the cookies and how to add, delete and modify them. Those things are confined to the same requests though. In the same tutorial, in the last section, we also discussed the assertions to apply on cookies for checking the values. We will be using our same knowledge in this tutorial to\u00a0<em><strong>Share Session ID across Different Requests\u00a0in Postman</strong></em>. For this, you need to know a few things beforehand.</p>\n\n\n\n<h3><em><strong>Pre-Requisites</strong></em></h3>\n\n\n\n<ul><li><em><strong>Knowledge of Cookies \u2013\u00a0What are cookies?</strong></em></li><li><em><strong>Knowledge of using Cookies in Postman \u2013\u00a0How to use cookies in Postman?</strong></em></li><li><em><strong>Knowledge of assertions \u2013\u00a0How to execute Assertions in Postman?</strong></em></li></ul>\n\n\n\n<h2>How to Share Session ID across Different Requests&nbsp;in Postman?</h2>\n\n\n\n<p>So basically this tutorial is designed to make you understand how we can pass one cookie value onto another request. Cookie values are passed onto another request only if the website is the same. As we discussed in what is cookies tutorial, a server recognizes its own cookies and no other cookie. This makes cookies highly secure. Cookie values are needed to be passed onto another request to match your preferences and data saved with every page you see. Since every page is a unique request as seen from the server\u2019s point of view, every web page needs the cookie to show you the best results. In this tutorial, we will pass&nbsp;<em><strong>Session ID</strong></em>&nbsp;Cookie onto the next request.</p>\n\n\n\n<p>A session id is similar to token expiry. When a token expires, the authorization fails. Similarly, when a session id expires, you are no more authenticated to the server and need to log in again. It should be noted that this would not work on the website\u2019s server. This is purely for our understanding and using the same while developing/testing.</p>\n\n\n\n<h3><em><strong>Session ID Cookie Work Flow</strong></em></h3>\n\n\n\n<p>While using cookies to authenticate the user, the workflow is in four simple steps</p>\n\n\n\n<ol><li><em>The user logs in by providing his credentials to the website.</em></li><li><em>After we log in the credentials are checked by a simple query in the database. If the credentials are found valid, the session is created for the user. This session is provided a unique id called as session id through which the user is authenticated for the time the session is alive. This session id is then sent to the client and saved in the browser.</em></li><li><em>For every subsequent request from the client, the browser sends the session id along with the request to authenticate the user. This session id is checked to the one in the database. If they are found equal, the user is responded with the webpage he requested.</em></li><li><em>After the user logs out of the website, the session id is then destroyed at both client and server end.</em></li></ol>\n\n\n\n<h3><em><strong>How to share Session ID Cookie with another request?</strong></em></h3>\n\n\n\n<p>For passing the session id to another request, we have to follow two steps namely</p>\n\n\n\n<ul><li><em>Saving the cookie from the response we got from our first request.</em></li><li><em>Adding this cookie as a header to the next request we send.</em></li></ul>\n\n\n\n<p>1. Go to&nbsp;<em><strong>www.amazon.com</strong></em></p>\n\n\n\n<p>2. See if you get&nbsp;<em><strong>session id</strong></em>&nbsp;as a cookie in the response</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/session_id_amazon.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_session_id_amazon.png\" alt=\"Share Session ID across Different Requests\u00a0in Postman\"/></a></figure>\n\n\n\n<p>3. We will try to save this&nbsp;<em>session id</em>&nbsp;as a variable in Postman. For this use the following code in the&nbsp;<em><strong>Tests</strong>&nbsp;</em>tab.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var a = pm.cookies.get(\u2018session-id\u2019);\r\npm.globals.set(\u201csession ID\u201d, a);</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/saving_session_id.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_saving_session_id.png\" alt=\"saving_session_id\"/></a></figure>\n\n\n\n<p>This will get the&nbsp;<em>session id</em>&nbsp;cookie and send it as a global variable whose key is&nbsp;<em><strong>session ID</strong></em>&nbsp;and the value is the value of the cookie.</p>\n\n\n\n<p>4. Press&nbsp;<em><strong>Send</strong></em>&nbsp;and see the variables now.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/environment_variables.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_environment_variables.png\" alt=\"environment_variables\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: You can refer\u00a0<strong>Environment and Variables</strong>\u00a0tutorial to learn more about variables.</em></p>\n\n\n\n<p>5. Now we have saved the&nbsp;<em>session id</em>&nbsp;in Postman. All we need to do now is send this&nbsp;<em>session id</em>&nbsp;along with the next request as a cookie. This is done by adding a header cookie and it\u2019s value. Please refer to the course for details on Header and How to use the header with the requests.</p>\n\n\n\n<p>6. Enter the address as&nbsp;<em><strong>https://www.amazon.in/your-account</strong></em></p>\n\n\n\n<p>Consider as a new request. This request opens my account details. We need to tell the server that this is the same session. Hence, we send the cookie as a header.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/amazon_account_address.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_amazon_account_address.png\" alt=\"amazon_account_address\"/></a></figure>\n\n\n\n<p>7. Go to&nbsp;<em><strong>Headers</strong></em>&nbsp;tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Header_Tab.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Header_Tab.png\" alt=\"Header_Tab\"/></a></figure>\n\n\n\n<p>8. Enter the key as Cookie and Value as the variable&nbsp;<em><strong>session ID</strong></em>. I hope you know beforehand how to mention variables.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Cookie_Header.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Cookie_Header.png\" alt=\"Cookie_Header\"/></a></figure>\n\n\n\n<p>You can also hover the mouse over the variable to see it\u2019s value which is the same as that of the previous request.</p>\n\n\n\n<p>By this, you can send the cookie along with the header to your next request in Postman. This example was purely for the purpose of understanding how this works. This cannot be shown along with a successful response because of Amazon\u2019s or any other company\u2019s security. When you are developing your own API, this will help a lot in your testing.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous tutorial about using\u00a0Cookies in Postman, we studied the cookies and how to add, delete and modify them. Those things are confined to the same requests though. In the same tutorial, in the last section, we also discussed the assertions to apply on cookies for checking the values. We will be using our [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5041"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5041"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5041/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5042,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5041/revisions/5042"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5041"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5041"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5041"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5043,
    "date": "2021-05-27T12:14:57",
    "date_gmt": "2021-05-27T12:14:57",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5043"
    },
    "modified": "2021-05-27T12:14:57",
    "modified_gmt": "2021-05-27T12:14:57",
    "slug": "sessions-in-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/sessions-in-postman/",
    "title": {
      "rendered": "Sessions In Postman"
    },
    "content": {
      "rendered": "\n<p><em><strong>Sessions in Postman</strong></em>&nbsp;is a newly introduced feature (<em><strong>after version 6.2</strong></em>) which was much needed before this was introduced. It has solved a problem of sharing sensitive information you used in the project with other members of the team which may or may not be located with you. It has given an additional layer to hold collection, environments and variables. The following image shows the Postman sessions holding two values of Variables called&nbsp;<em><strong>Initial Value</strong></em>&nbsp;&amp;&nbsp;<em><strong>Current Value</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Sessions.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Sessions.jpg\" alt=\"Postman_Sessions\"/></a></figure>\n\n\n\n<p>Do not worry about the different terminologies here. Notice just that two types of values are used here for each variable. This was not available before this version in Postman. Everything about Postman sessions is confined to these two values. We will come to this in the later sections in detail. Although this is a newly introduced feature, it needs few prerequisites to work with</p>\n\n\n\n<h3><em><strong>Pre-Requisites</strong></em></h3>\n\n\n\n<ul><li><em><strong>Knowledge of Environment and Variables (Refer\u00a0Environment and Variables)</strong></em></li><li><em><strong>Knowledge of Collection in Postman (Refer\u00a0Collections In Postman)</strong></em></li><li><em><strong>Knowledge of Workspaces in Postman (Refer\u00a0Workspace in Postman)</strong></em></li></ul>\n\n\n\n<p><em><strong>Sessions in Postman is described as a transient layer\u00a0that holds your variable values related to your current working instance by allowing you to work with certain variables that remain local to your individual scope</strong>\u00a0</em>(referred from\u00a0<em><strong>official postman website</strong></em>). This is quite technical and I am pretty sure it is hard to decode the real value of this feature by now. So we will take all this in the upcoming sections of this tutorial. In this tutorial we will learn about</p>\n\n\n\n<ul><li><em><strong>What are session in postman</strong></em></li><li><em><strong>Advantages of sessions</strong></em></li><li><em><strong>How to use sessions in postman</strong></em></li></ul>\n\n\n\n<h2>What are Sessions in Postman?</h2>\n\n\n\n<p>As described above, sessions holds your variable values to make them available locally to you. A session in postman means that you can change the value of some variables according to you and work on your system accordingly.&nbsp;<em><strong>These values need not be shared when you share your work with your team.</strong></em>&nbsp;<em>Let say you work with a bunch of developers in a team. You all are working on a server where access token is required which is get using client id, secret as explained in the Oauth 2.0 tutorial. As mentioned there, these values are confidential to you and should not be shared, even among your team members. Keeping this in mind, sessions has been introduced in Postman. With sessions you can use your own values in the variables locally and these values will not be synced to the postman server.</em>&nbsp;These values will also not be shared when you share the collection. Simply put,&nbsp;<em><strong>your session variables will remain local and personal to you in every aspect</strong></em>. We will use the same example described here in the explanation of using the session variables in the upcoming section to make it more clear.</p>\n\n\n\n<h3><strong><em>Advantages of Session Variables</em></strong></h3>\n\n\n\n<ul><li><em><strong>Change of Values</strong>: You can change the values in sessions in Postman according to you including the sensitive data while working in the team as Postman does not sync these values. So these values will remain local to you.</em></li><li><em>Sessions in Postman allows you to change the initial values and current values separately.</em></li><li><em>Sessions allows you to work with many people in your workspace and still use your own IDs, Token, Passwords etc.</em></li></ul>\n\n\n\n<h2>Sessions in Postman</h2>\n\n\n\n<p>Before continuing on to use the session variables in Postman, we must see the different between the variable panel interface earlier and after the 6.2 version here.</p>\n\n\n\n<p>Previously the interface looked something like this</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Eye_Icon_All_Variables-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Eye_Icon_All_Variables-1.png\" alt=\"Eye_Icon_All_Variables\"/></a></figure>\n\n\n\n<p>After the update and inclusion of sessions, this interface is changed to something like this</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/New_Environment_Eye_Interface.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_New_Environment_Eye_Interface.png\" alt=\"New_Environment_Eye_Interface\"/></a></figure>\n\n\n\n<p>Now, you can see two new columns in this interface</p>\n\n\n\n<ul><li><em><strong>Initial Value:</strong>&nbsp;Initial value is the value that other people will see when you share your collection. This should not contain sensitive information like token, id etc which can lead to access to your account.</em></li><li><em><strong>Current Value</strong>: This value is personal and local to you. It will not be seen by the other people once you share the collection with them.</em></li></ul>\n\n\n\n<p>The below image shows the same.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Environment_Panel_With_Values_Sessions.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Environment_Panel_With_Values_Sessions.png\" alt=\"Environment_Panel_With_Values_Sessions\"/></a></figure>\n\n\n\n<p>Here the initial value has been given the name&nbsp;<em><strong>Your Key</strong></em>&nbsp;so that when we share it with other people, they will know that they have to insert their own key in the current value. This way our sensitive information will remain local to our system. This value is not synced with the Postman cloud so there is no need to worry.</p>\n\n\n\n<p>Now, we can proceed further to understand more about sessions.</p>\n\n\n\n<h3><em><strong>How to use Sessions in Postman?</strong></em></h3>\n\n\n\n<p>We will be continuing with the same process as we did while generating the\u00a0<em><strong>OAuth 2.0 token in Postman</strong></em>. In that tutorial, we generated an access token to be used with the API to access our account information.</p>\n\n\n\n<p>1. Create a new environment&nbsp;<em><strong>Imgur</strong></em>&nbsp;with a variable&nbsp;<em><strong>URL</strong></em>&nbsp;(containing the endpoint URL) as shown in the image</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/URL_Variable_Sessions.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_URL_Variable_Sessions.png\" alt=\"URL_Variable_Sessions\"/></a></figure>\n\n\n\n<p>Please refer\u00a0<strong><em>environments and variables</em></strong>\u00a0to know about the creation of an environment and variables in Postman.</p>\n\n\n\n<p>2. Add another variable to this environment called&nbsp;<em><strong>t</strong><strong>oken</strong></em>&nbsp;which will contain the token value that you fetched.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Token_Variable_Sessions.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Token_Variable_Sessions.png\" alt=\"Token_Variable_Sessions\"/></a></figure>\n\n\n\n<p><em><strong>Note:</strong>\u00a0The above example is in the continuation of<strong>\u00a0OAuth 2.0 Authorization\u00a0with Postman</strong>, please refer the same tutorial to get the actual value of Authorization token.</em></p>\n\n\n\n<p>Just enter the initial value and you can see that your current value will be automatically updated.</p>\n\n\n\n<p>3. Go back to Postman and see under&nbsp;<em><strong>Header</strong></em>&nbsp;section that the authorization is hard coded because we added it automatically.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization_Hard_Coded.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization_Hard_Coded.png\" alt=\"Authorization_Hard_Coded\"/></a></figure>\n\n\n\n<p><em><strong>Note:</strong>&nbsp;The above example is in the continuation of<strong>&nbsp;OAuth 2.0 Authorization&nbsp;with Postman</strong>, please refer the same tutorial to get the actual value of Authorization token.</em></p>\n\n\n\n<p>4. Now if we try to add another Header of&nbsp;<em><strong>Authorization</strong></em>, we get a prompt by Postman.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Duplicate_Header_Prompt-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Duplicate_Header_Prompt-1.png\" alt=\"Duplicate_Header_Prompt\"/></a></figure>\n\n\n\n<p><em>This prompt basically means you cannot use the same header Authorization twice as it will be overridden.</em></p>\n\n\n\n<p>5. Go to&nbsp;<em><strong>Authorization</strong></em>&nbsp;tab and select&nbsp;<em><strong>No Auth</strong></em>&nbsp;in the Authorization&nbsp;<em><strong>Type</strong></em>&nbsp;Tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/No_Auth_Select-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_No_Auth_Select-1.png\" alt=\"No_Auth_Select\"/></a></figure>\n\n\n\n<p>6. Go back to Header tab and now enter the Authorization key with value as&nbsp;<em><strong>Bearer {{token}}</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization_Bearer_Token.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization_Bearer_Token.png\" alt=\"Authorization_Bearer_Token\"/></a></figure>\n\n\n\n<p>7. Hover your mouse over&nbsp;<em><strong>{{token}}</strong></em>&nbsp;and see the values mentioned</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/token_values.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_token_values.png\" alt=\"token_values\"/></a></figure>\n\n\n\n<p>8. These are both&nbsp;<em><strong>Current</strong></em>&nbsp;and&nbsp;<em><strong>Initial</strong></em>&nbsp;value. But token value is sensitive. Anyone can access your account with the token value. So as discussed above, we must change the&nbsp;<em>Initial Value</em>&nbsp;so that it is not shared among others. For this, you need to press the&nbsp;<em><strong>edit</strong></em>&nbsp;button from the environment panel and the panel given in&nbsp;<em><strong>step 2</strong></em>&nbsp;will open up. Change the initial value as given.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Initial_Value_Token_Change.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Initial_Value_Token_Change.png\" alt=\"Initial_Value_Token_Change\"/></a></figure>\n\n\n\n<p><em>This will remind every other member to enter their own value in the field.</em></p>\n\n\n\n<p>Now you can press&nbsp;<em><strong>send</strong></em>&nbsp;to the API and see that the result is same as you got in the OAuth 2.0 tutorial. So basically to end this, session variable is used to use our own variables\u2019 value personally. It helps us to keep our sensitive information private to our system. Whether you share the collection with in team or even after signing in to postman cloud. I hope you got the concept. On this note, we end this tutorial here.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Sessions in Postman&nbsp;is a newly introduced feature (after version 6.2) which was much needed before this was introduced. It has solved a problem of sharing sensitive information you used in the project with other members of the team which may or may not be located with you. It has given an additional layer to hold [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5043"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5043"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5043/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5044,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5043/revisions/5044"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5043"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5043"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5043"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5045,
    "date": "2021-05-27T12:16:01",
    "date_gmt": "2021-05-27T12:16:01",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5045"
    },
    "modified": "2021-05-27T12:16:01",
    "modified_gmt": "2021-05-27T12:16:01",
    "slug": "oauth-2-0-authorization",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/oauth-2-0-authorization/",
    "title": {
      "rendered": "OAuth 2.0 Authorization"
    },
    "content": {
      "rendered": "\n<p>We have already got familiar with\u00a0<strong><em>Basic Authorization</em></strong>\u00a0in our previous tutorial where we got the access to the server with using\u00a0<em>Username</em>\u00a0and\u00a0<em>Password</em>. There is another type of authorization called\u00a0<em><strong>OAuth</strong></em>\u00a0which is a bit different than basic one. We use basic authorization for primary applications where a username and data lets us inside the server of the organization and then we can see the response with appropriate request.\u00a0<em>OAuth</em>\u00a0on the other hand is designed to let third party applications access the user data with some form of security.\u00a0OAuth 2.0 Authorization</p>\n\n\n\n<p>It has two versions&nbsp;<em><strong>OAuth 1.0</strong></em>&nbsp;and&nbsp;<em><strong>OAuth 2.0</strong></em>. But we will not be focusing on&nbsp;<em>OAuth 1.0</em>&nbsp;and will learn about&nbsp;<em>OAuth 2.0</em>&nbsp;as it is standard today and used most commonly. I will explain all this in detail in the next section. In this tutorial we will focus on</p>\n\n\n\n<ul><li><em><strong>What is OAuth 2.0?</strong></em></li><li><em><strong>OAuth 2.0 Roles</strong></em></li><li><em><strong>Access token and authorization server</strong></em></li><li><em><strong>OAuth vs OAuth 2.0</strong></em></li><li><strong><em>Workflow of Oauth 2.0</em></strong></li></ul>\n\n\n\n<h2>What is OAUTH 2.0?</h2>\n\n\n\n<p><em>OAuth 2.0</em>&nbsp;is the industry-standard protocol for authorization and is normally recommended.&nbsp;<em>OAuth 2.0</em>&nbsp;supersedes the work done on the original&nbsp;<em>OAuth</em>&nbsp;protocol created in 2006.&nbsp;<em><strong>OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices.</strong></em>&nbsp;It is more of a technical terms. In simple language,&nbsp;<em>&nbsp;OAuth 2.0</em>&nbsp;is an authorization framework that enables applications to obtain limited access to user accounts on an HTTP service, such as Facebook and GitHub. It gives access of the user accounts it has to the third party users. This is the main work of&nbsp;<em>OAuth 2.0</em>.</p>\n\n\n\n<h3 id=\"oauth-roles\"><em><strong>OAuth Roles</strong></em></h3>\n\n\n\n<p><em>OAuth</em>&nbsp;defines four roles:</p>\n\n\n\n<p><strong><em>Resource Owner /&nbsp;</em></strong><strong><em>User :&nbsp;</em></strong>The user is the account owner who has his account in the database of the website from which he will authorize an another website to access his account. It is needless to say that the access is limited to the \u201cscope\u201d of the authorization i.e. the access will be given only how much the user wants.&nbsp;</p>\n\n\n\n<p id=\"client-application\"><em><strong>Client / Third Party Application :&nbsp;</strong></em>The application is the software through which the user accesses his account or we can say that the application access the account details of the user from another website after the user permits it.&nbsp; This authorization process from the user must be validated by the APIs of the application and the third-party website.</p>\n\n\n\n<p id=\"resource-authorization-server-api\"><em><strong>Resource / Authorization Server :&nbsp;</strong></em>The resource server is the server which has the hosts accounts with itself. For example the resource server of Facebook will have it\u2019s user\u2019s account in it\u2019s database which can be accessed only through his server. The authorization server is used to generate the access token after the user grants him the permission to let the application access his account details (within the scope).</p>\n\n\n\n<p>From an application developer\u2019s point of view, a service\u2019s&nbsp;<em><strong>API</strong>&nbsp;</em>fulfills both the resource and authorization server roles. We will refer to both of these roles combined, as the&nbsp;<em>Service</em>&nbsp;or&nbsp;<em>API</em>&nbsp;role</p>\n\n\n\n<h3><em><strong>Access Token and Authorization Server</strong></em></h3>\n\n\n\n<p><em><strong>An Access Token is the guarantee that the user himself has approved in the application to access the data</strong></em>. When a server sees the access token, it is sure that the application has proper permission for accessing the data. Since access token is so important, we need something which can handle this task with responsibility. This is done by the&nbsp;<em><strong>Authorization Server</strong></em>.&nbsp; This authorization server issues the token to the client application to access the data from the server.</p>\n\n\n\n<p>At a deeper understanding, the token is divided into three parts</p>\n\n\n\n<ul><li><em><strong>Header Section:&nbsp;</strong>Contains the contents of the token</em></li><li><em><strong>Payload Section:&nbsp;</strong>Contains the things server needs to send back such as name, profile picture etc.</em></li><li><em><strong>Signature Section:&nbsp;</strong>This section contains the signature which is cryptographically encoded for security.</em></li></ul>\n\n\n\n<p>You must be familiar with this screen. This screen appears whenever you sign up through Facebook on any website.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/facebook_signup_permission.jpg\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_facebook_signup_permission.jpg\" alt=\"facebook_signup_permission\"/></a></figure>\n\n\n\n<p>This asks for the permission from you to confirm that it is who is approving a third party application to access your limited details. This detail varies from website to website. Some might need only profile picture, some might need you details and picture. The access token has detail in it that what type of details the application wants. Since we cannot provide complete information as a security measure, this feature is required.</p>\n\n\n\n<h3><em><strong>OAuth 1 vs OAuth 2.0</strong></em></h3>\n\n\n\n<ul><li><em><strong>User Experience</strong>: OAuth 1 was the earlier form of authorization and was much complicated and got very negative response from companies and users. In OAuth 1.0 you had to open your browser, sign in to the website and then the company or website (like Twitter) would provide the token. This token was then needed to paste into the application. This was a huge blow for user experience.</em></li><li><em><strong>OAuth 1 token were long lived</strong>. They used to expire after a long time and some tokens like that of Twitter\u2019s never expired.</em></li><li><em><strong>OAuth 1 required 2 tokens to be sent along with each API call</strong>.</em></li></ul>\n\n\n\n<h2>Workflow of OAuth 2.0</h2>\n\n\n\n<p>Till now we have learnt about the terminologies and details of the&nbsp;<em>OAuth 2.0 Authorization</em>. In this section we will explain the clear picture of how you access your information through<em>&nbsp;OAuth 2.0 authorization</em>.</p>\n\n\n\n<p>Let\u2019s say you are signing up to an Client Application called&nbsp;<em><strong>Book A Flight</strong></em>. This application needs your details like date of birth, profile picture and your interests. So you have got two ways to provide this information to the&nbsp;<em>Book A Flight</em>&nbsp;application.&nbsp;Either you sign up using direct method by filling details of&nbsp;<em><strong>Email Id and Password.</strong></em>&nbsp;After that you need to fill out complete details and upload a picture.</p>\n\n\n\n<p>Another option is that you can sign in via Facebook through the given option and everything will be automatically prepared without your manual effort. This is simple and authentic. So we choose this way.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Combine.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Combine.png\" alt=\"Combine\"/></a></figure>\n\n\n\n<p>As soon as you click the Facebook button a popup will open up for you to provide access on Facebook. As shown in the below image, it request your permission on Facebook, so that it know you are allowing to share your data with the third party App \u201c<em>Book a Flight</em>\u201c. But how does Facebook know which website is this, as FB can allow just every App to use their user data.<br><img loading=\"lazy\" alt=\"Mobile Application Facebook Permission Page\" width=\"320\" height=\"645\" src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/FB-Permission.png\"><br><em><strong>Note</strong>&nbsp;: To get the Facebook access page, the Client Application needs to be registered to Facebook.</em></p>\n\n\n\n<h3><em><strong>Client Application Registration with FB/Twitter/LinkedIn etc</strong></em></h3>\n\n\n\n<p>Before showing Facebook as an available option for signing up, Client Application needs to register with FB Application. To obtain that it needs to provide the&nbsp;<em><strong>Callback URL</strong></em>&nbsp;to Facebook, so that Facebook knows where to redirect after you have signed via Facebook.</p>\n\n\n\n<p><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/CallBack-URL-1.png\"></a><br><em><strong>Note</strong>&nbsp;: To get more on Callback URL you can visit the tutorial about the&nbsp;<strong>OAuth 2.0 Authorization tutorial in Postman</strong>.</em></p>\n\n\n\n<p>After the registration of the Application, Facebook will provide a&nbsp;<em><strong>Client Id</strong></em>&nbsp;and&nbsp;<em><strong>Client Secret</strong></em>&nbsp;to the application which are very important. These are used as the unique identifiers of the website/application since many websites are registered with the Facebook.</p>\n\n\n\n<ul><li><em><strong>Client ID</strong>: It is an id, like you get in your office or college so that you are uniquely identified. Here the client needs to be uniquely identified by Facebook as an application, hence it is provided an id.</em></li><li><em><strong>Client Secret</strong>: This acts like a password which cannot be shared. The client secret is used as an authentication identifier by Facebook every time the application makes the request.</em></li></ul>\n\n\n\n<p><em><strong>Note:</strong>&nbsp;The above points are no way related to the user. This is done and set up by the application owner. It is worth knowing though.</em></p>\n\n\n\n<h3><em><strong>User Authorization on Third Party App</strong></em></h3>\n\n\n\n<p><em><strong>Step 1:</strong></em>&nbsp;Now coming back to the user authorization, when you sign in using the username and password of Facebook, you are asked to allow the permission.&nbsp;<em><strong>This is called as authorization grant</strong></em>. In simple words, grant means agreeing to something. So here we are granting authorization over Facebook to give the required details to the third party App which is&nbsp;<em>Book a Flight</em>&nbsp;in our case.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization-Grant-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization-Grant-1.png\" alt=\"Authorization Grant\"/></a></figure>\n\n\n\n<p><em><strong>Step 2:</strong></em>&nbsp;Since the application has granted the access on User\u2019s FB account, now the&nbsp;<em>application</em>&nbsp;requests an access token from the&nbsp;<em>authorization server</em>&nbsp;(API) by presenting authentication of its own identity, and the authorization grant. If the application identity is authenticated and the authorization grant is valid, the&nbsp;<em>authorization server</em>&nbsp;(API) issues an&nbsp;<em><strong>Access Token</strong></em>&nbsp;to the application. Authorization is complete.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Access-Token-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Access-Token-1.png\" alt=\"Access Token\"/></a></figure>\n\n\n\n<p><strong>Note</strong><em>: Token is a guarantee to the Resource Server which has actual data and Authorization Grant is the guarantee to the Authorization Server to generate an access token.</em></p>\n\n\n\n<p><em><strong>Step 3:&nbsp;</strong></em>The&nbsp;<em>application</em>&nbsp;requests the resource from the&nbsp;<em>resource server</em>&nbsp;(API) and presents the access token for authentication. If the access token is valid, the&nbsp;<em>resource server</em>&nbsp;(API) serves the resource to the&nbsp;<em>application.</em></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Resource-Access-1.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Resource-Access-1.png\" alt=\"OAuth 2.0 Authorization\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>&nbsp;: The request to authorization server also contains the details that the application wants. For example, if it wants only profile picture or anything else. The token is generated accordingly so that when we show this token to the resource server, it gives only required data and not all the data.</em></p>\n\n\n\n<p><em><strong>This complete flow given in above steps is OAuth 2.0 authorization flow</strong></em>. By this we can easily manage our details from other application. We will perform a practical for the same with Postman and&nbsp;<em><strong>Imur Application</strong>&nbsp;</em>in the next tutorial.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We have already got familiar with\u00a0Basic Authorization\u00a0in our previous tutorial where we got the access to the server with using\u00a0Username\u00a0and\u00a0Password. There is another type of authorization called\u00a0OAuth\u00a0which is a bit different than basic one. We use basic authorization for primary applications where a username and data lets us inside the server of the organization and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5045"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5045"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5045/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5046,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5045/revisions/5046"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5045"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5045"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5045"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5047,
    "date": "2021-05-27T12:17:00",
    "date_gmt": "2021-05-27T12:17:00",
    "guid": {
      "rendered": "https://angular.foobrdigital.com/?p=5047"
    },
    "modified": "2021-05-27T12:17:00",
    "modified_gmt": "2021-05-27T12:17:00",
    "slug": "oauth-2-0-authorization-with-postman",
    "status": "publish",
    "type": "post",
    "link": "https://angular.foobrdigital.com/oauth-2-0-authorization-with-postman/",
    "title": {
      "rendered": "OAuth 2.0 Authorization with Postman"
    },
    "content": {
      "rendered": "\n<p>In the last tutorial we learnt everything about\u00a0<em><strong>OAuth 2.0 Authorization,\u00a0</strong></em>its\u2019s advantages, meaning and workflow. This tutorial is designed to make you completely understand the concept along with the practical example.\u00a0OAuth 2.0 Authorization with Postman</p>\n\n\n\n<h2>OAuth 2.0 Authorization with Postman?</h2>\n\n\n\n<p>In this tutorial we will be using Postman to see the workflow of\u00a0<em>OAuth 2.0</em>. For this, we will use\u00a0<em><strong>imgur</strong></em>\u00a0website\u00a0<em>API</em>\u00a0which is an online image sharing community. You can also use any other company\u2019s\u00a0<em>API</em>\u00a0which uses\u00a0<em>OAuth 2</em>\u00a0flow.</p>\n\n\n\n<p>But before that lets just see what happens when we hit the secured endpoint without authorization.</p>\n\n\n\n<p>1.Go to Postman and hit the endpoint:&nbsp;<strong><em>https://api.imgur.com/3/account/me/images</em></strong></p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Imgur_API_Hit.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Imgur_API_Hit.png\" alt=\"Imgur_API_Hit\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>:&nbsp;This is the endpoint for fetching your images from your account in imgur.</em></p>\n\n\n\n<p>2.Authentication error will occur and&nbsp;<em><strong>401 Unauthorized</strong></em>&nbsp;status will be returned. This means that this endpoint requires Authentication to access the resource.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Imgur_API_Hit_Response.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Imgur_API_Hit_Response.png\" alt=\"Imgur_API_Hit_Response\"/></a></figure>\n\n\n\n<p>Let\u2019s see then how to generate an Access token.</p>\n\n\n\n<h3><em><strong>How To Generate Access Token using OAuth 2 in Postman?</strong></em></h3>\n\n\n\n<p>Remember in the last tutorial about the\u00a0<em><strong>OAuth 2.0 Authorization</strong></em>\u00a0flow we discussed that an access token can be generated through the authorization server. But to hit the authorization server, your application must be registered. We will be following the same flow here too.</p>\n\n\n\n<p>1. In this section we will generate the token using&nbsp;<em>OAuth</em>&nbsp;in Postman. &nbsp;For registration, first sign up to&nbsp;<em><strong>imgur</strong>&nbsp;</em>website and then go to the following&nbsp;<em>URL</em>&nbsp;to register your application. Make sure you are logged in to&nbsp;<em>imgur</em>&nbsp;using your username and password.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Register_Application_Imgur.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Register_Application_Imgur.png\" alt=\"Register_Application_Imgur\"/></a></figure>\n\n\n\n<p>2. Fill the boxes with appropriate inputs as shown below</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Register_Application_Imgur_2-3.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Register_Application_Imgur_2-3.png\" alt=\"Register_Application_Imgur_2\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: Callback URL is used to know the registered address of the application from which you will be calling the imgur api. This should be same in both application and the server. This is the registered server address of the application from which you will be calling.&nbsp;</em></p>\n\n\n\n<p>3. Hit&nbsp;<em><strong>Submit</strong></em>&nbsp;and you will receive a&nbsp;<em><strong>Client Id</strong></em>&nbsp;and&nbsp;<em><strong>Client Secret</strong></em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization_Client_ID_Imgur.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization_Client_ID_Imgur.png\" alt=\"Authorization_Client_ID_Imgur\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: Remember these are confidential values and should not be shared. To learn more please refer OAuth 2.0 tutorial.</em></p>\n\n\n\n<p>4. Go to your Postman application and open the&nbsp;<em><strong>authorization</strong></em>&nbsp;tab.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Authorization_Tab_Postman.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Authorization_Tab_Postman.png\" alt=\"Authorization_Tab_Postman\"/></a></figure>\n\n\n\n<p>5. Select&nbsp;<em><strong>Oauth 2.0</strong>&nbsp;</em>authorization from the drop-down.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Oauth2_Select_Postman.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Oauth2_Select_Postman.png\" alt=\"Oauth2_Select_Postman\"/></a></figure>\n\n\n\n<p>6. Select&nbsp;<em><strong>Get New Access Token</strong></em>&nbsp;from the same panel.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Get_Access_Token.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Get_Access_Token.png\" alt=\"Get_Access_Token\"/></a></figure>\n\n\n\n<p>7. A new panel will open up with different values. Fill up the values as shown in the image.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Get_Access_Token_Values.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Get_Access_Token_Values.png\" alt=\"OAuth 2.0 Authorization with Postman\"/></a></figure>\n\n\n\n<p><em><strong>Note:</strong>&nbsp;Client Id and Client secret are the same which you got during registration&nbsp;of your application.</em></p>\n\n\n\n<p>This information about the URL can be achieved at\u00a0<em><strong>Imgur Documentation</strong></em>. If you are practicing through any other website, you will always get this information under the\u00a0<em><strong>documentation</strong></em>\u00a0part of the website. Normally this page is hard to find from the home page, it is better you search directly to any search engine. For example\u00a0<em><strong>Facebook API documentation or Twitter API documentation</strong></em>. Each and every step will be written in the documentation.</p>\n\n\n\n<p>8. Press&nbsp;<em><strong>Request Token</strong></em>&nbsp;and a new window will open up asking for your credentials.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Postman_Connect_Imgur.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Postman_Connect_Imgur.png\" alt=\"Postman_Connect_Imgur\"/></a></figure>\n\n\n\n<p>9. Fill up your credentials and login into the&nbsp;<em>imgur</em>&nbsp;website.&nbsp;After pressing&nbsp;<em><strong>allow</strong></em>, you will receive the access token in the following panel.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Token_Generated_Imgur.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Token_Generated_Imgur.png\" alt=\"Token_Generated_Imgur\"/></a></figure>\n\n\n\n<p><em><strong>Note</strong>: An access token in Postman will expire in the number of seconds given in the above panel. This depends completely on the website server you are accessing like imgur here. The above panel shows that this token will expire in 315360000 secs. Till this time you can use the endpoint any number of times. You need to request a new token after the specified time has passed i.e. the token has expired.</em></p>\n\n\n\n<p>10. Press click on&nbsp;<em><strong>Use Token</strong></em>&nbsp;in the above screen and then select&nbsp;<em><strong>Postman Token</strong></em>&nbsp;from the drop-down panel.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Select_Postman_Token.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Select_Postman_Token.png\" alt=\"Select_Postman_Token\"/></a></figure>\n\n\n\n<p>11. The token will appear as soon as you click on your token name.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Token_entered_Postman.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Token_entered_Postman.png\" alt=\"Token_entered_Postman\"/></a></figure>\n\n\n\n<p>12. Press the&nbsp;<em><strong>Preview Request</strong></em>&nbsp;to update the header automatically</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Preview_Request_Token_Update.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Preview_Request_Token_Update.png\" alt=\"Preview_Request_Token_Update\"/></a></figure>\n\n\n\n<p>13. You can also visit&nbsp;<em><strong>Header</strong></em>&nbsp;tab to see the token value entered.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Header_Token_Updated.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Header_Token_Updated.png\" alt=\"Header_Token_Updated\"/></a></figure>\n\n\n\n<p>14. Now press&nbsp;<em><strong>send</strong></em>&nbsp;to the same&nbsp;<em>API</em>&nbsp;we entered in step 1 and see the response.</p>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://toolsqa.com/wp-content/uploads/sites/1/nggallery/postman/Response_After_Authorization_Imgur.png\"><img src=\"https://cdn-anlbg.nitrocdn.com/dKKErbUyoNysjatCgltCzbTJJilTMwLi/assets/static/optimized/rev-d0d5d59/wp-content/uploads/sites/1/nggallery/postman/thumbs/thumbs_Response_After_Authorization_Imgur.png\" alt=\"Response_After_Authorization_Imgur\"/></a></figure>\n\n\n\n<p>We have got the correct status and found that our data is zero. This means we were able to get into the server and access our account information through a third party application which was postman. Hence we were authorized using&nbsp;<em>OAuth 2.0</em>.</p>\n\n\n\n<p>You can also practice using other website. Working with OAuth 2 is a very important feature and since it comes under security, it is highly essential. We will now move onto our next tutorial in which we will learn about session variables.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the last tutorial we learnt everything about\u00a0OAuth 2.0 Authorization,\u00a0its\u2019s advantages, meaning and workflow. This tutorial is designed to make you completely understand the concept along with the practical example.\u00a0OAuth 2.0 Authorization with Postman OAuth 2.0 Authorization with Postman? In this tutorial we will be using Postman to see the workflow of\u00a0OAuth 2.0. For this, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [286],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5047"
        }
      ],
      "collection": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/comments?post=5047"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5047/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 5048,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/posts/5047/revisions/5048"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/media?parent=5047"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/categories?post=5047"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://angular.foobrdigital.com/wp-json/wp/v2/tags?post=5047"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]
